/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace AutoGen
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCRefreshFriendList : TBase
  {
    private int _result;
    private Dictionary<int, AutoGen.PlayerData> _playerMap;

    public int Result
    {
      get
      {
        return _result;
      }
      set
      {
        __isset.result = true;
        this._result = value;
      }
    }

    public Dictionary<int, AutoGen.PlayerData> PlayerMap
    {
      get
      {
        return _playerMap;
      }
      set
      {
        __isset.playerMap = true;
        this._playerMap = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool result;
      public bool playerMap;
    }

    public SCRefreshFriendList() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 10:
              if (field.Type == TType.I32) {
                Result = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 20:
              if (field.Type == TType.Map) {
                {
                  PlayerMap = new Dictionary<int, AutoGen.PlayerData>();
                  TMap _map12 = iprot.ReadMapBegin();
                  for( int _i13 = 0; _i13 < _map12.Count; ++_i13)
                  {
                    int _key14;
                    AutoGen.PlayerData _val15;
                    _key14 = iprot.ReadI32();
                    _val15 = new AutoGen.PlayerData();
                    _val15.Read(iprot);
                    PlayerMap[_key14] = _val15;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SCRefreshFriendList");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.result) {
          field.Name = "result";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Result);
          oprot.WriteFieldEnd();
        }
        if (PlayerMap != null && __isset.playerMap) {
          field.Name = "playerMap";
          field.Type = TType.Map;
          field.ID = 20;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, PlayerMap.Count));
            foreach (int _iter16 in PlayerMap.Keys)
            {
              oprot.WriteI32(_iter16);
              PlayerMap[_iter16].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SCRefreshFriendList(");
      bool __first = true;
      if (__isset.result) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Result: ");
        __sb.Append(Result);
      }
      if (PlayerMap != null && __isset.playerMap) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PlayerMap: ");
        __sb.Append(PlayerMap);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
