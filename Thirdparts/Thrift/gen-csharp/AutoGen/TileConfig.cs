/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace AutoGen
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TileConfig : TBase
  {
    private string _name;
    private int _width;
    private int _height;
    private int _depth;
    private string _resource;
    private int _type1;
    private int _type2;
    private string _func;
    private double _rad;
    private bool _overlapFog;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int Width
    {
      get
      {
        return _width;
      }
      set
      {
        __isset.width = true;
        this._width = value;
      }
    }

    public int Height
    {
      get
      {
        return _height;
      }
      set
      {
        __isset.height = true;
        this._height = value;
      }
    }

    public int Depth
    {
      get
      {
        return _depth;
      }
      set
      {
        __isset.depth = true;
        this._depth = value;
      }
    }

    public string Resource
    {
      get
      {
        return _resource;
      }
      set
      {
        __isset.resource = true;
        this._resource = value;
      }
    }

    public int Type1
    {
      get
      {
        return _type1;
      }
      set
      {
        __isset.type1 = true;
        this._type1 = value;
      }
    }

    public int Type2
    {
      get
      {
        return _type2;
      }
      set
      {
        __isset.type2 = true;
        this._type2 = value;
      }
    }

    public string Func
    {
      get
      {
        return _func;
      }
      set
      {
        __isset.func = true;
        this._func = value;
      }
    }

    public double Rad
    {
      get
      {
        return _rad;
      }
      set
      {
        __isset.rad = true;
        this._rad = value;
      }
    }

    public bool OverlapFog
    {
      get
      {
        return _overlapFog;
      }
      set
      {
        __isset.overlapFog = true;
        this._overlapFog = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
      public bool width;
      public bool height;
      public bool depth;
      public bool resource;
      public bool type1;
      public bool type2;
      public bool func;
      public bool rad;
      public bool overlapFog;
    }

    public TileConfig() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 10:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 20:
              if (field.Type == TType.I32) {
                Width = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 30:
              if (field.Type == TType.I32) {
                Height = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 40:
              if (field.Type == TType.I32) {
                Depth = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 50:
              if (field.Type == TType.String) {
                Resource = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 60:
              if (field.Type == TType.I32) {
                Type1 = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 70:
              if (field.Type == TType.I32) {
                Type2 = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 80:
              if (field.Type == TType.String) {
                Func = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 90:
              if (field.Type == TType.Double) {
                Rad = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 100:
              if (field.Type == TType.Bool) {
                OverlapFog = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TileConfig");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.width) {
          field.Name = "width";
          field.Type = TType.I32;
          field.ID = 20;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Width);
          oprot.WriteFieldEnd();
        }
        if (__isset.height) {
          field.Name = "height";
          field.Type = TType.I32;
          field.ID = 30;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Height);
          oprot.WriteFieldEnd();
        }
        if (__isset.depth) {
          field.Name = "depth";
          field.Type = TType.I32;
          field.ID = 40;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Depth);
          oprot.WriteFieldEnd();
        }
        if (Resource != null && __isset.resource) {
          field.Name = "resource";
          field.Type = TType.String;
          field.ID = 50;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Resource);
          oprot.WriteFieldEnd();
        }
        if (__isset.type1) {
          field.Name = "type1";
          field.Type = TType.I32;
          field.ID = 60;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Type1);
          oprot.WriteFieldEnd();
        }
        if (__isset.type2) {
          field.Name = "type2";
          field.Type = TType.I32;
          field.ID = 70;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Type2);
          oprot.WriteFieldEnd();
        }
        if (Func != null && __isset.func) {
          field.Name = "func";
          field.Type = TType.String;
          field.ID = 80;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Func);
          oprot.WriteFieldEnd();
        }
        if (__isset.rad) {
          field.Name = "rad";
          field.Type = TType.Double;
          field.ID = 90;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Rad);
          oprot.WriteFieldEnd();
        }
        if (__isset.overlapFog) {
          field.Name = "overlapFog";
          field.Type = TType.Bool;
          field.ID = 100;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(OverlapFog);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TileConfig(");
      bool __first = true;
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.width) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Width: ");
        __sb.Append(Width);
      }
      if (__isset.height) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Height: ");
        __sb.Append(Height);
      }
      if (__isset.depth) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Depth: ");
        __sb.Append(Depth);
      }
      if (Resource != null && __isset.resource) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Resource: ");
        __sb.Append(Resource);
      }
      if (__isset.type1) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type1: ");
        __sb.Append(Type1);
      }
      if (__isset.type2) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type2: ");
        __sb.Append(Type2);
      }
      if (Func != null && __isset.func) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Func: ");
        __sb.Append(Func);
      }
      if (__isset.rad) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Rad: ");
        __sb.Append(Rad);
      }
      if (__isset.overlapFog) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("OverlapFog: ");
        __sb.Append(OverlapFog);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
