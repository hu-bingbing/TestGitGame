/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace AutoGen
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UserData : TBase
  {
    private int _userId;
    private string _userAccount;
    private string _userPassword;
    private int _userLoginMode;
    private bool _alreadyRegist;
    private RoleData _roleData;
    private ServerData _serverData;

    public int UserId
    {
      get
      {
        return _userId;
      }
      set
      {
        __isset.userId = true;
        this._userId = value;
      }
    }

    public string UserAccount
    {
      get
      {
        return _userAccount;
      }
      set
      {
        __isset.userAccount = true;
        this._userAccount = value;
      }
    }

    public string UserPassword
    {
      get
      {
        return _userPassword;
      }
      set
      {
        __isset.userPassword = true;
        this._userPassword = value;
      }
    }

    public int UserLoginMode
    {
      get
      {
        return _userLoginMode;
      }
      set
      {
        __isset.userLoginMode = true;
        this._userLoginMode = value;
      }
    }

    public bool AlreadyRegist
    {
      get
      {
        return _alreadyRegist;
      }
      set
      {
        __isset.alreadyRegist = true;
        this._alreadyRegist = value;
      }
    }

    public RoleData RoleData
    {
      get
      {
        return _roleData;
      }
      set
      {
        __isset.roleData = true;
        this._roleData = value;
      }
    }

    public ServerData ServerData
    {
      get
      {
        return _serverData;
      }
      set
      {
        __isset.serverData = true;
        this._serverData = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool userId;
      public bool userAccount;
      public bool userPassword;
      public bool userLoginMode;
      public bool alreadyRegist;
      public bool roleData;
      public bool serverData;
    }

    public UserData() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 10:
              if (field.Type == TType.I32) {
                UserId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 20:
              if (field.Type == TType.String) {
                UserAccount = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 30:
              if (field.Type == TType.String) {
                UserPassword = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 40:
              if (field.Type == TType.I32) {
                UserLoginMode = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 50:
              if (field.Type == TType.Bool) {
                AlreadyRegist = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 60:
              if (field.Type == TType.Struct) {
                RoleData = new RoleData();
                RoleData.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 70:
              if (field.Type == TType.Struct) {
                ServerData = new ServerData();
                ServerData.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UserData");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.userId) {
          field.Name = "userId";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(UserId);
          oprot.WriteFieldEnd();
        }
        if (UserAccount != null && __isset.userAccount) {
          field.Name = "userAccount";
          field.Type = TType.String;
          field.ID = 20;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserAccount);
          oprot.WriteFieldEnd();
        }
        if (UserPassword != null && __isset.userPassword) {
          field.Name = "userPassword";
          field.Type = TType.String;
          field.ID = 30;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserPassword);
          oprot.WriteFieldEnd();
        }
        if (__isset.userLoginMode) {
          field.Name = "userLoginMode";
          field.Type = TType.I32;
          field.ID = 40;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(UserLoginMode);
          oprot.WriteFieldEnd();
        }
        if (__isset.alreadyRegist) {
          field.Name = "alreadyRegist";
          field.Type = TType.Bool;
          field.ID = 50;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(AlreadyRegist);
          oprot.WriteFieldEnd();
        }
        if (RoleData != null && __isset.roleData) {
          field.Name = "roleData";
          field.Type = TType.Struct;
          field.ID = 60;
          oprot.WriteFieldBegin(field);
          RoleData.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (ServerData != null && __isset.serverData) {
          field.Name = "serverData";
          field.Type = TType.Struct;
          field.ID = 70;
          oprot.WriteFieldBegin(field);
          ServerData.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UserData(");
      bool __first = true;
      if (__isset.userId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserId: ");
        __sb.Append(UserId);
      }
      if (UserAccount != null && __isset.userAccount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserAccount: ");
        __sb.Append(UserAccount);
      }
      if (UserPassword != null && __isset.userPassword) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserPassword: ");
        __sb.Append(UserPassword);
      }
      if (__isset.userLoginMode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserLoginMode: ");
        __sb.Append(UserLoginMode);
      }
      if (__isset.alreadyRegist) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AlreadyRegist: ");
        __sb.Append(AlreadyRegist);
      }
      if (RoleData != null && __isset.roleData) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RoleData: ");
        __sb.Append(RoleData== null ? "<null>" : RoleData.ToString());
      }
      if (ServerData != null && __isset.serverData) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ServerData: ");
        __sb.Append(ServerData== null ? "<null>" : ServerData.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
