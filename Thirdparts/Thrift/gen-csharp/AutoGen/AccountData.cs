/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace AutoGen
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AccountData : TBase
  {
    private int _id;
    private string _sessionKey;
    private string _channel;
    private string _openId;
    private long _lastLoginTime;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public string SessionKey
    {
      get
      {
        return _sessionKey;
      }
      set
      {
        __isset.sessionKey = true;
        this._sessionKey = value;
      }
    }

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public string OpenId
    {
      get
      {
        return _openId;
      }
      set
      {
        __isset.openId = true;
        this._openId = value;
      }
    }

    public long LastLoginTime
    {
      get
      {
        return _lastLoginTime;
      }
      set
      {
        __isset.lastLoginTime = true;
        this._lastLoginTime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool sessionKey;
      public bool channel;
      public bool openId;
      public bool lastLoginTime;
    }

    public AccountData() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 10:
              if (field.Type == TType.I32) {
                Id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 20:
              if (field.Type == TType.String) {
                SessionKey = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 30:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 40:
              if (field.Type == TType.String) {
                OpenId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 50:
              if (field.Type == TType.I64) {
                LastLoginTime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AccountData");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.id) {
          field.Name = "id";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Id);
          oprot.WriteFieldEnd();
        }
        if (SessionKey != null && __isset.sessionKey) {
          field.Name = "sessionKey";
          field.Type = TType.String;
          field.ID = 20;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SessionKey);
          oprot.WriteFieldEnd();
        }
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 30;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (OpenId != null && __isset.openId) {
          field.Name = "openId";
          field.Type = TType.String;
          field.ID = 40;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OpenId);
          oprot.WriteFieldEnd();
        }
        if (__isset.lastLoginTime) {
          field.Name = "lastLoginTime";
          field.Type = TType.I64;
          field.ID = 50;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LastLoginTime);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AccountData(");
      bool __first = true;
      if (__isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (SessionKey != null && __isset.sessionKey) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SessionKey: ");
        __sb.Append(SessionKey);
      }
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (OpenId != null && __isset.openId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("OpenId: ");
        __sb.Append(OpenId);
      }
      if (__isset.lastLoginTime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LastLoginTime: ");
        __sb.Append(LastLoginTime);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
