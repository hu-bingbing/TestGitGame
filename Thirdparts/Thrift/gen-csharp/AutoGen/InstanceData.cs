/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace AutoGen
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class InstanceData : TBase
  {
    private int _instanceId;
    private int _masterUserId;
    private string _instanceName;
    private Dictionary<int, PlayerData> _playerMap;
    private int _levelId;
    private LevelData _levelData;

    public int InstanceId
    {
      get
      {
        return _instanceId;
      }
      set
      {
        __isset.instanceId = true;
        this._instanceId = value;
      }
    }

    public int MasterUserId
    {
      get
      {
        return _masterUserId;
      }
      set
      {
        __isset.masterUserId = true;
        this._masterUserId = value;
      }
    }

    public string InstanceName
    {
      get
      {
        return _instanceName;
      }
      set
      {
        __isset.instanceName = true;
        this._instanceName = value;
      }
    }

    public Dictionary<int, PlayerData> PlayerMap
    {
      get
      {
        return _playerMap;
      }
      set
      {
        __isset.playerMap = true;
        this._playerMap = value;
      }
    }

    public int LevelId
    {
      get
      {
        return _levelId;
      }
      set
      {
        __isset.levelId = true;
        this._levelId = value;
      }
    }

    public LevelData LevelData
    {
      get
      {
        return _levelData;
      }
      set
      {
        __isset.levelData = true;
        this._levelData = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool instanceId;
      public bool masterUserId;
      public bool instanceName;
      public bool playerMap;
      public bool levelId;
      public bool levelData;
    }

    public InstanceData() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 10:
              if (field.Type == TType.I32) {
                InstanceId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 20:
              if (field.Type == TType.I32) {
                MasterUserId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 30:
              if (field.Type == TType.String) {
                InstanceName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 40:
              if (field.Type == TType.Map) {
                {
                  PlayerMap = new Dictionary<int, PlayerData>();
                  TMap _map14 = iprot.ReadMapBegin();
                  for( int _i15 = 0; _i15 < _map14.Count; ++_i15)
                  {
                    int _key16;
                    PlayerData _val17;
                    _key16 = iprot.ReadI32();
                    _val17 = new PlayerData();
                    _val17.Read(iprot);
                    PlayerMap[_key16] = _val17;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 50:
              if (field.Type == TType.I32) {
                LevelId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 60:
              if (field.Type == TType.Struct) {
                LevelData = new LevelData();
                LevelData.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("InstanceData");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.instanceId) {
          field.Name = "instanceId";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(InstanceId);
          oprot.WriteFieldEnd();
        }
        if (__isset.masterUserId) {
          field.Name = "masterUserId";
          field.Type = TType.I32;
          field.ID = 20;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MasterUserId);
          oprot.WriteFieldEnd();
        }
        if (InstanceName != null && __isset.instanceName) {
          field.Name = "instanceName";
          field.Type = TType.String;
          field.ID = 30;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(InstanceName);
          oprot.WriteFieldEnd();
        }
        if (PlayerMap != null && __isset.playerMap) {
          field.Name = "playerMap";
          field.Type = TType.Map;
          field.ID = 40;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, PlayerMap.Count));
            foreach (int _iter18 in PlayerMap.Keys)
            {
              oprot.WriteI32(_iter18);
              PlayerMap[_iter18].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.levelId) {
          field.Name = "levelId";
          field.Type = TType.I32;
          field.ID = 50;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(LevelId);
          oprot.WriteFieldEnd();
        }
        if (LevelData != null && __isset.levelData) {
          field.Name = "levelData";
          field.Type = TType.Struct;
          field.ID = 60;
          oprot.WriteFieldBegin(field);
          LevelData.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("InstanceData(");
      bool __first = true;
      if (__isset.instanceId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("InstanceId: ");
        __sb.Append(InstanceId);
      }
      if (__isset.masterUserId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MasterUserId: ");
        __sb.Append(MasterUserId);
      }
      if (InstanceName != null && __isset.instanceName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("InstanceName: ");
        __sb.Append(InstanceName);
      }
      if (PlayerMap != null && __isset.playerMap) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PlayerMap: ");
        __sb.Append(PlayerMap);
      }
      if (__isset.levelId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LevelId: ");
        __sb.Append(LevelId);
      }
      if (LevelData != null && __isset.levelData) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LevelData: ");
        __sb.Append(LevelData== null ? "<null>" : LevelData.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
