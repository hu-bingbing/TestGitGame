/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace AutoGen
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class LevelData : TBase
  {
    private int _levelProgress;
    private List<PetData> _petDataList;
    private int _restMana;

    public int LevelProgress
    {
      get
      {
        return _levelProgress;
      }
      set
      {
        __isset.levelProgress = true;
        this._levelProgress = value;
      }
    }

    public List<PetData> PetDataList
    {
      get
      {
        return _petDataList;
      }
      set
      {
        __isset.petDataList = true;
        this._petDataList = value;
      }
    }

    public int RestMana
    {
      get
      {
        return _restMana;
      }
      set
      {
        __isset.restMana = true;
        this._restMana = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool levelProgress;
      public bool petDataList;
      public bool restMana;
    }

    public LevelData() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 10:
              if (field.Type == TType.I32) {
                LevelProgress = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 20:
              if (field.Type == TType.List) {
                {
                  PetDataList = new List<PetData>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    PetData _elem2;
                    _elem2 = new PetData();
                    _elem2.Read(iprot);
                    PetDataList.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 30:
              if (field.Type == TType.I32) {
                RestMana = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("LevelData");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.levelProgress) {
          field.Name = "levelProgress";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(LevelProgress);
          oprot.WriteFieldEnd();
        }
        if (PetDataList != null && __isset.petDataList) {
          field.Name = "petDataList";
          field.Type = TType.List;
          field.ID = 20;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, PetDataList.Count));
            foreach (PetData _iter3 in PetDataList)
            {
              _iter3.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.restMana) {
          field.Name = "restMana";
          field.Type = TType.I32;
          field.ID = 30;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(RestMana);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("LevelData(");
      bool __first = true;
      if (__isset.levelProgress) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LevelProgress: ");
        __sb.Append(LevelProgress);
      }
      if (PetDataList != null && __isset.petDataList) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PetDataList: ");
        __sb.Append(PetDataList);
      }
      if (__isset.restMana) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RestMana: ");
        __sb.Append(RestMana);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
