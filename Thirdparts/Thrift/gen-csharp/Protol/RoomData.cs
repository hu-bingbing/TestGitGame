/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Protol
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class RoomData : TBase
  {
    private long _createTimeSec;
    private long _destoryTimesec;
    private int _id;
    private string _identity;
    private Dictionary<long, PlayerData> _playerMap;
    private Dictionary<long, int> _playerExitTimeMap;
    private int _lastFrameIndex;
    private long _masterUserId;
    private Dictionary<int, VoiceData> _voiceMap;

    public long CreateTimeSec
    {
      get
      {
        return _createTimeSec;
      }
      set
      {
        __isset.createTimeSec = true;
        this._createTimeSec = value;
      }
    }

    public long DestoryTimesec
    {
      get
      {
        return _destoryTimesec;
      }
      set
      {
        __isset.destoryTimesec = true;
        this._destoryTimesec = value;
      }
    }

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public string Identity
    {
      get
      {
        return _identity;
      }
      set
      {
        __isset.identity = true;
        this._identity = value;
      }
    }

    public Dictionary<long, PlayerData> PlayerMap
    {
      get
      {
        return _playerMap;
      }
      set
      {
        __isset.playerMap = true;
        this._playerMap = value;
      }
    }

    public Dictionary<long, int> PlayerExitTimeMap
    {
      get
      {
        return _playerExitTimeMap;
      }
      set
      {
        __isset.playerExitTimeMap = true;
        this._playerExitTimeMap = value;
      }
    }

    public int LastFrameIndex
    {
      get
      {
        return _lastFrameIndex;
      }
      set
      {
        __isset.lastFrameIndex = true;
        this._lastFrameIndex = value;
      }
    }

    public long MasterUserId
    {
      get
      {
        return _masterUserId;
      }
      set
      {
        __isset.masterUserId = true;
        this._masterUserId = value;
      }
    }

    public Dictionary<int, VoiceData> VoiceMap
    {
      get
      {
        return _voiceMap;
      }
      set
      {
        __isset.voiceMap = true;
        this._voiceMap = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool createTimeSec;
      public bool destoryTimesec;
      public bool id;
      public bool identity;
      public bool playerMap;
      public bool playerExitTimeMap;
      public bool lastFrameIndex;
      public bool masterUserId;
      public bool voiceMap;
    }

    public RoomData() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 10:
              if (field.Type == TType.I64) {
                CreateTimeSec = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 30:
              if (field.Type == TType.I64) {
                DestoryTimesec = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 50:
              if (field.Type == TType.I32) {
                Id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 60:
              if (field.Type == TType.String) {
                Identity = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 70:
              if (field.Type == TType.Map) {
                {
                  PlayerMap = new Dictionary<long, PlayerData>();
                  TMap _map20 = iprot.ReadMapBegin();
                  for( int _i21 = 0; _i21 < _map20.Count; ++_i21)
                  {
                    long _key22;
                    PlayerData _val23;
                    _key22 = iprot.ReadI64();
                    _val23 = new PlayerData();
                    _val23.Read(iprot);
                    PlayerMap[_key22] = _val23;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 71:
              if (field.Type == TType.Map) {
                {
                  PlayerExitTimeMap = new Dictionary<long, int>();
                  TMap _map24 = iprot.ReadMapBegin();
                  for( int _i25 = 0; _i25 < _map24.Count; ++_i25)
                  {
                    long _key26;
                    int _val27;
                    _key26 = iprot.ReadI64();
                    _val27 = iprot.ReadI32();
                    PlayerExitTimeMap[_key26] = _val27;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 81:
              if (field.Type == TType.I32) {
                LastFrameIndex = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 90:
              if (field.Type == TType.I64) {
                MasterUserId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 100:
              if (field.Type == TType.Map) {
                {
                  VoiceMap = new Dictionary<int, VoiceData>();
                  TMap _map28 = iprot.ReadMapBegin();
                  for( int _i29 = 0; _i29 < _map28.Count; ++_i29)
                  {
                    int _key30;
                    VoiceData _val31;
                    _key30 = iprot.ReadI32();
                    _val31 = new VoiceData();
                    _val31.Read(iprot);
                    VoiceMap[_key30] = _val31;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("RoomData");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.createTimeSec) {
          field.Name = "createTimeSec";
          field.Type = TType.I64;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(CreateTimeSec);
          oprot.WriteFieldEnd();
        }
        if (__isset.destoryTimesec) {
          field.Name = "destoryTimesec";
          field.Type = TType.I64;
          field.ID = 30;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(DestoryTimesec);
          oprot.WriteFieldEnd();
        }
        if (__isset.id) {
          field.Name = "id";
          field.Type = TType.I32;
          field.ID = 50;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Id);
          oprot.WriteFieldEnd();
        }
        if (Identity != null && __isset.identity) {
          field.Name = "identity";
          field.Type = TType.String;
          field.ID = 60;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Identity);
          oprot.WriteFieldEnd();
        }
        if (PlayerMap != null && __isset.playerMap) {
          field.Name = "playerMap";
          field.Type = TType.Map;
          field.ID = 70;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I64, TType.Struct, PlayerMap.Count));
            foreach (long _iter32 in PlayerMap.Keys)
            {
              oprot.WriteI64(_iter32);
              PlayerMap[_iter32].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (PlayerExitTimeMap != null && __isset.playerExitTimeMap) {
          field.Name = "playerExitTimeMap";
          field.Type = TType.Map;
          field.ID = 71;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I64, TType.I32, PlayerExitTimeMap.Count));
            foreach (long _iter33 in PlayerExitTimeMap.Keys)
            {
              oprot.WriteI64(_iter33);
              oprot.WriteI32(PlayerExitTimeMap[_iter33]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.lastFrameIndex) {
          field.Name = "lastFrameIndex";
          field.Type = TType.I32;
          field.ID = 81;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(LastFrameIndex);
          oprot.WriteFieldEnd();
        }
        if (__isset.masterUserId) {
          field.Name = "masterUserId";
          field.Type = TType.I64;
          field.ID = 90;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(MasterUserId);
          oprot.WriteFieldEnd();
        }
        if (VoiceMap != null && __isset.voiceMap) {
          field.Name = "voiceMap";
          field.Type = TType.Map;
          field.ID = 100;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, VoiceMap.Count));
            foreach (int _iter34 in VoiceMap.Keys)
            {
              oprot.WriteI32(_iter34);
              VoiceMap[_iter34].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("RoomData(");
      bool __first = true;
      if (__isset.createTimeSec) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CreateTimeSec: ");
        __sb.Append(CreateTimeSec);
      }
      if (__isset.destoryTimesec) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DestoryTimesec: ");
        __sb.Append(DestoryTimesec);
      }
      if (__isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Identity != null && __isset.identity) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Identity: ");
        __sb.Append(Identity);
      }
      if (PlayerMap != null && __isset.playerMap) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PlayerMap: ");
        __sb.Append(PlayerMap);
      }
      if (PlayerExitTimeMap != null && __isset.playerExitTimeMap) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PlayerExitTimeMap: ");
        __sb.Append(PlayerExitTimeMap);
      }
      if (__isset.lastFrameIndex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LastFrameIndex: ");
        __sb.Append(LastFrameIndex);
      }
      if (__isset.masterUserId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MasterUserId: ");
        __sb.Append(MasterUserId);
      }
      if (VoiceMap != null && __isset.voiceMap) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("VoiceMap: ");
        __sb.Append(VoiceMap);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
