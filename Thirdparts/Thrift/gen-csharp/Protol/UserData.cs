/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Protol
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UserData : TBase
  {
    private int _createTimeSec;
    private int _createTimeMsec;
    private int _lastLoginSec;
    private int _lastLoginMsec;
    private int _totalOnlineTime;
    private long _userId;
    private string _userAccount;
    private string _userPassword;
    private string _userEmail;
    private int _userLoginMode;
    private int _roleId;
    private List<RoleData> _roleData;
    private List<ReplayData> _replayList;

    public int CreateTimeSec
    {
      get
      {
        return _createTimeSec;
      }
      set
      {
        __isset.createTimeSec = true;
        this._createTimeSec = value;
      }
    }

    public int CreateTimeMsec
    {
      get
      {
        return _createTimeMsec;
      }
      set
      {
        __isset.createTimeMsec = true;
        this._createTimeMsec = value;
      }
    }

    public int LastLoginSec
    {
      get
      {
        return _lastLoginSec;
      }
      set
      {
        __isset.lastLoginSec = true;
        this._lastLoginSec = value;
      }
    }

    public int LastLoginMsec
    {
      get
      {
        return _lastLoginMsec;
      }
      set
      {
        __isset.lastLoginMsec = true;
        this._lastLoginMsec = value;
      }
    }

    public int TotalOnlineTime
    {
      get
      {
        return _totalOnlineTime;
      }
      set
      {
        __isset.totalOnlineTime = true;
        this._totalOnlineTime = value;
      }
    }

    public long UserId
    {
      get
      {
        return _userId;
      }
      set
      {
        __isset.userId = true;
        this._userId = value;
      }
    }

    public string UserAccount
    {
      get
      {
        return _userAccount;
      }
      set
      {
        __isset.userAccount = true;
        this._userAccount = value;
      }
    }

    public string UserPassword
    {
      get
      {
        return _userPassword;
      }
      set
      {
        __isset.userPassword = true;
        this._userPassword = value;
      }
    }

    public string UserEmail
    {
      get
      {
        return _userEmail;
      }
      set
      {
        __isset.userEmail = true;
        this._userEmail = value;
      }
    }

    public int UserLoginMode
    {
      get
      {
        return _userLoginMode;
      }
      set
      {
        __isset.userLoginMode = true;
        this._userLoginMode = value;
      }
    }

    public int RoleId
    {
      get
      {
        return _roleId;
      }
      set
      {
        __isset.roleId = true;
        this._roleId = value;
      }
    }

    public List<RoleData> RoleData
    {
      get
      {
        return _roleData;
      }
      set
      {
        __isset.roleData = true;
        this._roleData = value;
      }
    }

    public List<ReplayData> ReplayList
    {
      get
      {
        return _replayList;
      }
      set
      {
        __isset.replayList = true;
        this._replayList = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool createTimeSec;
      public bool createTimeMsec;
      public bool lastLoginSec;
      public bool lastLoginMsec;
      public bool totalOnlineTime;
      public bool userId;
      public bool userAccount;
      public bool userPassword;
      public bool userEmail;
      public bool userLoginMode;
      public bool roleId;
      public bool roleData;
      public bool replayList;
    }

    public UserData() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 10:
              if (field.Type == TType.I32) {
                CreateTimeSec = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 20:
              if (field.Type == TType.I32) {
                CreateTimeMsec = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 30:
              if (field.Type == TType.I32) {
                LastLoginSec = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 40:
              if (field.Type == TType.I32) {
                LastLoginMsec = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 50:
              if (field.Type == TType.I32) {
                TotalOnlineTime = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 60:
              if (field.Type == TType.I64) {
                UserId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 70:
              if (field.Type == TType.String) {
                UserAccount = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 71:
              if (field.Type == TType.String) {
                UserPassword = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 80:
              if (field.Type == TType.String) {
                UserEmail = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 90:
              if (field.Type == TType.I32) {
                UserLoginMode = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 95:
              if (field.Type == TType.I32) {
                RoleId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10000:
              if (field.Type == TType.List) {
                {
                  RoleData = new List<RoleData>();
                  TList _list8 = iprot.ReadListBegin();
                  for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                  {
                    RoleData _elem10;
                    _elem10 = new RoleData();
                    _elem10.Read(iprot);
                    RoleData.Add(_elem10);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 20000:
              if (field.Type == TType.List) {
                {
                  ReplayList = new List<ReplayData>();
                  TList _list11 = iprot.ReadListBegin();
                  for( int _i12 = 0; _i12 < _list11.Count; ++_i12)
                  {
                    ReplayData _elem13;
                    _elem13 = new ReplayData();
                    _elem13.Read(iprot);
                    ReplayList.Add(_elem13);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UserData");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.createTimeSec) {
          field.Name = "createTimeSec";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(CreateTimeSec);
          oprot.WriteFieldEnd();
        }
        if (__isset.createTimeMsec) {
          field.Name = "createTimeMsec";
          field.Type = TType.I32;
          field.ID = 20;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(CreateTimeMsec);
          oprot.WriteFieldEnd();
        }
        if (__isset.lastLoginSec) {
          field.Name = "lastLoginSec";
          field.Type = TType.I32;
          field.ID = 30;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(LastLoginSec);
          oprot.WriteFieldEnd();
        }
        if (__isset.lastLoginMsec) {
          field.Name = "lastLoginMsec";
          field.Type = TType.I32;
          field.ID = 40;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(LastLoginMsec);
          oprot.WriteFieldEnd();
        }
        if (__isset.totalOnlineTime) {
          field.Name = "totalOnlineTime";
          field.Type = TType.I32;
          field.ID = 50;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(TotalOnlineTime);
          oprot.WriteFieldEnd();
        }
        if (__isset.userId) {
          field.Name = "userId";
          field.Type = TType.I64;
          field.ID = 60;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(UserId);
          oprot.WriteFieldEnd();
        }
        if (UserAccount != null && __isset.userAccount) {
          field.Name = "userAccount";
          field.Type = TType.String;
          field.ID = 70;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserAccount);
          oprot.WriteFieldEnd();
        }
        if (UserPassword != null && __isset.userPassword) {
          field.Name = "userPassword";
          field.Type = TType.String;
          field.ID = 71;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserPassword);
          oprot.WriteFieldEnd();
        }
        if (UserEmail != null && __isset.userEmail) {
          field.Name = "userEmail";
          field.Type = TType.String;
          field.ID = 80;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserEmail);
          oprot.WriteFieldEnd();
        }
        if (__isset.userLoginMode) {
          field.Name = "userLoginMode";
          field.Type = TType.I32;
          field.ID = 90;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(UserLoginMode);
          oprot.WriteFieldEnd();
        }
        if (__isset.roleId) {
          field.Name = "roleId";
          field.Type = TType.I32;
          field.ID = 95;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(RoleId);
          oprot.WriteFieldEnd();
        }
        if (RoleData != null && __isset.roleData) {
          field.Name = "roleData";
          field.Type = TType.List;
          field.ID = 10000;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, RoleData.Count));
            foreach (RoleData _iter14 in RoleData)
            {
              _iter14.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (ReplayList != null && __isset.replayList) {
          field.Name = "replayList";
          field.Type = TType.List;
          field.ID = 20000;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, ReplayList.Count));
            foreach (ReplayData _iter15 in ReplayList)
            {
              _iter15.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UserData(");
      bool __first = true;
      if (__isset.createTimeSec) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CreateTimeSec: ");
        __sb.Append(CreateTimeSec);
      }
      if (__isset.createTimeMsec) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CreateTimeMsec: ");
        __sb.Append(CreateTimeMsec);
      }
      if (__isset.lastLoginSec) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LastLoginSec: ");
        __sb.Append(LastLoginSec);
      }
      if (__isset.lastLoginMsec) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LastLoginMsec: ");
        __sb.Append(LastLoginMsec);
      }
      if (__isset.totalOnlineTime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TotalOnlineTime: ");
        __sb.Append(TotalOnlineTime);
      }
      if (__isset.userId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserId: ");
        __sb.Append(UserId);
      }
      if (UserAccount != null && __isset.userAccount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserAccount: ");
        __sb.Append(UserAccount);
      }
      if (UserPassword != null && __isset.userPassword) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserPassword: ");
        __sb.Append(UserPassword);
      }
      if (UserEmail != null && __isset.userEmail) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserEmail: ");
        __sb.Append(UserEmail);
      }
      if (__isset.userLoginMode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserLoginMode: ");
        __sb.Append(UserLoginMode);
      }
      if (__isset.roleId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RoleId: ");
        __sb.Append(RoleId);
      }
      if (RoleData != null && __isset.roleData) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RoleData: ");
        __sb.Append(RoleData);
      }
      if (ReplayList != null && __isset.replayList) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReplayList: ");
        __sb.Append(ReplayList);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
