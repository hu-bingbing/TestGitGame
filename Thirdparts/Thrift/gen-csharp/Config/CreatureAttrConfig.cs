/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CreatureAttrConfig : TBase
  {
    private int _id;
    private string _name;
    private int _type;
    private int _initHp;
    private int _maxHp;
    private int _patrolSpeed;
    private int _chaseSpeed;
    private int _attackSpeed;
    private int _guardArea;
    private int _attackArea;
    private int _aiMode;
    private string _assetBundle;
    private string _sourceName;
    private int _bonusStrategy;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int InitHp
    {
      get
      {
        return _initHp;
      }
      set
      {
        __isset.initHp = true;
        this._initHp = value;
      }
    }

    public int MaxHp
    {
      get
      {
        return _maxHp;
      }
      set
      {
        __isset.maxHp = true;
        this._maxHp = value;
      }
    }

    public int PatrolSpeed
    {
      get
      {
        return _patrolSpeed;
      }
      set
      {
        __isset.patrolSpeed = true;
        this._patrolSpeed = value;
      }
    }

    public int ChaseSpeed
    {
      get
      {
        return _chaseSpeed;
      }
      set
      {
        __isset.chaseSpeed = true;
        this._chaseSpeed = value;
      }
    }

    public int AttackSpeed
    {
      get
      {
        return _attackSpeed;
      }
      set
      {
        __isset.attackSpeed = true;
        this._attackSpeed = value;
      }
    }

    public int GuardArea
    {
      get
      {
        return _guardArea;
      }
      set
      {
        __isset.guardArea = true;
        this._guardArea = value;
      }
    }

    public int AttackArea
    {
      get
      {
        return _attackArea;
      }
      set
      {
        __isset.attackArea = true;
        this._attackArea = value;
      }
    }

    public int AiMode
    {
      get
      {
        return _aiMode;
      }
      set
      {
        __isset.aiMode = true;
        this._aiMode = value;
      }
    }

    public string AssetBundle
    {
      get
      {
        return _assetBundle;
      }
      set
      {
        __isset.assetBundle = true;
        this._assetBundle = value;
      }
    }

    public string SourceName
    {
      get
      {
        return _sourceName;
      }
      set
      {
        __isset.sourceName = true;
        this._sourceName = value;
      }
    }

    public int BonusStrategy
    {
      get
      {
        return _bonusStrategy;
      }
      set
      {
        __isset.bonusStrategy = true;
        this._bonusStrategy = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool name;
      public bool type;
      public bool initHp;
      public bool maxHp;
      public bool patrolSpeed;
      public bool chaseSpeed;
      public bool attackSpeed;
      public bool guardArea;
      public bool attackArea;
      public bool aiMode;
      public bool assetBundle;
      public bool sourceName;
      public bool bonusStrategy;
    }

    public CreatureAttrConfig() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 5:
              if (field.Type == TType.I32) {
                Id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I32) {
                Type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 20:
              if (field.Type == TType.I32) {
                InitHp = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 30:
              if (field.Type == TType.I32) {
                MaxHp = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 40:
              if (field.Type == TType.I32) {
                PatrolSpeed = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 50:
              if (field.Type == TType.I32) {
                ChaseSpeed = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 60:
              if (field.Type == TType.I32) {
                AttackSpeed = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 70:
              if (field.Type == TType.I32) {
                GuardArea = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 80:
              if (field.Type == TType.I32) {
                AttackArea = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 90:
              if (field.Type == TType.I32) {
                AiMode = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 100:
              if (field.Type == TType.String) {
                AssetBundle = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 110:
              if (field.Type == TType.String) {
                SourceName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 120:
              if (field.Type == TType.I32) {
                BonusStrategy = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("CreatureAttrConfig");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.id) {
          field.Name = "id";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Id);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Type);
          oprot.WriteFieldEnd();
        }
        if (__isset.initHp) {
          field.Name = "initHp";
          field.Type = TType.I32;
          field.ID = 20;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(InitHp);
          oprot.WriteFieldEnd();
        }
        if (__isset.maxHp) {
          field.Name = "maxHp";
          field.Type = TType.I32;
          field.ID = 30;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MaxHp);
          oprot.WriteFieldEnd();
        }
        if (__isset.patrolSpeed) {
          field.Name = "patrolSpeed";
          field.Type = TType.I32;
          field.ID = 40;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PatrolSpeed);
          oprot.WriteFieldEnd();
        }
        if (__isset.chaseSpeed) {
          field.Name = "chaseSpeed";
          field.Type = TType.I32;
          field.ID = 50;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ChaseSpeed);
          oprot.WriteFieldEnd();
        }
        if (__isset.attackSpeed) {
          field.Name = "attackSpeed";
          field.Type = TType.I32;
          field.ID = 60;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(AttackSpeed);
          oprot.WriteFieldEnd();
        }
        if (__isset.guardArea) {
          field.Name = "guardArea";
          field.Type = TType.I32;
          field.ID = 70;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(GuardArea);
          oprot.WriteFieldEnd();
        }
        if (__isset.attackArea) {
          field.Name = "attackArea";
          field.Type = TType.I32;
          field.ID = 80;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(AttackArea);
          oprot.WriteFieldEnd();
        }
        if (__isset.aiMode) {
          field.Name = "aiMode";
          field.Type = TType.I32;
          field.ID = 90;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(AiMode);
          oprot.WriteFieldEnd();
        }
        if (AssetBundle != null && __isset.assetBundle) {
          field.Name = "assetBundle";
          field.Type = TType.String;
          field.ID = 100;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AssetBundle);
          oprot.WriteFieldEnd();
        }
        if (SourceName != null && __isset.sourceName) {
          field.Name = "sourceName";
          field.Type = TType.String;
          field.ID = 110;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SourceName);
          oprot.WriteFieldEnd();
        }
        if (__isset.bonusStrategy) {
          field.Name = "bonusStrategy";
          field.Type = TType.I32;
          field.ID = 120;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(BonusStrategy);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CreatureAttrConfig(");
      bool __first = true;
      if (__isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (__isset.initHp) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("InitHp: ");
        __sb.Append(InitHp);
      }
      if (__isset.maxHp) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MaxHp: ");
        __sb.Append(MaxHp);
      }
      if (__isset.patrolSpeed) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PatrolSpeed: ");
        __sb.Append(PatrolSpeed);
      }
      if (__isset.chaseSpeed) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChaseSpeed: ");
        __sb.Append(ChaseSpeed);
      }
      if (__isset.attackSpeed) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AttackSpeed: ");
        __sb.Append(AttackSpeed);
      }
      if (__isset.guardArea) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GuardArea: ");
        __sb.Append(GuardArea);
      }
      if (__isset.attackArea) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AttackArea: ");
        __sb.Append(AttackArea);
      }
      if (__isset.aiMode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AiMode: ");
        __sb.Append(AiMode);
      }
      if (AssetBundle != null && __isset.assetBundle) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AssetBundle: ");
        __sb.Append(AssetBundle);
      }
      if (SourceName != null && __isset.sourceName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SourceName: ");
        __sb.Append(SourceName);
      }
      if (__isset.bonusStrategy) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BonusStrategy: ");
        __sb.Append(BonusStrategy);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
