/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class BulletConfigTable : TBase
  {
    private Dictionary<int, BulletConfig> _bulletConfigMap;

    public Dictionary<int, BulletConfig> BulletConfigMap
    {
      get
      {
        return _bulletConfigMap;
      }
      set
      {
        __isset.bulletConfigMap = true;
        this._bulletConfigMap = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool bulletConfigMap;
    }

    public BulletConfigTable() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 10:
              if (field.Type == TType.Map) {
                {
                  BulletConfigMap = new Dictionary<int, BulletConfig>();
                  TMap _map29 = iprot.ReadMapBegin();
                  for( int _i30 = 0; _i30 < _map29.Count; ++_i30)
                  {
                    int _key31;
                    BulletConfig _val32;
                    _key31 = iprot.ReadI32();
                    _val32 = new BulletConfig();
                    _val32.Read(iprot);
                    BulletConfigMap[_key31] = _val32;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("BulletConfigTable");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (BulletConfigMap != null && __isset.bulletConfigMap) {
          field.Name = "bulletConfigMap";
          field.Type = TType.Map;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, BulletConfigMap.Count));
            foreach (int _iter33 in BulletConfigMap.Keys)
            {
              oprot.WriteI32(_iter33);
              BulletConfigMap[_iter33].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("BulletConfigTable(");
      bool __first = true;
      if (BulletConfigMap != null && __isset.bulletConfigMap) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BulletConfigMap: ");
        __sb.Append(BulletConfigMap);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
