/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ItemGeneratorConfig : TBase
  {
    private int _id;
    private List<int> _itemIds;
    private List<int> _itemProbs;
    private int _generateType;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public List<int> ItemIds
    {
      get
      {
        return _itemIds;
      }
      set
      {
        __isset.itemIds = true;
        this._itemIds = value;
      }
    }

    public List<int> ItemProbs
    {
      get
      {
        return _itemProbs;
      }
      set
      {
        __isset.itemProbs = true;
        this._itemProbs = value;
      }
    }

    public int GenerateType
    {
      get
      {
        return _generateType;
      }
      set
      {
        __isset.generateType = true;
        this._generateType = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool itemIds;
      public bool itemProbs;
      public bool generateType;
    }

    public ItemGeneratorConfig() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 10:
              if (field.Type == TType.I32) {
                Id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 20:
              if (field.Type == TType.List) {
                {
                  ItemIds = new List<int>();
                  TList _list39 = iprot.ReadListBegin();
                  for( int _i40 = 0; _i40 < _list39.Count; ++_i40)
                  {
                    int _elem41;
                    _elem41 = iprot.ReadI32();
                    ItemIds.Add(_elem41);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 25:
              if (field.Type == TType.List) {
                {
                  ItemProbs = new List<int>();
                  TList _list42 = iprot.ReadListBegin();
                  for( int _i43 = 0; _i43 < _list42.Count; ++_i43)
                  {
                    int _elem44;
                    _elem44 = iprot.ReadI32();
                    ItemProbs.Add(_elem44);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 30:
              if (field.Type == TType.I32) {
                GenerateType = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ItemGeneratorConfig");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.id) {
          field.Name = "id";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Id);
          oprot.WriteFieldEnd();
        }
        if (ItemIds != null && __isset.itemIds) {
          field.Name = "itemIds";
          field.Type = TType.List;
          field.ID = 20;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, ItemIds.Count));
            foreach (int _iter45 in ItemIds)
            {
              oprot.WriteI32(_iter45);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (ItemProbs != null && __isset.itemProbs) {
          field.Name = "itemProbs";
          field.Type = TType.List;
          field.ID = 25;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, ItemProbs.Count));
            foreach (int _iter46 in ItemProbs)
            {
              oprot.WriteI32(_iter46);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.generateType) {
          field.Name = "generateType";
          field.Type = TType.I32;
          field.ID = 30;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(GenerateType);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ItemGeneratorConfig(");
      bool __first = true;
      if (__isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (ItemIds != null && __isset.itemIds) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ItemIds: ");
        __sb.Append(ItemIds);
      }
      if (ItemProbs != null && __isset.itemProbs) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ItemProbs: ");
        __sb.Append(ItemProbs);
      }
      if (__isset.generateType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GenerateType: ");
        __sb.Append(GenerateType);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
