/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MagicPlayerAttrConfig : TBase
  {
    private int _initMana;
    private int _maxMana;
    private int _initChopCost;
    private int _ChopCostAdd;
    private int _maxChopCost;
    private int _blowCost;
    private int _minFogRadius;
    private int _maxFogRadius;
    private int _manaTimer;
    private int _winduration;
    private bool _isFireMode;
    private int _blowCdTime;

    public int InitMana
    {
      get
      {
        return _initMana;
      }
      set
      {
        __isset.initMana = true;
        this._initMana = value;
      }
    }

    public int MaxMana
    {
      get
      {
        return _maxMana;
      }
      set
      {
        __isset.maxMana = true;
        this._maxMana = value;
      }
    }

    public int InitChopCost
    {
      get
      {
        return _initChopCost;
      }
      set
      {
        __isset.initChopCost = true;
        this._initChopCost = value;
      }
    }

    public int ChopCostAdd
    {
      get
      {
        return _ChopCostAdd;
      }
      set
      {
        __isset.ChopCostAdd = true;
        this._ChopCostAdd = value;
      }
    }

    public int MaxChopCost
    {
      get
      {
        return _maxChopCost;
      }
      set
      {
        __isset.maxChopCost = true;
        this._maxChopCost = value;
      }
    }

    public int BlowCost
    {
      get
      {
        return _blowCost;
      }
      set
      {
        __isset.blowCost = true;
        this._blowCost = value;
      }
    }

    public int MinFogRadius
    {
      get
      {
        return _minFogRadius;
      }
      set
      {
        __isset.minFogRadius = true;
        this._minFogRadius = value;
      }
    }

    public int MaxFogRadius
    {
      get
      {
        return _maxFogRadius;
      }
      set
      {
        __isset.maxFogRadius = true;
        this._maxFogRadius = value;
      }
    }

    public int ManaTimer
    {
      get
      {
        return _manaTimer;
      }
      set
      {
        __isset.manaTimer = true;
        this._manaTimer = value;
      }
    }

    public int Winduration
    {
      get
      {
        return _winduration;
      }
      set
      {
        __isset.winduration = true;
        this._winduration = value;
      }
    }

    public bool IsFireMode
    {
      get
      {
        return _isFireMode;
      }
      set
      {
        __isset.isFireMode = true;
        this._isFireMode = value;
      }
    }

    public int BlowCdTime
    {
      get
      {
        return _blowCdTime;
      }
      set
      {
        __isset.blowCdTime = true;
        this._blowCdTime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool initMana;
      public bool maxMana;
      public bool initChopCost;
      public bool ChopCostAdd;
      public bool maxChopCost;
      public bool blowCost;
      public bool minFogRadius;
      public bool maxFogRadius;
      public bool manaTimer;
      public bool winduration;
      public bool isFireMode;
      public bool blowCdTime;
    }

    public MagicPlayerAttrConfig() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 10:
              if (field.Type == TType.I32) {
                InitMana = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 20:
              if (field.Type == TType.I32) {
                MaxMana = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 30:
              if (field.Type == TType.I32) {
                InitChopCost = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 40:
              if (field.Type == TType.I32) {
                ChopCostAdd = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 50:
              if (field.Type == TType.I32) {
                MaxChopCost = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 60:
              if (field.Type == TType.I32) {
                BlowCost = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 70:
              if (field.Type == TType.I32) {
                MinFogRadius = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 80:
              if (field.Type == TType.I32) {
                MaxFogRadius = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 90:
              if (field.Type == TType.I32) {
                ManaTimer = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 100:
              if (field.Type == TType.I32) {
                Winduration = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 110:
              if (field.Type == TType.Bool) {
                IsFireMode = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 120:
              if (field.Type == TType.I32) {
                BlowCdTime = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("MagicPlayerAttrConfig");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.initMana) {
          field.Name = "initMana";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(InitMana);
          oprot.WriteFieldEnd();
        }
        if (__isset.maxMana) {
          field.Name = "maxMana";
          field.Type = TType.I32;
          field.ID = 20;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MaxMana);
          oprot.WriteFieldEnd();
        }
        if (__isset.initChopCost) {
          field.Name = "initChopCost";
          field.Type = TType.I32;
          field.ID = 30;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(InitChopCost);
          oprot.WriteFieldEnd();
        }
        if (__isset.ChopCostAdd) {
          field.Name = "ChopCostAdd";
          field.Type = TType.I32;
          field.ID = 40;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ChopCostAdd);
          oprot.WriteFieldEnd();
        }
        if (__isset.maxChopCost) {
          field.Name = "maxChopCost";
          field.Type = TType.I32;
          field.ID = 50;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MaxChopCost);
          oprot.WriteFieldEnd();
        }
        if (__isset.blowCost) {
          field.Name = "blowCost";
          field.Type = TType.I32;
          field.ID = 60;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(BlowCost);
          oprot.WriteFieldEnd();
        }
        if (__isset.minFogRadius) {
          field.Name = "minFogRadius";
          field.Type = TType.I32;
          field.ID = 70;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MinFogRadius);
          oprot.WriteFieldEnd();
        }
        if (__isset.maxFogRadius) {
          field.Name = "maxFogRadius";
          field.Type = TType.I32;
          field.ID = 80;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MaxFogRadius);
          oprot.WriteFieldEnd();
        }
        if (__isset.manaTimer) {
          field.Name = "manaTimer";
          field.Type = TType.I32;
          field.ID = 90;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ManaTimer);
          oprot.WriteFieldEnd();
        }
        if (__isset.winduration) {
          field.Name = "winduration";
          field.Type = TType.I32;
          field.ID = 100;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Winduration);
          oprot.WriteFieldEnd();
        }
        if (__isset.isFireMode) {
          field.Name = "isFireMode";
          field.Type = TType.Bool;
          field.ID = 110;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IsFireMode);
          oprot.WriteFieldEnd();
        }
        if (__isset.blowCdTime) {
          field.Name = "blowCdTime";
          field.Type = TType.I32;
          field.ID = 120;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(BlowCdTime);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("MagicPlayerAttrConfig(");
      bool __first = true;
      if (__isset.initMana) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("InitMana: ");
        __sb.Append(InitMana);
      }
      if (__isset.maxMana) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MaxMana: ");
        __sb.Append(MaxMana);
      }
      if (__isset.initChopCost) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("InitChopCost: ");
        __sb.Append(InitChopCost);
      }
      if (__isset.ChopCostAdd) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChopCostAdd: ");
        __sb.Append(ChopCostAdd);
      }
      if (__isset.maxChopCost) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MaxChopCost: ");
        __sb.Append(MaxChopCost);
      }
      if (__isset.blowCost) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BlowCost: ");
        __sb.Append(BlowCost);
      }
      if (__isset.minFogRadius) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MinFogRadius: ");
        __sb.Append(MinFogRadius);
      }
      if (__isset.maxFogRadius) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MaxFogRadius: ");
        __sb.Append(MaxFogRadius);
      }
      if (__isset.manaTimer) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ManaTimer: ");
        __sb.Append(ManaTimer);
      }
      if (__isset.winduration) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Winduration: ");
        __sb.Append(Winduration);
      }
      if (__isset.isFireMode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsFireMode: ");
        __sb.Append(IsFireMode);
      }
      if (__isset.blowCdTime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BlowCdTime: ");
        __sb.Append(BlowCdTime);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
