/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DungeonConfig : TBase
  {
    private int _id;
    private string _name;
    private string _icon;
    private string _mapName;
    private List<ChildDungeonConfig> _childrenList;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public string Icon
    {
      get
      {
        return _icon;
      }
      set
      {
        __isset.icon = true;
        this._icon = value;
      }
    }

    public string MapName
    {
      get
      {
        return _mapName;
      }
      set
      {
        __isset.mapName = true;
        this._mapName = value;
      }
    }

    public List<ChildDungeonConfig> ChildrenList
    {
      get
      {
        return _childrenList;
      }
      set
      {
        __isset.childrenList = true;
        this._childrenList = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool name;
      public bool icon;
      public bool mapName;
      public bool childrenList;
    }

    public DungeonConfig() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 10:
              if (field.Type == TType.I32) {
                Id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 20:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 30:
              if (field.Type == TType.String) {
                Icon = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 40:
              if (field.Type == TType.String) {
                MapName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 50:
              if (field.Type == TType.List) {
                {
                  ChildrenList = new List<ChildDungeonConfig>();
                  TList _list10 = iprot.ReadListBegin();
                  for( int _i11 = 0; _i11 < _list10.Count; ++_i11)
                  {
                    ChildDungeonConfig _elem12;
                    _elem12 = new ChildDungeonConfig();
                    _elem12.Read(iprot);
                    ChildrenList.Add(_elem12);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("DungeonConfig");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.id) {
          field.Name = "id";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Id);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 20;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (Icon != null && __isset.icon) {
          field.Name = "icon";
          field.Type = TType.String;
          field.ID = 30;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Icon);
          oprot.WriteFieldEnd();
        }
        if (MapName != null && __isset.mapName) {
          field.Name = "mapName";
          field.Type = TType.String;
          field.ID = 40;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MapName);
          oprot.WriteFieldEnd();
        }
        if (ChildrenList != null && __isset.childrenList) {
          field.Name = "childrenList";
          field.Type = TType.List;
          field.ID = 50;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, ChildrenList.Count));
            foreach (ChildDungeonConfig _iter13 in ChildrenList)
            {
              _iter13.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DungeonConfig(");
      bool __first = true;
      if (__isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (Icon != null && __isset.icon) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Icon: ");
        __sb.Append(Icon);
      }
      if (MapName != null && __isset.mapName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MapName: ");
        __sb.Append(MapName);
      }
      if (ChildrenList != null && __isset.childrenList) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChildrenList: ");
        __sb.Append(ChildrenList);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
