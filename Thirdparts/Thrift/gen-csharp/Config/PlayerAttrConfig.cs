/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class PlayerAttrConfig : TBase
  {
    private int _initHp;
    private int _maxHp;
    private int _moveSpeed;
    private int _jumpSpeed;
    private int _guardDuration;

    public int InitHp
    {
      get
      {
        return _initHp;
      }
      set
      {
        __isset.initHp = true;
        this._initHp = value;
      }
    }

    public int MaxHp
    {
      get
      {
        return _maxHp;
      }
      set
      {
        __isset.maxHp = true;
        this._maxHp = value;
      }
    }

    public int MoveSpeed
    {
      get
      {
        return _moveSpeed;
      }
      set
      {
        __isset.moveSpeed = true;
        this._moveSpeed = value;
      }
    }

    public int JumpSpeed
    {
      get
      {
        return _jumpSpeed;
      }
      set
      {
        __isset.jumpSpeed = true;
        this._jumpSpeed = value;
      }
    }

    public int GuardDuration
    {
      get
      {
        return _guardDuration;
      }
      set
      {
        __isset.guardDuration = true;
        this._guardDuration = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool initHp;
      public bool maxHp;
      public bool moveSpeed;
      public bool jumpSpeed;
      public bool guardDuration;
    }

    public PlayerAttrConfig() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 10:
              if (field.Type == TType.I32) {
                InitHp = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 20:
              if (field.Type == TType.I32) {
                MaxHp = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 30:
              if (field.Type == TType.I32) {
                MoveSpeed = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 40:
              if (field.Type == TType.I32) {
                JumpSpeed = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 50:
              if (field.Type == TType.I32) {
                GuardDuration = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("PlayerAttrConfig");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.initHp) {
          field.Name = "initHp";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(InitHp);
          oprot.WriteFieldEnd();
        }
        if (__isset.maxHp) {
          field.Name = "maxHp";
          field.Type = TType.I32;
          field.ID = 20;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MaxHp);
          oprot.WriteFieldEnd();
        }
        if (__isset.moveSpeed) {
          field.Name = "moveSpeed";
          field.Type = TType.I32;
          field.ID = 30;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MoveSpeed);
          oprot.WriteFieldEnd();
        }
        if (__isset.jumpSpeed) {
          field.Name = "jumpSpeed";
          field.Type = TType.I32;
          field.ID = 40;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(JumpSpeed);
          oprot.WriteFieldEnd();
        }
        if (__isset.guardDuration) {
          field.Name = "guardDuration";
          field.Type = TType.I32;
          field.ID = 50;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(GuardDuration);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("PlayerAttrConfig(");
      bool __first = true;
      if (__isset.initHp) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("InitHp: ");
        __sb.Append(InitHp);
      }
      if (__isset.maxHp) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MaxHp: ");
        __sb.Append(MaxHp);
      }
      if (__isset.moveSpeed) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MoveSpeed: ");
        __sb.Append(MoveSpeed);
      }
      if (__isset.jumpSpeed) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("JumpSpeed: ");
        __sb.Append(JumpSpeed);
      }
      if (__isset.guardDuration) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GuardDuration: ");
        __sb.Append(GuardDuration);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
