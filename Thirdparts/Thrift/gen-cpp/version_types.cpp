/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "version_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>



int _kDownloadAssetTypeValues[] = {
  DownloadAssetType::ConfigByte,
  DownloadAssetType::Image,
  DownloadAssetType::Audio,
  DownloadAssetType::AssetBundle
};
const char* _kDownloadAssetTypeNames[] = {
  "ConfigByte",
  "Image",
  "Audio",
  "AssetBundle"
};
const std::map<int, const char*> _DownloadAssetType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kDownloadAssetTypeValues, _kDownloadAssetTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


VersionConfigElement::~VersionConfigElement() throw() {
}


void VersionConfigElement::__set_name(const std::string& val) {
  this->name = val;
}

void VersionConfigElement::__set_sign(const std::string& val) {
  this->sign = val;
}

void VersionConfigElement::__set_type(const DownloadAssetType::type val) {
  this->type = val;
}

uint32_t VersionConfigElement::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sign);
          this->__isset.sign = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->type = (DownloadAssetType::type)ecast0;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VersionConfigElement::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("VersionConfigElement");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sign", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->sign);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(VersionConfigElement &a, VersionConfigElement &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.sign, b.sign);
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

VersionConfigElement::VersionConfigElement(const VersionConfigElement& other1) {
  name = other1.name;
  sign = other1.sign;
  type = other1.type;
  __isset = other1.__isset;
}
VersionConfigElement& VersionConfigElement::operator=(const VersionConfigElement& other2) {
  name = other2.name;
  sign = other2.sign;
  type = other2.type;
  __isset = other2.__isset;
  return *this;
}
void VersionConfigElement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "VersionConfigElement(";
  out << "name=" << to_string(name);
  out << ", " << "sign=" << to_string(sign);
  out << ", " << "type=" << to_string(type);
  out << ")";
}


VersionConfig::~VersionConfig() throw() {
}


void VersionConfig::__set_versionList(const std::vector<VersionConfigElement> & val) {
  this->versionList = val;
}

uint32_t VersionConfig::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->versionList.clear();
            uint32_t _size3;
            ::apache::thrift::protocol::TType _etype6;
            xfer += iprot->readListBegin(_etype6, _size3);
            this->versionList.resize(_size3);
            uint32_t _i7;
            for (_i7 = 0; _i7 < _size3; ++_i7)
            {
              xfer += this->versionList[_i7].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.versionList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VersionConfig::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("VersionConfig");

  xfer += oprot->writeFieldBegin("versionList", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->versionList.size()));
    std::vector<VersionConfigElement> ::const_iterator _iter8;
    for (_iter8 = this->versionList.begin(); _iter8 != this->versionList.end(); ++_iter8)
    {
      xfer += (*_iter8).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(VersionConfig &a, VersionConfig &b) {
  using ::std::swap;
  swap(a.versionList, b.versionList);
  swap(a.__isset, b.__isset);
}

VersionConfig::VersionConfig(const VersionConfig& other9) {
  versionList = other9.versionList;
  __isset = other9.__isset;
}
VersionConfig& VersionConfig::operator=(const VersionConfig& other10) {
  versionList = other10.versionList;
  __isset = other10.__isset;
  return *this;
}
void VersionConfig::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "VersionConfig(";
  out << "versionList=" << to_string(versionList);
  out << ")";
}


