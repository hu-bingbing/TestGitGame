/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef message_TYPES_H
#define message_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "profile_types.h"


namespace CytxGame {

struct MessageId {
  enum type {
    CS_Login = 218572560,
    SC_Login = 252126993,
    CS_Register = 218572660,
    SC_Register = 252127093,
    CS_TouristLogin = 218572760,
    SC_TouristLogin = 252127193,
    CS_Logout = 218572860,
    SC_Logout = 252127293,
    C_LoginGame = 84213765,
    S_LoginGame = 117768197,
    SC_Connect = 67764230,
    CS_ConnectKey = 84541443,
    SC_ConnectKey = 118095875,
    CS_TouristLoginGame = 218572960,
    SC_TouristLoginGame = 252127393,
    CS_CreateInstance = 218582560,
    SC_CreateInstance = 252136993,
    CS_InstanceList = 218582660,
    SC_InstanceList = 252137093,
    CS_JoinInstance = 218582760,
    SC_JoinInstance = 252137193,
    CS_ExitInstance = 218582860,
    SC_ExitInstance = 252137293,
    CS_StartGame = 218582960,
    SC_StartGame = 252137393,
    CS_StartGameConfirm = 218583060,
    SC_StartGameConfirm = 252137493,
    CS_EndGame = 218583160,
    SC_EndGame = 252137593,
    CS_ExitGame = 218583170,
    SC_ExitGame = 252137603,
    CS_RetrieveCommand = 218583260,
    SC_RetrieveCommand = 252137693,
    CS_Frame = 218583360,
    SC_Frame = 252137793,
    CS_RandomNickname = 218583460,
    SC_RandomNickname = 252137893,
    CS_SetNickname = 218583560,
    SC_SetNickname = 252137993,
    CS_SetClassType = 218583660,
    SC_SetClassType = 252138093,
    CS_RefreshFriendList = 218583760,
    SC_RefreshFriendList = 252138193,
    CS_Invitation = 218583860,
    SC_Invitation = 252138293,
    SC_NoticeInvitation = 252138393,
    CS_ConfirmInvitation = 218584060,
    SC_ConfirmInvitation = 252138493,
    SC_NoticeConfirmInvitation = 252138593,
    CS_CancelInvitation = 218584260,
    SC_CancelInvitation = 252138693,
    SC_NoticeCancelInvitation = 252138793,
    CS_ExitInvitation = 218584460,
    SC_ExitInvitation = 252138893,
    CS_ChooseLevel = 218584560,
    SC_ChooseLevel = 252138993,
    CS_FindUser = 218584660,
    SC_FindUser = 252139093,
    CS_SaveDungeonProgress = 218584760,
    SC_SaveDungeonProgress = 252139193,
    CS_Pause = 218584860,
    SC_Pause = 252139293,
    CS_Continue = 218584960,
    SC_Continue = 252139393,
    CS_RestartGame = 218585160,
    SC_RestartGame = 252139593,
    CS_QuickMatch = 218585260,
    SC_QuickMatch = 252139693,
    CS_QuickMatchLan = 218585360,
    SC_QuickMatchLan = 252139793,
    CS_QuickMatchCancel = 218585460,
    SC_QuickMatchCancel = 252139893,
    CS_ReplayList = 218587560,
    SC_ReplayList = 252141993,
    CS_ReplayChoose = 218587660,
    SC_ReplayChoose = 252142093,
    CS_ReplayStart = 218587760,
    SC_ReplayStart = 252142193,
    CS_ReplayEnd = 218587860,
    SC_ReplayEnd = 252142293,
    CS_QuickMatchClassType = 218587960,
    SC_QuickMatchClassType = 252142393,
    CS_TestProtocol = 218591560,
    SC_TestProtocol = 252145993,
    CS_Ping = 218591660,
    SC_Ping = 252146093
  };
};

extern const std::map<int, const char*> _MessageId_VALUES_TO_NAMES;

class CSLogin;

class SCLogin;

class CSRegister;

class SCRegister;

class CSTouristLogin;

class SCTouristLogin;

class CSLogout;

class SCLogout;

class CLoginGame;

class SLoginGame;

class CSTouristLoginGame;

class SCTouristLoginGame;

class CSCreateInstance;

class SCCreateInstance;

class CSInstanceList;

class SCInstanceList;

class CSJoinInstance;

class SCJoinInstance;

class CSExitInstance;

class SCExitInstance;

class CSStartGame;

class SCStartGame;

class CSStartGameConfirm;

class SCStartGameConfirm;

class CSEndGame;

class SCEndGame;

class CSExitGame;

class SCExitGame;

class CSRetrieveCommand;

class SCRetrieveCommand;

class CSFrame;

class SCFrame;

class CSRandomNickname;

class SCRandomNickname;

class CSSetNickname;

class SCSetNickname;

class CSSetClassType;

class SCSetClassType;

class CSRefreshFriendList;

class SCRefreshFriendList;

class CSInvitation;

class SCInvitation;

class SCNoticeInvitation;

class CSConfirmInvitation;

class SCConfirmInvitation;

class SCNoticeConfirmInvitation;

class CSCancelInvitation;

class SCCancelInvitation;

class SCNoticeCancelInvitation;

class CSExitInvitation;

class SCExitInvitation;

class CSChooseLevel;

class SCChooseLevel;

class CSFindUser;

class SCFindUser;

class CSSaveDungeonProgress;

class SCSaveDungeonProgress;

class CSPause;

class SCPause;

class CSContinue;

class SCContinue;

class CSRestartGame;

class SCRestartGame;

class CSQuickMatch;

class SCQuickMatch;

class CSQuickMatchLan;

class SCQuickMatchLan;

class CSQuickMatchCancel;

class SCQuickMatchCancel;

class CSReplayList;

class SCReplayList;

class CSReplayChoose;

class SCReplayChoose;

class CSReplayStart;

class SCReplayStart;

class CSReplayEnd;

class SCReplayEnd;

class CSQuickMatchClassType;

class SCQuickMatchClassType;

class CSTestProtocol;

class SCTestProtocol;

class CSPing;

class SCPing;

typedef struct _CSLogin__isset {
  _CSLogin__isset() : userName(false), password(false) {}
  bool userName :1;
  bool password :1;
} _CSLogin__isset;

class CSLogin : public virtual ::apache::thrift::TBase {
 public:

  CSLogin(const CSLogin&);
  CSLogin& operator=(const CSLogin&);
  CSLogin() : userName(), password() {
  }

  virtual ~CSLogin() throw();
  std::string userName;
  std::string password;

  _CSLogin__isset __isset;

  void __set_userName(const std::string& val);

  void __set_password(const std::string& val);

  bool operator == (const CSLogin & rhs) const
  {
    if (!(userName == rhs.userName))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const CSLogin &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSLogin & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSLogin &a, CSLogin &b);

inline std::ostream& operator<<(std::ostream& out, const CSLogin& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCLogin__isset {
  _SCLogin__isset() : result(false), userData(false) {}
  bool result :1;
  bool userData :1;
} _SCLogin__isset;

class SCLogin : public virtual ::apache::thrift::TBase {
 public:

  SCLogin(const SCLogin&);
  SCLogin& operator=(const SCLogin&);
  SCLogin() : result(0) {
  }

  virtual ~SCLogin() throw();
  int32_t result;
   ::CytxGame::UserData userData;

  _SCLogin__isset __isset;

  void __set_result(const int32_t val);

  void __set_userData(const  ::CytxGame::UserData& val);

  bool operator == (const SCLogin & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(userData == rhs.userData))
      return false;
    return true;
  }
  bool operator != (const SCLogin &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCLogin & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCLogin &a, SCLogin &b);

inline std::ostream& operator<<(std::ostream& out, const SCLogin& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSRegister__isset {
  _CSRegister__isset() : userName(false), password(false) {}
  bool userName :1;
  bool password :1;
} _CSRegister__isset;

class CSRegister : public virtual ::apache::thrift::TBase {
 public:

  CSRegister(const CSRegister&);
  CSRegister& operator=(const CSRegister&);
  CSRegister() : userName(), password() {
  }

  virtual ~CSRegister() throw();
  std::string userName;
  std::string password;

  _CSRegister__isset __isset;

  void __set_userName(const std::string& val);

  void __set_password(const std::string& val);

  bool operator == (const CSRegister & rhs) const
  {
    if (!(userName == rhs.userName))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const CSRegister &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSRegister & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSRegister &a, CSRegister &b);

inline std::ostream& operator<<(std::ostream& out, const CSRegister& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCRegister__isset {
  _SCRegister__isset() : result(false), userData(false) {}
  bool result :1;
  bool userData :1;
} _SCRegister__isset;

class SCRegister : public virtual ::apache::thrift::TBase {
 public:

  SCRegister(const SCRegister&);
  SCRegister& operator=(const SCRegister&);
  SCRegister() : result(0) {
  }

  virtual ~SCRegister() throw();
  int32_t result;
   ::CytxGame::UserData userData;

  _SCRegister__isset __isset;

  void __set_result(const int32_t val);

  void __set_userData(const  ::CytxGame::UserData& val);

  bool operator == (const SCRegister & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(userData == rhs.userData))
      return false;
    return true;
  }
  bool operator != (const SCRegister &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCRegister & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCRegister &a, SCRegister &b);

inline std::ostream& operator<<(std::ostream& out, const SCRegister& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSTouristLogin__isset {
  _CSTouristLogin__isset() : deviceId(false) {}
  bool deviceId :1;
} _CSTouristLogin__isset;

class CSTouristLogin : public virtual ::apache::thrift::TBase {
 public:

  CSTouristLogin(const CSTouristLogin&);
  CSTouristLogin& operator=(const CSTouristLogin&);
  CSTouristLogin() : deviceId() {
  }

  virtual ~CSTouristLogin() throw();
  std::string deviceId;

  _CSTouristLogin__isset __isset;

  void __set_deviceId(const std::string& val);

  bool operator == (const CSTouristLogin & rhs) const
  {
    if (!(deviceId == rhs.deviceId))
      return false;
    return true;
  }
  bool operator != (const CSTouristLogin &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSTouristLogin & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSTouristLogin &a, CSTouristLogin &b);

inline std::ostream& operator<<(std::ostream& out, const CSTouristLogin& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCTouristLogin__isset {
  _SCTouristLogin__isset() : result(false), userData(false) {}
  bool result :1;
  bool userData :1;
} _SCTouristLogin__isset;

class SCTouristLogin : public virtual ::apache::thrift::TBase {
 public:

  SCTouristLogin(const SCTouristLogin&);
  SCTouristLogin& operator=(const SCTouristLogin&);
  SCTouristLogin() : result(0) {
  }

  virtual ~SCTouristLogin() throw();
  int32_t result;
   ::CytxGame::UserData userData;

  _SCTouristLogin__isset __isset;

  void __set_result(const int32_t val);

  void __set_userData(const  ::CytxGame::UserData& val);

  bool operator == (const SCTouristLogin & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(userData == rhs.userData))
      return false;
    return true;
  }
  bool operator != (const SCTouristLogin &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCTouristLogin & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCTouristLogin &a, SCTouristLogin &b);

inline std::ostream& operator<<(std::ostream& out, const SCTouristLogin& obj)
{
  obj.printTo(out);
  return out;
}


class CSLogout : public virtual ::apache::thrift::TBase {
 public:

  CSLogout(const CSLogout&);
  CSLogout& operator=(const CSLogout&);
  CSLogout() {
  }

  virtual ~CSLogout() throw();

  bool operator == (const CSLogout & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CSLogout &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSLogout & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSLogout &a, CSLogout &b);

inline std::ostream& operator<<(std::ostream& out, const CSLogout& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCLogout__isset {
  _SCLogout__isset() : result(false) {}
  bool result :1;
} _SCLogout__isset;

class SCLogout : public virtual ::apache::thrift::TBase {
 public:

  SCLogout(const SCLogout&);
  SCLogout& operator=(const SCLogout&);
  SCLogout() : result(0) {
  }

  virtual ~SCLogout() throw();
  int32_t result;

  _SCLogout__isset __isset;

  void __set_result(const int32_t val);

  bool operator == (const SCLogout & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const SCLogout &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCLogout & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCLogout &a, SCLogout &b);

inline std::ostream& operator<<(std::ostream& out, const SCLogout& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CLoginGame__isset {
  _CLoginGame__isset() : accountId(false), sessionKey(false) {}
  bool accountId :1;
  bool sessionKey :1;
} _CLoginGame__isset;

class CLoginGame : public virtual ::apache::thrift::TBase {
 public:

  CLoginGame(const CLoginGame&);
  CLoginGame& operator=(const CLoginGame&);
  CLoginGame() : accountId(0), sessionKey() {
  }

  virtual ~CLoginGame() throw();
  int32_t accountId;
  std::string sessionKey;

  _CLoginGame__isset __isset;

  void __set_accountId(const int32_t val);

  void __set_sessionKey(const std::string& val);

  bool operator == (const CLoginGame & rhs) const
  {
    if (!(accountId == rhs.accountId))
      return false;
    if (!(sessionKey == rhs.sessionKey))
      return false;
    return true;
  }
  bool operator != (const CLoginGame &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CLoginGame & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CLoginGame &a, CLoginGame &b);

inline std::ostream& operator<<(std::ostream& out, const CLoginGame& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SLoginGame__isset {
  _SLoginGame__isset() : state(false), error(false), account(false) {}
  bool state :1;
  bool error :1;
  bool account :1;
} _SLoginGame__isset;

class SLoginGame : public virtual ::apache::thrift::TBase {
 public:

  SLoginGame(const SLoginGame&);
  SLoginGame& operator=(const SLoginGame&);
  SLoginGame() : state(0), error() {
  }

  virtual ~SLoginGame() throw();
  bool state;
  std::string error;
   ::CytxGame::AccountData account;

  _SLoginGame__isset __isset;

  void __set_state(const bool val);

  void __set_error(const std::string& val);

  void __set_account(const  ::CytxGame::AccountData& val);

  bool operator == (const SLoginGame & rhs) const
  {
    if (!(state == rhs.state))
      return false;
    if (__isset.error != rhs.__isset.error)
      return false;
    else if (__isset.error && !(error == rhs.error))
      return false;
    if (__isset.account != rhs.__isset.account)
      return false;
    else if (__isset.account && !(account == rhs.account))
      return false;
    return true;
  }
  bool operator != (const SLoginGame &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SLoginGame & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SLoginGame &a, SLoginGame &b);

inline std::ostream& operator<<(std::ostream& out, const SLoginGame& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSTouristLoginGame__isset {
  _CSTouristLoginGame__isset() : deviceId(false) {}
  bool deviceId :1;
} _CSTouristLoginGame__isset;

class CSTouristLoginGame : public virtual ::apache::thrift::TBase {
 public:

  CSTouristLoginGame(const CSTouristLoginGame&);
  CSTouristLoginGame& operator=(const CSTouristLoginGame&);
  CSTouristLoginGame() : deviceId() {
  }

  virtual ~CSTouristLoginGame() throw();
  std::string deviceId;

  _CSTouristLoginGame__isset __isset;

  void __set_deviceId(const std::string& val);

  bool operator == (const CSTouristLoginGame & rhs) const
  {
    if (!(deviceId == rhs.deviceId))
      return false;
    return true;
  }
  bool operator != (const CSTouristLoginGame &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSTouristLoginGame & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSTouristLoginGame &a, CSTouristLoginGame &b);

inline std::ostream& operator<<(std::ostream& out, const CSTouristLoginGame& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCTouristLoginGame__isset {
  _SCTouristLoginGame__isset() : result(false), userData(false) {}
  bool result :1;
  bool userData :1;
} _SCTouristLoginGame__isset;

class SCTouristLoginGame : public virtual ::apache::thrift::TBase {
 public:

  SCTouristLoginGame(const SCTouristLoginGame&);
  SCTouristLoginGame& operator=(const SCTouristLoginGame&);
  SCTouristLoginGame() : result(0) {
  }

  virtual ~SCTouristLoginGame() throw();
  int32_t result;
   ::CytxGame::UserData userData;

  _SCTouristLoginGame__isset __isset;

  void __set_result(const int32_t val);

  void __set_userData(const  ::CytxGame::UserData& val);

  bool operator == (const SCTouristLoginGame & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(userData == rhs.userData))
      return false;
    return true;
  }
  bool operator != (const SCTouristLoginGame &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCTouristLoginGame & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCTouristLoginGame &a, SCTouristLoginGame &b);

inline std::ostream& operator<<(std::ostream& out, const SCTouristLoginGame& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSCreateInstance__isset {
  _CSCreateInstance__isset() : instanceName(false) {}
  bool instanceName :1;
} _CSCreateInstance__isset;

class CSCreateInstance : public virtual ::apache::thrift::TBase {
 public:

  CSCreateInstance(const CSCreateInstance&);
  CSCreateInstance& operator=(const CSCreateInstance&);
  CSCreateInstance() : instanceName() {
  }

  virtual ~CSCreateInstance() throw();
  std::string instanceName;

  _CSCreateInstance__isset __isset;

  void __set_instanceName(const std::string& val);

  bool operator == (const CSCreateInstance & rhs) const
  {
    if (!(instanceName == rhs.instanceName))
      return false;
    return true;
  }
  bool operator != (const CSCreateInstance &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSCreateInstance & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSCreateInstance &a, CSCreateInstance &b);

inline std::ostream& operator<<(std::ostream& out, const CSCreateInstance& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCCreateInstance__isset {
  _SCCreateInstance__isset() : result(false), instanceData(false) {}
  bool result :1;
  bool instanceData :1;
} _SCCreateInstance__isset;

class SCCreateInstance : public virtual ::apache::thrift::TBase {
 public:

  SCCreateInstance(const SCCreateInstance&);
  SCCreateInstance& operator=(const SCCreateInstance&);
  SCCreateInstance() : result(0) {
  }

  virtual ~SCCreateInstance() throw();
  int32_t result;
   ::CytxGame::InstanceData instanceData;

  _SCCreateInstance__isset __isset;

  void __set_result(const int32_t val);

  void __set_instanceData(const  ::CytxGame::InstanceData& val);

  bool operator == (const SCCreateInstance & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(instanceData == rhs.instanceData))
      return false;
    return true;
  }
  bool operator != (const SCCreateInstance &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCCreateInstance & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCCreateInstance &a, SCCreateInstance &b);

inline std::ostream& operator<<(std::ostream& out, const SCCreateInstance& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSInstanceList__isset {
  _CSInstanceList__isset() : startIndex(false), count(false) {}
  bool startIndex :1;
  bool count :1;
} _CSInstanceList__isset;

class CSInstanceList : public virtual ::apache::thrift::TBase {
 public:

  CSInstanceList(const CSInstanceList&);
  CSInstanceList& operator=(const CSInstanceList&);
  CSInstanceList() : startIndex(0), count(0) {
  }

  virtual ~CSInstanceList() throw();
  int32_t startIndex;
  int32_t count;

  _CSInstanceList__isset __isset;

  void __set_startIndex(const int32_t val);

  void __set_count(const int32_t val);

  bool operator == (const CSInstanceList & rhs) const
  {
    if (!(startIndex == rhs.startIndex))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const CSInstanceList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSInstanceList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSInstanceList &a, CSInstanceList &b);

inline std::ostream& operator<<(std::ostream& out, const CSInstanceList& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCInstanceList__isset {
  _SCInstanceList__isset() : result(false), instanceList(false) {}
  bool result :1;
  bool instanceList :1;
} _SCInstanceList__isset;

class SCInstanceList : public virtual ::apache::thrift::TBase {
 public:

  SCInstanceList(const SCInstanceList&);
  SCInstanceList& operator=(const SCInstanceList&);
  SCInstanceList() : result(0) {
  }

  virtual ~SCInstanceList() throw();
  int32_t result;
  std::vector< ::CytxGame::InstanceData>  instanceList;

  _SCInstanceList__isset __isset;

  void __set_result(const int32_t val);

  void __set_instanceList(const std::vector< ::CytxGame::InstanceData> & val);

  bool operator == (const SCInstanceList & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(instanceList == rhs.instanceList))
      return false;
    return true;
  }
  bool operator != (const SCInstanceList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCInstanceList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCInstanceList &a, SCInstanceList &b);

inline std::ostream& operator<<(std::ostream& out, const SCInstanceList& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSJoinInstance__isset {
  _CSJoinInstance__isset() : instanceId(false), instanceName(false) {}
  bool instanceId :1;
  bool instanceName :1;
} _CSJoinInstance__isset;

class CSJoinInstance : public virtual ::apache::thrift::TBase {
 public:

  CSJoinInstance(const CSJoinInstance&);
  CSJoinInstance& operator=(const CSJoinInstance&);
  CSJoinInstance() : instanceId(0), instanceName() {
  }

  virtual ~CSJoinInstance() throw();
  int32_t instanceId;
  std::string instanceName;

  _CSJoinInstance__isset __isset;

  void __set_instanceId(const int32_t val);

  void __set_instanceName(const std::string& val);

  bool operator == (const CSJoinInstance & rhs) const
  {
    if (!(instanceId == rhs.instanceId))
      return false;
    if (!(instanceName == rhs.instanceName))
      return false;
    return true;
  }
  bool operator != (const CSJoinInstance &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSJoinInstance & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSJoinInstance &a, CSJoinInstance &b);

inline std::ostream& operator<<(std::ostream& out, const CSJoinInstance& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCJoinInstance__isset {
  _SCJoinInstance__isset() : result(false), instanceData(false) {}
  bool result :1;
  bool instanceData :1;
} _SCJoinInstance__isset;

class SCJoinInstance : public virtual ::apache::thrift::TBase {
 public:

  SCJoinInstance(const SCJoinInstance&);
  SCJoinInstance& operator=(const SCJoinInstance&);
  SCJoinInstance() : result(0) {
  }

  virtual ~SCJoinInstance() throw();
  int32_t result;
   ::CytxGame::InstanceData instanceData;

  _SCJoinInstance__isset __isset;

  void __set_result(const int32_t val);

  void __set_instanceData(const  ::CytxGame::InstanceData& val);

  bool operator == (const SCJoinInstance & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(instanceData == rhs.instanceData))
      return false;
    return true;
  }
  bool operator != (const SCJoinInstance &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCJoinInstance & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCJoinInstance &a, SCJoinInstance &b);

inline std::ostream& operator<<(std::ostream& out, const SCJoinInstance& obj)
{
  obj.printTo(out);
  return out;
}


class CSExitInstance : public virtual ::apache::thrift::TBase {
 public:

  CSExitInstance(const CSExitInstance&);
  CSExitInstance& operator=(const CSExitInstance&);
  CSExitInstance() {
  }

  virtual ~CSExitInstance() throw();

  bool operator == (const CSExitInstance & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CSExitInstance &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSExitInstance & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSExitInstance &a, CSExitInstance &b);

inline std::ostream& operator<<(std::ostream& out, const CSExitInstance& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCExitInstance__isset {
  _SCExitInstance__isset() : result(false), player(false) {}
  bool result :1;
  bool player :1;
} _SCExitInstance__isset;

class SCExitInstance : public virtual ::apache::thrift::TBase {
 public:

  SCExitInstance(const SCExitInstance&);
  SCExitInstance& operator=(const SCExitInstance&);
  SCExitInstance() : result(0) {
  }

  virtual ~SCExitInstance() throw();
  int32_t result;
   ::CytxGame::PlayerData player;

  _SCExitInstance__isset __isset;

  void __set_result(const int32_t val);

  void __set_player(const  ::CytxGame::PlayerData& val);

  bool operator == (const SCExitInstance & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(player == rhs.player))
      return false;
    return true;
  }
  bool operator != (const SCExitInstance &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCExitInstance & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCExitInstance &a, SCExitInstance &b);

inline std::ostream& operator<<(std::ostream& out, const SCExitInstance& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSStartGame__isset {
  _CSStartGame__isset() : levelId(false), isContinue(false) {}
  bool levelId :1;
  bool isContinue :1;
} _CSStartGame__isset;

class CSStartGame : public virtual ::apache::thrift::TBase {
 public:

  CSStartGame(const CSStartGame&);
  CSStartGame& operator=(const CSStartGame&);
  CSStartGame() : levelId(0), isContinue(0) {
  }

  virtual ~CSStartGame() throw();
  int32_t levelId;
  bool isContinue;

  _CSStartGame__isset __isset;

  void __set_levelId(const int32_t val);

  void __set_isContinue(const bool val);

  bool operator == (const CSStartGame & rhs) const
  {
    if (!(levelId == rhs.levelId))
      return false;
    if (!(isContinue == rhs.isContinue))
      return false;
    return true;
  }
  bool operator != (const CSStartGame &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSStartGame & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSStartGame &a, CSStartGame &b);

inline std::ostream& operator<<(std::ostream& out, const CSStartGame& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCStartGame__isset {
  _SCStartGame__isset() : result(false), levelId(false), isContinue(false), levelData(false) {}
  bool result :1;
  bool levelId :1;
  bool isContinue :1;
  bool levelData :1;
} _SCStartGame__isset;

class SCStartGame : public virtual ::apache::thrift::TBase {
 public:

  SCStartGame(const SCStartGame&);
  SCStartGame& operator=(const SCStartGame&);
  SCStartGame() : result(0), levelId(0), isContinue(0) {
  }

  virtual ~SCStartGame() throw();
  int32_t result;
  int32_t levelId;
  bool isContinue;
   ::CytxGame::LevelData levelData;

  _SCStartGame__isset __isset;

  void __set_result(const int32_t val);

  void __set_levelId(const int32_t val);

  void __set_isContinue(const bool val);

  void __set_levelData(const  ::CytxGame::LevelData& val);

  bool operator == (const SCStartGame & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(levelId == rhs.levelId))
      return false;
    if (!(isContinue == rhs.isContinue))
      return false;
    if (!(levelData == rhs.levelData))
      return false;
    return true;
  }
  bool operator != (const SCStartGame &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCStartGame & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCStartGame &a, SCStartGame &b);

inline std::ostream& operator<<(std::ostream& out, const SCStartGame& obj)
{
  obj.printTo(out);
  return out;
}


class CSStartGameConfirm : public virtual ::apache::thrift::TBase {
 public:

  CSStartGameConfirm(const CSStartGameConfirm&);
  CSStartGameConfirm& operator=(const CSStartGameConfirm&);
  CSStartGameConfirm() {
  }

  virtual ~CSStartGameConfirm() throw();

  bool operator == (const CSStartGameConfirm & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CSStartGameConfirm &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSStartGameConfirm & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSStartGameConfirm &a, CSStartGameConfirm &b);

inline std::ostream& operator<<(std::ostream& out, const CSStartGameConfirm& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCStartGameConfirm__isset {
  _SCStartGameConfirm__isset() : result(false) {}
  bool result :1;
} _SCStartGameConfirm__isset;

class SCStartGameConfirm : public virtual ::apache::thrift::TBase {
 public:

  SCStartGameConfirm(const SCStartGameConfirm&);
  SCStartGameConfirm& operator=(const SCStartGameConfirm&);
  SCStartGameConfirm() : result(0) {
  }

  virtual ~SCStartGameConfirm() throw();
  int32_t result;

  _SCStartGameConfirm__isset __isset;

  void __set_result(const int32_t val);

  bool operator == (const SCStartGameConfirm & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const SCStartGameConfirm &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCStartGameConfirm & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCStartGameConfirm &a, SCStartGameConfirm &b);

inline std::ostream& operator<<(std::ostream& out, const SCStartGameConfirm& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSEndGame__isset {
  _CSEndGame__isset() : levelId(false), levelData(false), isWin(false) {}
  bool levelId :1;
  bool levelData :1;
  bool isWin :1;
} _CSEndGame__isset;

class CSEndGame : public virtual ::apache::thrift::TBase {
 public:

  CSEndGame(const CSEndGame&);
  CSEndGame& operator=(const CSEndGame&);
  CSEndGame() : levelId(0), isWin(0) {
  }

  virtual ~CSEndGame() throw();
  int32_t levelId;
   ::CytxGame::LevelData levelData;
  bool isWin;

  _CSEndGame__isset __isset;

  void __set_levelId(const int32_t val);

  void __set_levelData(const  ::CytxGame::LevelData& val);

  void __set_isWin(const bool val);

  bool operator == (const CSEndGame & rhs) const
  {
    if (!(levelId == rhs.levelId))
      return false;
    if (!(levelData == rhs.levelData))
      return false;
    if (!(isWin == rhs.isWin))
      return false;
    return true;
  }
  bool operator != (const CSEndGame &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSEndGame & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSEndGame &a, CSEndGame &b);

inline std::ostream& operator<<(std::ostream& out, const CSEndGame& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCEndGame__isset {
  _SCEndGame__isset() : result(false), endUserId(false), isWin(false), levelId(false), levelData(false) {}
  bool result :1;
  bool endUserId :1;
  bool isWin :1;
  bool levelId :1;
  bool levelData :1;
} _SCEndGame__isset;

class SCEndGame : public virtual ::apache::thrift::TBase {
 public:

  SCEndGame(const SCEndGame&);
  SCEndGame& operator=(const SCEndGame&);
  SCEndGame() : result(0), endUserId(0), isWin(0), levelId(0) {
  }

  virtual ~SCEndGame() throw();
  int32_t result;
  int32_t endUserId;
  bool isWin;
  int32_t levelId;
   ::CytxGame::LevelData levelData;

  _SCEndGame__isset __isset;

  void __set_result(const int32_t val);

  void __set_endUserId(const int32_t val);

  void __set_isWin(const bool val);

  void __set_levelId(const int32_t val);

  void __set_levelData(const  ::CytxGame::LevelData& val);

  bool operator == (const SCEndGame & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(endUserId == rhs.endUserId))
      return false;
    if (!(isWin == rhs.isWin))
      return false;
    if (!(levelId == rhs.levelId))
      return false;
    if (!(levelData == rhs.levelData))
      return false;
    return true;
  }
  bool operator != (const SCEndGame &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCEndGame & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCEndGame &a, SCEndGame &b);

inline std::ostream& operator<<(std::ostream& out, const SCEndGame& obj)
{
  obj.printTo(out);
  return out;
}


class CSExitGame : public virtual ::apache::thrift::TBase {
 public:

  CSExitGame(const CSExitGame&);
  CSExitGame& operator=(const CSExitGame&);
  CSExitGame() {
  }

  virtual ~CSExitGame() throw();

  bool operator == (const CSExitGame & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CSExitGame &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSExitGame & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSExitGame &a, CSExitGame &b);

inline std::ostream& operator<<(std::ostream& out, const CSExitGame& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCExitGame__isset {
  _SCExitGame__isset() : result(false), isNormalEnd(false) {}
  bool result :1;
  bool isNormalEnd :1;
} _SCExitGame__isset;

class SCExitGame : public virtual ::apache::thrift::TBase {
 public:

  SCExitGame(const SCExitGame&);
  SCExitGame& operator=(const SCExitGame&);
  SCExitGame() : result(0), isNormalEnd(0) {
  }

  virtual ~SCExitGame() throw();
  int32_t result;
  bool isNormalEnd;

  _SCExitGame__isset __isset;

  void __set_result(const int32_t val);

  void __set_isNormalEnd(const bool val);

  bool operator == (const SCExitGame & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(isNormalEnd == rhs.isNormalEnd))
      return false;
    return true;
  }
  bool operator != (const SCExitGame &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCExitGame & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCExitGame &a, SCExitGame &b);

inline std::ostream& operator<<(std::ostream& out, const SCExitGame& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSRetrieveCommand__isset {
  _CSRetrieveCommand__isset() : playerId(false), dataList(false), timestamp(false) {}
  bool playerId :1;
  bool dataList :1;
  bool timestamp :1;
} _CSRetrieveCommand__isset;

class CSRetrieveCommand : public virtual ::apache::thrift::TBase {
 public:

  CSRetrieveCommand(const CSRetrieveCommand&);
  CSRetrieveCommand& operator=(const CSRetrieveCommand&);
  CSRetrieveCommand() : playerId(0), timestamp(0) {
  }

  virtual ~CSRetrieveCommand() throw();
  int32_t playerId;
  std::vector< ::CytxGame::CommandData>  dataList;
  double timestamp;

  _CSRetrieveCommand__isset __isset;

  void __set_playerId(const int32_t val);

  void __set_dataList(const std::vector< ::CytxGame::CommandData> & val);

  void __set_timestamp(const double val);

  bool operator == (const CSRetrieveCommand & rhs) const
  {
    if (!(playerId == rhs.playerId))
      return false;
    if (!(dataList == rhs.dataList))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const CSRetrieveCommand &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSRetrieveCommand & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSRetrieveCommand &a, CSRetrieveCommand &b);

inline std::ostream& operator<<(std::ostream& out, const CSRetrieveCommand& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCRetrieveCommand__isset {
  _SCRetrieveCommand__isset() : dataList(false) {}
  bool dataList :1;
} _SCRetrieveCommand__isset;

class SCRetrieveCommand : public virtual ::apache::thrift::TBase {
 public:

  SCRetrieveCommand(const SCRetrieveCommand&);
  SCRetrieveCommand& operator=(const SCRetrieveCommand&);
  SCRetrieveCommand() {
  }

  virtual ~SCRetrieveCommand() throw();
  std::vector< ::CytxGame::CommandData>  dataList;

  _SCRetrieveCommand__isset __isset;

  void __set_dataList(const std::vector< ::CytxGame::CommandData> & val);

  bool operator == (const SCRetrieveCommand & rhs) const
  {
    if (!(dataList == rhs.dataList))
      return false;
    return true;
  }
  bool operator != (const SCRetrieveCommand &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCRetrieveCommand & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCRetrieveCommand &a, SCRetrieveCommand &b);

inline std::ostream& operator<<(std::ostream& out, const SCRetrieveCommand& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSFrame__isset {
  _CSFrame__isset() : frameData(false) {}
  bool frameData :1;
} _CSFrame__isset;

class CSFrame : public virtual ::apache::thrift::TBase {
 public:

  CSFrame(const CSFrame&);
  CSFrame& operator=(const CSFrame&);
  CSFrame() {
  }

  virtual ~CSFrame() throw();
   ::CytxGame::FrameData frameData;

  _CSFrame__isset __isset;

  void __set_frameData(const  ::CytxGame::FrameData& val);

  bool operator == (const CSFrame & rhs) const
  {
    if (!(frameData == rhs.frameData))
      return false;
    return true;
  }
  bool operator != (const CSFrame &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSFrame & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSFrame &a, CSFrame &b);

inline std::ostream& operator<<(std::ostream& out, const CSFrame& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCFrame__isset {
  _SCFrame__isset() : frameData(false) {}
  bool frameData :1;
} _SCFrame__isset;

class SCFrame : public virtual ::apache::thrift::TBase {
 public:

  SCFrame(const SCFrame&);
  SCFrame& operator=(const SCFrame&);
  SCFrame() {
  }

  virtual ~SCFrame() throw();
   ::CytxGame::FrameData frameData;

  _SCFrame__isset __isset;

  void __set_frameData(const  ::CytxGame::FrameData& val);

  bool operator == (const SCFrame & rhs) const
  {
    if (!(frameData == rhs.frameData))
      return false;
    return true;
  }
  bool operator != (const SCFrame &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCFrame & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCFrame &a, SCFrame &b);

inline std::ostream& operator<<(std::ostream& out, const SCFrame& obj)
{
  obj.printTo(out);
  return out;
}


class CSRandomNickname : public virtual ::apache::thrift::TBase {
 public:

  CSRandomNickname(const CSRandomNickname&);
  CSRandomNickname& operator=(const CSRandomNickname&);
  CSRandomNickname() {
  }

  virtual ~CSRandomNickname() throw();

  bool operator == (const CSRandomNickname & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CSRandomNickname &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSRandomNickname & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSRandomNickname &a, CSRandomNickname &b);

inline std::ostream& operator<<(std::ostream& out, const CSRandomNickname& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCRandomNickname__isset {
  _SCRandomNickname__isset() : result(false), nickname(false) {}
  bool result :1;
  bool nickname :1;
} _SCRandomNickname__isset;

class SCRandomNickname : public virtual ::apache::thrift::TBase {
 public:

  SCRandomNickname(const SCRandomNickname&);
  SCRandomNickname& operator=(const SCRandomNickname&);
  SCRandomNickname() : result(0), nickname() {
  }

  virtual ~SCRandomNickname() throw();
  int32_t result;
  std::string nickname;

  _SCRandomNickname__isset __isset;

  void __set_result(const int32_t val);

  void __set_nickname(const std::string& val);

  bool operator == (const SCRandomNickname & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(nickname == rhs.nickname))
      return false;
    return true;
  }
  bool operator != (const SCRandomNickname &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCRandomNickname & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCRandomNickname &a, SCRandomNickname &b);

inline std::ostream& operator<<(std::ostream& out, const SCRandomNickname& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSSetNickname__isset {
  _CSSetNickname__isset() : nickname(false) {}
  bool nickname :1;
} _CSSetNickname__isset;

class CSSetNickname : public virtual ::apache::thrift::TBase {
 public:

  CSSetNickname(const CSSetNickname&);
  CSSetNickname& operator=(const CSSetNickname&);
  CSSetNickname() : nickname() {
  }

  virtual ~CSSetNickname() throw();
  std::string nickname;

  _CSSetNickname__isset __isset;

  void __set_nickname(const std::string& val);

  bool operator == (const CSSetNickname & rhs) const
  {
    if (!(nickname == rhs.nickname))
      return false;
    return true;
  }
  bool operator != (const CSSetNickname &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSSetNickname & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSSetNickname &a, CSSetNickname &b);

inline std::ostream& operator<<(std::ostream& out, const CSSetNickname& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCSetNickname__isset {
  _SCSetNickname__isset() : result(false), nickname(false) {}
  bool result :1;
  bool nickname :1;
} _SCSetNickname__isset;

class SCSetNickname : public virtual ::apache::thrift::TBase {
 public:

  SCSetNickname(const SCSetNickname&);
  SCSetNickname& operator=(const SCSetNickname&);
  SCSetNickname() : result(0), nickname() {
  }

  virtual ~SCSetNickname() throw();
  int32_t result;
  std::string nickname;

  _SCSetNickname__isset __isset;

  void __set_result(const int32_t val);

  void __set_nickname(const std::string& val);

  bool operator == (const SCSetNickname & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(nickname == rhs.nickname))
      return false;
    return true;
  }
  bool operator != (const SCSetNickname &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCSetNickname & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCSetNickname &a, SCSetNickname &b);

inline std::ostream& operator<<(std::ostream& out, const SCSetNickname& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSSetClassType__isset {
  _CSSetClassType__isset() : classType(false) {}
  bool classType :1;
} _CSSetClassType__isset;

class CSSetClassType : public virtual ::apache::thrift::TBase {
 public:

  CSSetClassType(const CSSetClassType&);
  CSSetClassType& operator=(const CSSetClassType&);
  CSSetClassType() : classType(( ::CytxGame::ClassType::type)0) {
  }

  virtual ~CSSetClassType() throw();
   ::CytxGame::ClassType::type classType;

  _CSSetClassType__isset __isset;

  void __set_classType(const  ::CytxGame::ClassType::type val);

  bool operator == (const CSSetClassType & rhs) const
  {
    if (!(classType == rhs.classType))
      return false;
    return true;
  }
  bool operator != (const CSSetClassType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSSetClassType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSSetClassType &a, CSSetClassType &b);

inline std::ostream& operator<<(std::ostream& out, const CSSetClassType& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCSetClassType__isset {
  _SCSetClassType__isset() : result(false), classType(false) {}
  bool result :1;
  bool classType :1;
} _SCSetClassType__isset;

class SCSetClassType : public virtual ::apache::thrift::TBase {
 public:

  SCSetClassType(const SCSetClassType&);
  SCSetClassType& operator=(const SCSetClassType&);
  SCSetClassType() : result(0), classType(( ::CytxGame::ClassType::type)0) {
  }

  virtual ~SCSetClassType() throw();
  int32_t result;
   ::CytxGame::ClassType::type classType;

  _SCSetClassType__isset __isset;

  void __set_result(const int32_t val);

  void __set_classType(const  ::CytxGame::ClassType::type val);

  bool operator == (const SCSetClassType & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(classType == rhs.classType))
      return false;
    return true;
  }
  bool operator != (const SCSetClassType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCSetClassType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCSetClassType &a, SCSetClassType &b);

inline std::ostream& operator<<(std::ostream& out, const SCSetClassType& obj)
{
  obj.printTo(out);
  return out;
}


class CSRefreshFriendList : public virtual ::apache::thrift::TBase {
 public:

  CSRefreshFriendList(const CSRefreshFriendList&);
  CSRefreshFriendList& operator=(const CSRefreshFriendList&);
  CSRefreshFriendList() {
  }

  virtual ~CSRefreshFriendList() throw();

  bool operator == (const CSRefreshFriendList & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CSRefreshFriendList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSRefreshFriendList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSRefreshFriendList &a, CSRefreshFriendList &b);

inline std::ostream& operator<<(std::ostream& out, const CSRefreshFriendList& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCRefreshFriendList__isset {
  _SCRefreshFriendList__isset() : result(false), playerMap(false) {}
  bool result :1;
  bool playerMap :1;
} _SCRefreshFriendList__isset;

class SCRefreshFriendList : public virtual ::apache::thrift::TBase {
 public:

  SCRefreshFriendList(const SCRefreshFriendList&);
  SCRefreshFriendList& operator=(const SCRefreshFriendList&);
  SCRefreshFriendList() : result(0) {
  }

  virtual ~SCRefreshFriendList() throw();
  int32_t result;
  std::map<int32_t,  ::CytxGame::PlayerData>  playerMap;

  _SCRefreshFriendList__isset __isset;

  void __set_result(const int32_t val);

  void __set_playerMap(const std::map<int32_t,  ::CytxGame::PlayerData> & val);

  bool operator == (const SCRefreshFriendList & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(playerMap == rhs.playerMap))
      return false;
    return true;
  }
  bool operator != (const SCRefreshFriendList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCRefreshFriendList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCRefreshFriendList &a, SCRefreshFriendList &b);

inline std::ostream& operator<<(std::ostream& out, const SCRefreshFriendList& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSInvitation__isset {
  _CSInvitation__isset() : nickname(false) {}
  bool nickname :1;
} _CSInvitation__isset;

class CSInvitation : public virtual ::apache::thrift::TBase {
 public:

  CSInvitation(const CSInvitation&);
  CSInvitation& operator=(const CSInvitation&);
  CSInvitation() : nickname() {
  }

  virtual ~CSInvitation() throw();
  std::string nickname;

  _CSInvitation__isset __isset;

  void __set_nickname(const std::string& val);

  bool operator == (const CSInvitation & rhs) const
  {
    if (!(nickname == rhs.nickname))
      return false;
    return true;
  }
  bool operator != (const CSInvitation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSInvitation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSInvitation &a, CSInvitation &b);

inline std::ostream& operator<<(std::ostream& out, const CSInvitation& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCInvitation__isset {
  _SCInvitation__isset() : result(false) {}
  bool result :1;
} _SCInvitation__isset;

class SCInvitation : public virtual ::apache::thrift::TBase {
 public:

  SCInvitation(const SCInvitation&);
  SCInvitation& operator=(const SCInvitation&);
  SCInvitation() : result(0) {
  }

  virtual ~SCInvitation() throw();
  int32_t result;

  _SCInvitation__isset __isset;

  void __set_result(const int32_t val);

  bool operator == (const SCInvitation & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const SCInvitation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCInvitation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCInvitation &a, SCInvitation &b);

inline std::ostream& operator<<(std::ostream& out, const SCInvitation& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCNoticeInvitation__isset {
  _SCNoticeInvitation__isset() : roleData(false) {}
  bool roleData :1;
} _SCNoticeInvitation__isset;

class SCNoticeInvitation : public virtual ::apache::thrift::TBase {
 public:

  SCNoticeInvitation(const SCNoticeInvitation&);
  SCNoticeInvitation& operator=(const SCNoticeInvitation&);
  SCNoticeInvitation() {
  }

  virtual ~SCNoticeInvitation() throw();
   ::CytxGame::RoleData roleData;

  _SCNoticeInvitation__isset __isset;

  void __set_roleData(const  ::CytxGame::RoleData& val);

  bool operator == (const SCNoticeInvitation & rhs) const
  {
    if (!(roleData == rhs.roleData))
      return false;
    return true;
  }
  bool operator != (const SCNoticeInvitation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCNoticeInvitation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCNoticeInvitation &a, SCNoticeInvitation &b);

inline std::ostream& operator<<(std::ostream& out, const SCNoticeInvitation& obj)
{
  obj.printTo(out);
  return out;
}


class CSConfirmInvitation : public virtual ::apache::thrift::TBase {
 public:

  CSConfirmInvitation(const CSConfirmInvitation&);
  CSConfirmInvitation& operator=(const CSConfirmInvitation&);
  CSConfirmInvitation() {
  }

  virtual ~CSConfirmInvitation() throw();

  bool operator == (const CSConfirmInvitation & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CSConfirmInvitation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSConfirmInvitation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSConfirmInvitation &a, CSConfirmInvitation &b);

inline std::ostream& operator<<(std::ostream& out, const CSConfirmInvitation& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCConfirmInvitation__isset {
  _SCConfirmInvitation__isset() : result(false) {}
  bool result :1;
} _SCConfirmInvitation__isset;

class SCConfirmInvitation : public virtual ::apache::thrift::TBase {
 public:

  SCConfirmInvitation(const SCConfirmInvitation&);
  SCConfirmInvitation& operator=(const SCConfirmInvitation&);
  SCConfirmInvitation() : result(0) {
  }

  virtual ~SCConfirmInvitation() throw();
  int32_t result;

  _SCConfirmInvitation__isset __isset;

  void __set_result(const int32_t val);

  bool operator == (const SCConfirmInvitation & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const SCConfirmInvitation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCConfirmInvitation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCConfirmInvitation &a, SCConfirmInvitation &b);

inline std::ostream& operator<<(std::ostream& out, const SCConfirmInvitation& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCNoticeConfirmInvitation__isset {
  _SCNoticeConfirmInvitation__isset() : roleData(false) {}
  bool roleData :1;
} _SCNoticeConfirmInvitation__isset;

class SCNoticeConfirmInvitation : public virtual ::apache::thrift::TBase {
 public:

  SCNoticeConfirmInvitation(const SCNoticeConfirmInvitation&);
  SCNoticeConfirmInvitation& operator=(const SCNoticeConfirmInvitation&);
  SCNoticeConfirmInvitation() {
  }

  virtual ~SCNoticeConfirmInvitation() throw();
   ::CytxGame::RoleData roleData;

  _SCNoticeConfirmInvitation__isset __isset;

  void __set_roleData(const  ::CytxGame::RoleData& val);

  bool operator == (const SCNoticeConfirmInvitation & rhs) const
  {
    if (!(roleData == rhs.roleData))
      return false;
    return true;
  }
  bool operator != (const SCNoticeConfirmInvitation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCNoticeConfirmInvitation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCNoticeConfirmInvitation &a, SCNoticeConfirmInvitation &b);

inline std::ostream& operator<<(std::ostream& out, const SCNoticeConfirmInvitation& obj)
{
  obj.printTo(out);
  return out;
}


class CSCancelInvitation : public virtual ::apache::thrift::TBase {
 public:

  CSCancelInvitation(const CSCancelInvitation&);
  CSCancelInvitation& operator=(const CSCancelInvitation&);
  CSCancelInvitation() {
  }

  virtual ~CSCancelInvitation() throw();

  bool operator == (const CSCancelInvitation & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CSCancelInvitation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSCancelInvitation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSCancelInvitation &a, CSCancelInvitation &b);

inline std::ostream& operator<<(std::ostream& out, const CSCancelInvitation& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCCancelInvitation__isset {
  _SCCancelInvitation__isset() : result(false) {}
  bool result :1;
} _SCCancelInvitation__isset;

class SCCancelInvitation : public virtual ::apache::thrift::TBase {
 public:

  SCCancelInvitation(const SCCancelInvitation&);
  SCCancelInvitation& operator=(const SCCancelInvitation&);
  SCCancelInvitation() : result(0) {
  }

  virtual ~SCCancelInvitation() throw();
  int32_t result;

  _SCCancelInvitation__isset __isset;

  void __set_result(const int32_t val);

  bool operator == (const SCCancelInvitation & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const SCCancelInvitation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCCancelInvitation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCCancelInvitation &a, SCCancelInvitation &b);

inline std::ostream& operator<<(std::ostream& out, const SCCancelInvitation& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCNoticeCancelInvitation__isset {
  _SCNoticeCancelInvitation__isset() : roleData(false) {}
  bool roleData :1;
} _SCNoticeCancelInvitation__isset;

class SCNoticeCancelInvitation : public virtual ::apache::thrift::TBase {
 public:

  SCNoticeCancelInvitation(const SCNoticeCancelInvitation&);
  SCNoticeCancelInvitation& operator=(const SCNoticeCancelInvitation&);
  SCNoticeCancelInvitation() {
  }

  virtual ~SCNoticeCancelInvitation() throw();
   ::CytxGame::RoleData roleData;

  _SCNoticeCancelInvitation__isset __isset;

  void __set_roleData(const  ::CytxGame::RoleData& val);

  bool operator == (const SCNoticeCancelInvitation & rhs) const
  {
    if (!(roleData == rhs.roleData))
      return false;
    return true;
  }
  bool operator != (const SCNoticeCancelInvitation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCNoticeCancelInvitation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCNoticeCancelInvitation &a, SCNoticeCancelInvitation &b);

inline std::ostream& operator<<(std::ostream& out, const SCNoticeCancelInvitation& obj)
{
  obj.printTo(out);
  return out;
}


class CSExitInvitation : public virtual ::apache::thrift::TBase {
 public:

  CSExitInvitation(const CSExitInvitation&);
  CSExitInvitation& operator=(const CSExitInvitation&);
  CSExitInvitation() {
  }

  virtual ~CSExitInvitation() throw();

  bool operator == (const CSExitInvitation & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CSExitInvitation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSExitInvitation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSExitInvitation &a, CSExitInvitation &b);

inline std::ostream& operator<<(std::ostream& out, const CSExitInvitation& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCExitInvitation__isset {
  _SCExitInvitation__isset() : result(false) {}
  bool result :1;
} _SCExitInvitation__isset;

class SCExitInvitation : public virtual ::apache::thrift::TBase {
 public:

  SCExitInvitation(const SCExitInvitation&);
  SCExitInvitation& operator=(const SCExitInvitation&);
  SCExitInvitation() : result(0) {
  }

  virtual ~SCExitInvitation() throw();
  int32_t result;

  _SCExitInvitation__isset __isset;

  void __set_result(const int32_t val);

  bool operator == (const SCExitInvitation & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const SCExitInvitation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCExitInvitation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCExitInvitation &a, SCExitInvitation &b);

inline std::ostream& operator<<(std::ostream& out, const SCExitInvitation& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSChooseLevel__isset {
  _CSChooseLevel__isset() : levelId(false) {}
  bool levelId :1;
} _CSChooseLevel__isset;

class CSChooseLevel : public virtual ::apache::thrift::TBase {
 public:

  CSChooseLevel(const CSChooseLevel&);
  CSChooseLevel& operator=(const CSChooseLevel&);
  CSChooseLevel() : levelId(0) {
  }

  virtual ~CSChooseLevel() throw();
  int32_t levelId;

  _CSChooseLevel__isset __isset;

  void __set_levelId(const int32_t val);

  bool operator == (const CSChooseLevel & rhs) const
  {
    if (!(levelId == rhs.levelId))
      return false;
    return true;
  }
  bool operator != (const CSChooseLevel &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSChooseLevel & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSChooseLevel &a, CSChooseLevel &b);

inline std::ostream& operator<<(std::ostream& out, const CSChooseLevel& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCChooseLevel__isset {
  _SCChooseLevel__isset() : result(false), levelId(false) {}
  bool result :1;
  bool levelId :1;
} _SCChooseLevel__isset;

class SCChooseLevel : public virtual ::apache::thrift::TBase {
 public:

  SCChooseLevel(const SCChooseLevel&);
  SCChooseLevel& operator=(const SCChooseLevel&);
  SCChooseLevel() : result(0), levelId(0) {
  }

  virtual ~SCChooseLevel() throw();
  int32_t result;
  int32_t levelId;

  _SCChooseLevel__isset __isset;

  void __set_result(const int32_t val);

  void __set_levelId(const int32_t val);

  bool operator == (const SCChooseLevel & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(levelId == rhs.levelId))
      return false;
    return true;
  }
  bool operator != (const SCChooseLevel &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCChooseLevel & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCChooseLevel &a, SCChooseLevel &b);

inline std::ostream& operator<<(std::ostream& out, const SCChooseLevel& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSFindUser__isset {
  _CSFindUser__isset() : nickname(false) {}
  bool nickname :1;
} _CSFindUser__isset;

class CSFindUser : public virtual ::apache::thrift::TBase {
 public:

  CSFindUser(const CSFindUser&);
  CSFindUser& operator=(const CSFindUser&);
  CSFindUser() : nickname() {
  }

  virtual ~CSFindUser() throw();
  std::string nickname;

  _CSFindUser__isset __isset;

  void __set_nickname(const std::string& val);

  bool operator == (const CSFindUser & rhs) const
  {
    if (!(nickname == rhs.nickname))
      return false;
    return true;
  }
  bool operator != (const CSFindUser &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSFindUser & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSFindUser &a, CSFindUser &b);

inline std::ostream& operator<<(std::ostream& out, const CSFindUser& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCFindUser__isset {
  _SCFindUser__isset() : result(false), player(false) {}
  bool result :1;
  bool player :1;
} _SCFindUser__isset;

class SCFindUser : public virtual ::apache::thrift::TBase {
 public:

  SCFindUser(const SCFindUser&);
  SCFindUser& operator=(const SCFindUser&);
  SCFindUser() : result(0) {
  }

  virtual ~SCFindUser() throw();
  int32_t result;
   ::CytxGame::PlayerData player;

  _SCFindUser__isset __isset;

  void __set_result(const int32_t val);

  void __set_player(const  ::CytxGame::PlayerData& val);

  bool operator == (const SCFindUser & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(player == rhs.player))
      return false;
    return true;
  }
  bool operator != (const SCFindUser &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCFindUser & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCFindUser &a, SCFindUser &b);

inline std::ostream& operator<<(std::ostream& out, const SCFindUser& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSSaveDungeonProgress__isset {
  _CSSaveDungeonProgress__isset() : levelId(false), levelData(false) {}
  bool levelId :1;
  bool levelData :1;
} _CSSaveDungeonProgress__isset;

class CSSaveDungeonProgress : public virtual ::apache::thrift::TBase {
 public:

  CSSaveDungeonProgress(const CSSaveDungeonProgress&);
  CSSaveDungeonProgress& operator=(const CSSaveDungeonProgress&);
  CSSaveDungeonProgress() : levelId(0) {
  }

  virtual ~CSSaveDungeonProgress() throw();
  int32_t levelId;
   ::CytxGame::LevelData levelData;

  _CSSaveDungeonProgress__isset __isset;

  void __set_levelId(const int32_t val);

  void __set_levelData(const  ::CytxGame::LevelData& val);

  bool operator == (const CSSaveDungeonProgress & rhs) const
  {
    if (!(levelId == rhs.levelId))
      return false;
    if (!(levelData == rhs.levelData))
      return false;
    return true;
  }
  bool operator != (const CSSaveDungeonProgress &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSSaveDungeonProgress & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSSaveDungeonProgress &a, CSSaveDungeonProgress &b);

inline std::ostream& operator<<(std::ostream& out, const CSSaveDungeonProgress& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCSaveDungeonProgress__isset {
  _SCSaveDungeonProgress__isset() : result(false) {}
  bool result :1;
} _SCSaveDungeonProgress__isset;

class SCSaveDungeonProgress : public virtual ::apache::thrift::TBase {
 public:

  SCSaveDungeonProgress(const SCSaveDungeonProgress&);
  SCSaveDungeonProgress& operator=(const SCSaveDungeonProgress&);
  SCSaveDungeonProgress() : result(0) {
  }

  virtual ~SCSaveDungeonProgress() throw();
  int32_t result;

  _SCSaveDungeonProgress__isset __isset;

  void __set_result(const int32_t val);

  bool operator == (const SCSaveDungeonProgress & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const SCSaveDungeonProgress &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCSaveDungeonProgress & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCSaveDungeonProgress &a, SCSaveDungeonProgress &b);

inline std::ostream& operator<<(std::ostream& out, const SCSaveDungeonProgress& obj)
{
  obj.printTo(out);
  return out;
}


class CSPause : public virtual ::apache::thrift::TBase {
 public:

  CSPause(const CSPause&);
  CSPause& operator=(const CSPause&);
  CSPause() {
  }

  virtual ~CSPause() throw();

  bool operator == (const CSPause & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CSPause &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSPause & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSPause &a, CSPause &b);

inline std::ostream& operator<<(std::ostream& out, const CSPause& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCPause__isset {
  _SCPause__isset() : result(false) {}
  bool result :1;
} _SCPause__isset;

class SCPause : public virtual ::apache::thrift::TBase {
 public:

  SCPause(const SCPause&);
  SCPause& operator=(const SCPause&);
  SCPause() : result(0) {
  }

  virtual ~SCPause() throw();
  int32_t result;

  _SCPause__isset __isset;

  void __set_result(const int32_t val);

  bool operator == (const SCPause & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const SCPause &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCPause & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCPause &a, SCPause &b);

inline std::ostream& operator<<(std::ostream& out, const SCPause& obj)
{
  obj.printTo(out);
  return out;
}


class CSContinue : public virtual ::apache::thrift::TBase {
 public:

  CSContinue(const CSContinue&);
  CSContinue& operator=(const CSContinue&);
  CSContinue() {
  }

  virtual ~CSContinue() throw();

  bool operator == (const CSContinue & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CSContinue &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSContinue & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSContinue &a, CSContinue &b);

inline std::ostream& operator<<(std::ostream& out, const CSContinue& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCContinue__isset {
  _SCContinue__isset() : result(false) {}
  bool result :1;
} _SCContinue__isset;

class SCContinue : public virtual ::apache::thrift::TBase {
 public:

  SCContinue(const SCContinue&);
  SCContinue& operator=(const SCContinue&);
  SCContinue() : result(0) {
  }

  virtual ~SCContinue() throw();
  int32_t result;

  _SCContinue__isset __isset;

  void __set_result(const int32_t val);

  bool operator == (const SCContinue & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const SCContinue &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCContinue & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCContinue &a, SCContinue &b);

inline std::ostream& operator<<(std::ostream& out, const SCContinue& obj)
{
  obj.printTo(out);
  return out;
}


class CSRestartGame : public virtual ::apache::thrift::TBase {
 public:

  CSRestartGame(const CSRestartGame&);
  CSRestartGame& operator=(const CSRestartGame&);
  CSRestartGame() {
  }

  virtual ~CSRestartGame() throw();

  bool operator == (const CSRestartGame & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CSRestartGame &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSRestartGame & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSRestartGame &a, CSRestartGame &b);

inline std::ostream& operator<<(std::ostream& out, const CSRestartGame& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCRestartGame__isset {
  _SCRestartGame__isset() : result(false), levelId(false), levelData(false) {}
  bool result :1;
  bool levelId :1;
  bool levelData :1;
} _SCRestartGame__isset;

class SCRestartGame : public virtual ::apache::thrift::TBase {
 public:

  SCRestartGame(const SCRestartGame&);
  SCRestartGame& operator=(const SCRestartGame&);
  SCRestartGame() : result(0), levelId(0) {
  }

  virtual ~SCRestartGame() throw();
  int32_t result;
  int32_t levelId;
   ::CytxGame::LevelData levelData;

  _SCRestartGame__isset __isset;

  void __set_result(const int32_t val);

  void __set_levelId(const int32_t val);

  void __set_levelData(const  ::CytxGame::LevelData& val);

  bool operator == (const SCRestartGame & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(levelId == rhs.levelId))
      return false;
    if (!(levelData == rhs.levelData))
      return false;
    return true;
  }
  bool operator != (const SCRestartGame &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCRestartGame & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCRestartGame &a, SCRestartGame &b);

inline std::ostream& operator<<(std::ostream& out, const SCRestartGame& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSQuickMatch__isset {
  _CSQuickMatch__isset() : userId(false) {}
  bool userId :1;
} _CSQuickMatch__isset;

class CSQuickMatch : public virtual ::apache::thrift::TBase {
 public:

  CSQuickMatch(const CSQuickMatch&);
  CSQuickMatch& operator=(const CSQuickMatch&);
  CSQuickMatch() : userId(0) {
  }

  virtual ~CSQuickMatch() throw();
  int32_t userId;

  _CSQuickMatch__isset __isset;

  void __set_userId(const int32_t val);

  bool operator == (const CSQuickMatch & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    return true;
  }
  bool operator != (const CSQuickMatch &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSQuickMatch & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSQuickMatch &a, CSQuickMatch &b);

inline std::ostream& operator<<(std::ostream& out, const CSQuickMatch& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCQuickMatch__isset {
  _SCQuickMatch__isset() : result(false), isHostRole(false), hostRoleData(false), guestRoleData(false) {}
  bool result :1;
  bool isHostRole :1;
  bool hostRoleData :1;
  bool guestRoleData :1;
} _SCQuickMatch__isset;

class SCQuickMatch : public virtual ::apache::thrift::TBase {
 public:

  SCQuickMatch(const SCQuickMatch&);
  SCQuickMatch& operator=(const SCQuickMatch&);
  SCQuickMatch() : result(0), isHostRole(0) {
  }

  virtual ~SCQuickMatch() throw();
  int32_t result;
  bool isHostRole;
   ::CytxGame::RoleData hostRoleData;
   ::CytxGame::RoleData guestRoleData;

  _SCQuickMatch__isset __isset;

  void __set_result(const int32_t val);

  void __set_isHostRole(const bool val);

  void __set_hostRoleData(const  ::CytxGame::RoleData& val);

  void __set_guestRoleData(const  ::CytxGame::RoleData& val);

  bool operator == (const SCQuickMatch & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(isHostRole == rhs.isHostRole))
      return false;
    if (!(hostRoleData == rhs.hostRoleData))
      return false;
    if (!(guestRoleData == rhs.guestRoleData))
      return false;
    return true;
  }
  bool operator != (const SCQuickMatch &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCQuickMatch & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCQuickMatch &a, SCQuickMatch &b);

inline std::ostream& operator<<(std::ostream& out, const SCQuickMatch& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSQuickMatchLan__isset {
  _CSQuickMatchLan__isset() : userId(false) {}
  bool userId :1;
} _CSQuickMatchLan__isset;

class CSQuickMatchLan : public virtual ::apache::thrift::TBase {
 public:

  CSQuickMatchLan(const CSQuickMatchLan&);
  CSQuickMatchLan& operator=(const CSQuickMatchLan&);
  CSQuickMatchLan() {
  }

  virtual ~CSQuickMatchLan() throw();
  std::vector<int32_t>  userId;

  _CSQuickMatchLan__isset __isset;

  void __set_userId(const std::vector<int32_t> & val);

  bool operator == (const CSQuickMatchLan & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    return true;
  }
  bool operator != (const CSQuickMatchLan &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSQuickMatchLan & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSQuickMatchLan &a, CSQuickMatchLan &b);

inline std::ostream& operator<<(std::ostream& out, const CSQuickMatchLan& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCQuickMatchLan__isset {
  _SCQuickMatchLan__isset() : result(false), isHostRole(false), hostRoleData(false), guestRoleData(false) {}
  bool result :1;
  bool isHostRole :1;
  bool hostRoleData :1;
  bool guestRoleData :1;
} _SCQuickMatchLan__isset;

class SCQuickMatchLan : public virtual ::apache::thrift::TBase {
 public:

  SCQuickMatchLan(const SCQuickMatchLan&);
  SCQuickMatchLan& operator=(const SCQuickMatchLan&);
  SCQuickMatchLan() : result(0), isHostRole(0) {
  }

  virtual ~SCQuickMatchLan() throw();
  int32_t result;
  bool isHostRole;
   ::CytxGame::RoleData hostRoleData;
   ::CytxGame::RoleData guestRoleData;

  _SCQuickMatchLan__isset __isset;

  void __set_result(const int32_t val);

  void __set_isHostRole(const bool val);

  void __set_hostRoleData(const  ::CytxGame::RoleData& val);

  void __set_guestRoleData(const  ::CytxGame::RoleData& val);

  bool operator == (const SCQuickMatchLan & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(isHostRole == rhs.isHostRole))
      return false;
    if (!(hostRoleData == rhs.hostRoleData))
      return false;
    if (!(guestRoleData == rhs.guestRoleData))
      return false;
    return true;
  }
  bool operator != (const SCQuickMatchLan &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCQuickMatchLan & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCQuickMatchLan &a, SCQuickMatchLan &b);

inline std::ostream& operator<<(std::ostream& out, const SCQuickMatchLan& obj)
{
  obj.printTo(out);
  return out;
}


class CSQuickMatchCancel : public virtual ::apache::thrift::TBase {
 public:

  CSQuickMatchCancel(const CSQuickMatchCancel&);
  CSQuickMatchCancel& operator=(const CSQuickMatchCancel&);
  CSQuickMatchCancel() {
  }

  virtual ~CSQuickMatchCancel() throw();

  bool operator == (const CSQuickMatchCancel & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CSQuickMatchCancel &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSQuickMatchCancel & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSQuickMatchCancel &a, CSQuickMatchCancel &b);

inline std::ostream& operator<<(std::ostream& out, const CSQuickMatchCancel& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCQuickMatchCancel__isset {
  _SCQuickMatchCancel__isset() : result(false), player(false) {}
  bool result :1;
  bool player :1;
} _SCQuickMatchCancel__isset;

class SCQuickMatchCancel : public virtual ::apache::thrift::TBase {
 public:

  SCQuickMatchCancel(const SCQuickMatchCancel&);
  SCQuickMatchCancel& operator=(const SCQuickMatchCancel&);
  SCQuickMatchCancel() : result(0) {
  }

  virtual ~SCQuickMatchCancel() throw();
  int32_t result;
   ::CytxGame::PlayerData player;

  _SCQuickMatchCancel__isset __isset;

  void __set_result(const int32_t val);

  void __set_player(const  ::CytxGame::PlayerData& val);

  bool operator == (const SCQuickMatchCancel & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(player == rhs.player))
      return false;
    return true;
  }
  bool operator != (const SCQuickMatchCancel &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCQuickMatchCancel & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCQuickMatchCancel &a, SCQuickMatchCancel &b);

inline std::ostream& operator<<(std::ostream& out, const SCQuickMatchCancel& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSReplayList__isset {
  _CSReplayList__isset() : userId(false) {}
  bool userId :1;
} _CSReplayList__isset;

class CSReplayList : public virtual ::apache::thrift::TBase {
 public:

  CSReplayList(const CSReplayList&);
  CSReplayList& operator=(const CSReplayList&);
  CSReplayList() : userId(0) {
  }

  virtual ~CSReplayList() throw();
  int32_t userId;

  _CSReplayList__isset __isset;

  void __set_userId(const int32_t val);

  bool operator == (const CSReplayList & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    return true;
  }
  bool operator != (const CSReplayList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSReplayList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSReplayList &a, CSReplayList &b);

inline std::ostream& operator<<(std::ostream& out, const CSReplayList& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCReplayList__isset {
  _SCReplayList__isset() : result(false), replayList(false) {}
  bool result :1;
  bool replayList :1;
} _SCReplayList__isset;

class SCReplayList : public virtual ::apache::thrift::TBase {
 public:

  SCReplayList(const SCReplayList&);
  SCReplayList& operator=(const SCReplayList&);
  SCReplayList() : result(0) {
  }

  virtual ~SCReplayList() throw();
  int32_t result;
  std::vector< ::CytxGame::ReplayData>  replayList;

  _SCReplayList__isset __isset;

  void __set_result(const int32_t val);

  void __set_replayList(const std::vector< ::CytxGame::ReplayData> & val);

  bool operator == (const SCReplayList & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(replayList == rhs.replayList))
      return false;
    return true;
  }
  bool operator != (const SCReplayList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCReplayList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCReplayList &a, SCReplayList &b);

inline std::ostream& operator<<(std::ostream& out, const SCReplayList& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSReplayChoose__isset {
  _CSReplayChoose__isset() : userId(false), timeData(false) {}
  bool userId :1;
  bool timeData :1;
} _CSReplayChoose__isset;

class CSReplayChoose : public virtual ::apache::thrift::TBase {
 public:

  CSReplayChoose(const CSReplayChoose&);
  CSReplayChoose& operator=(const CSReplayChoose&);
  CSReplayChoose() : userId(0), timeData(0) {
  }

  virtual ~CSReplayChoose() throw();
  int32_t userId;
  int64_t timeData;

  _CSReplayChoose__isset __isset;

  void __set_userId(const int32_t val);

  void __set_timeData(const int64_t val);

  bool operator == (const CSReplayChoose & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    if (!(timeData == rhs.timeData))
      return false;
    return true;
  }
  bool operator != (const CSReplayChoose &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSReplayChoose & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSReplayChoose &a, CSReplayChoose &b);

inline std::ostream& operator<<(std::ostream& out, const CSReplayChoose& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCReplayChoose__isset {
  _SCReplayChoose__isset() : result(false), levelData(false), classType(false), levelId(false), endFrameIndex(false) {}
  bool result :1;
  bool levelData :1;
  bool classType :1;
  bool levelId :1;
  bool endFrameIndex :1;
} _SCReplayChoose__isset;

class SCReplayChoose : public virtual ::apache::thrift::TBase {
 public:

  SCReplayChoose(const SCReplayChoose&);
  SCReplayChoose& operator=(const SCReplayChoose&);
  SCReplayChoose() : result(0), classType(( ::CytxGame::ClassType::type)0), levelId(0), endFrameIndex(0) {
  }

  virtual ~SCReplayChoose() throw();
  int32_t result;
   ::CytxGame::LevelData levelData;
   ::CytxGame::ClassType::type classType;
  int32_t levelId;
  int32_t endFrameIndex;

  _SCReplayChoose__isset __isset;

  void __set_result(const int32_t val);

  void __set_levelData(const  ::CytxGame::LevelData& val);

  void __set_classType(const  ::CytxGame::ClassType::type val);

  void __set_levelId(const int32_t val);

  void __set_endFrameIndex(const int32_t val);

  bool operator == (const SCReplayChoose & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(levelData == rhs.levelData))
      return false;
    if (!(classType == rhs.classType))
      return false;
    if (!(levelId == rhs.levelId))
      return false;
    if (!(endFrameIndex == rhs.endFrameIndex))
      return false;
    return true;
  }
  bool operator != (const SCReplayChoose &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCReplayChoose & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCReplayChoose &a, SCReplayChoose &b);

inline std::ostream& operator<<(std::ostream& out, const SCReplayChoose& obj)
{
  obj.printTo(out);
  return out;
}


class CSReplayStart : public virtual ::apache::thrift::TBase {
 public:

  CSReplayStart(const CSReplayStart&);
  CSReplayStart& operator=(const CSReplayStart&);
  CSReplayStart() {
  }

  virtual ~CSReplayStart() throw();

  bool operator == (const CSReplayStart & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CSReplayStart &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSReplayStart & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSReplayStart &a, CSReplayStart &b);

inline std::ostream& operator<<(std::ostream& out, const CSReplayStart& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCReplayStart__isset {
  _SCReplayStart__isset() : result(false) {}
  bool result :1;
} _SCReplayStart__isset;

class SCReplayStart : public virtual ::apache::thrift::TBase {
 public:

  SCReplayStart(const SCReplayStart&);
  SCReplayStart& operator=(const SCReplayStart&);
  SCReplayStart() : result(0) {
  }

  virtual ~SCReplayStart() throw();
  int32_t result;

  _SCReplayStart__isset __isset;

  void __set_result(const int32_t val);

  bool operator == (const SCReplayStart & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const SCReplayStart &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCReplayStart & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCReplayStart &a, SCReplayStart &b);

inline std::ostream& operator<<(std::ostream& out, const SCReplayStart& obj)
{
  obj.printTo(out);
  return out;
}


class CSReplayEnd : public virtual ::apache::thrift::TBase {
 public:

  CSReplayEnd(const CSReplayEnd&);
  CSReplayEnd& operator=(const CSReplayEnd&);
  CSReplayEnd() {
  }

  virtual ~CSReplayEnd() throw();

  bool operator == (const CSReplayEnd & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CSReplayEnd &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSReplayEnd & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSReplayEnd &a, CSReplayEnd &b);

inline std::ostream& operator<<(std::ostream& out, const CSReplayEnd& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCReplayEnd__isset {
  _SCReplayEnd__isset() : result(false) {}
  bool result :1;
} _SCReplayEnd__isset;

class SCReplayEnd : public virtual ::apache::thrift::TBase {
 public:

  SCReplayEnd(const SCReplayEnd&);
  SCReplayEnd& operator=(const SCReplayEnd&);
  SCReplayEnd() : result(0) {
  }

  virtual ~SCReplayEnd() throw();
  int32_t result;

  _SCReplayEnd__isset __isset;

  void __set_result(const int32_t val);

  bool operator == (const SCReplayEnd & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const SCReplayEnd &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCReplayEnd & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCReplayEnd &a, SCReplayEnd &b);

inline std::ostream& operator<<(std::ostream& out, const SCReplayEnd& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSQuickMatchClassType__isset {
  _CSQuickMatchClassType__isset() : classType(false) {}
  bool classType :1;
} _CSQuickMatchClassType__isset;

class CSQuickMatchClassType : public virtual ::apache::thrift::TBase {
 public:

  CSQuickMatchClassType(const CSQuickMatchClassType&);
  CSQuickMatchClassType& operator=(const CSQuickMatchClassType&);
  CSQuickMatchClassType() : classType(( ::CytxGame::ClassType::type)0) {
  }

  virtual ~CSQuickMatchClassType() throw();
   ::CytxGame::ClassType::type classType;

  _CSQuickMatchClassType__isset __isset;

  void __set_classType(const  ::CytxGame::ClassType::type val);

  bool operator == (const CSQuickMatchClassType & rhs) const
  {
    if (!(classType == rhs.classType))
      return false;
    return true;
  }
  bool operator != (const CSQuickMatchClassType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSQuickMatchClassType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSQuickMatchClassType &a, CSQuickMatchClassType &b);

inline std::ostream& operator<<(std::ostream& out, const CSQuickMatchClassType& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCQuickMatchClassType__isset {
  _SCQuickMatchClassType__isset() : result(false), classType(false) {}
  bool result :1;
  bool classType :1;
} _SCQuickMatchClassType__isset;

class SCQuickMatchClassType : public virtual ::apache::thrift::TBase {
 public:

  SCQuickMatchClassType(const SCQuickMatchClassType&);
  SCQuickMatchClassType& operator=(const SCQuickMatchClassType&);
  SCQuickMatchClassType() : result(0), classType(( ::CytxGame::ClassType::type)0) {
  }

  virtual ~SCQuickMatchClassType() throw();
  int32_t result;
   ::CytxGame::ClassType::type classType;

  _SCQuickMatchClassType__isset __isset;

  void __set_result(const int32_t val);

  void __set_classType(const  ::CytxGame::ClassType::type val);

  bool operator == (const SCQuickMatchClassType & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(classType == rhs.classType))
      return false;
    return true;
  }
  bool operator != (const SCQuickMatchClassType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCQuickMatchClassType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCQuickMatchClassType &a, SCQuickMatchClassType &b);

inline std::ostream& operator<<(std::ostream& out, const SCQuickMatchClassType& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSTestProtocol__isset {
  _CSTestProtocol__isset() : levelId(false), levelData(false) {}
  bool levelId :1;
  bool levelData :1;
} _CSTestProtocol__isset;

class CSTestProtocol : public virtual ::apache::thrift::TBase {
 public:

  CSTestProtocol(const CSTestProtocol&);
  CSTestProtocol& operator=(const CSTestProtocol&);
  CSTestProtocol() : levelId(0) {
  }

  virtual ~CSTestProtocol() throw();
  int32_t levelId;
   ::CytxGame::LevelData levelData;

  _CSTestProtocol__isset __isset;

  void __set_levelId(const int32_t val);

  void __set_levelData(const  ::CytxGame::LevelData& val);

  bool operator == (const CSTestProtocol & rhs) const
  {
    if (!(levelId == rhs.levelId))
      return false;
    if (!(levelData == rhs.levelData))
      return false;
    return true;
  }
  bool operator != (const CSTestProtocol &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSTestProtocol & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSTestProtocol &a, CSTestProtocol &b);

inline std::ostream& operator<<(std::ostream& out, const CSTestProtocol& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCTestProtocol__isset {
  _SCTestProtocol__isset() : result(false) {}
  bool result :1;
} _SCTestProtocol__isset;

class SCTestProtocol : public virtual ::apache::thrift::TBase {
 public:

  SCTestProtocol(const SCTestProtocol&);
  SCTestProtocol& operator=(const SCTestProtocol&);
  SCTestProtocol() : result(0) {
  }

  virtual ~SCTestProtocol() throw();
  int32_t result;

  _SCTestProtocol__isset __isset;

  void __set_result(const int32_t val);

  bool operator == (const SCTestProtocol & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const SCTestProtocol &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCTestProtocol & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCTestProtocol &a, SCTestProtocol &b);

inline std::ostream& operator<<(std::ostream& out, const SCTestProtocol& obj)
{
  obj.printTo(out);
  return out;
}


class CSPing : public virtual ::apache::thrift::TBase {
 public:

  CSPing(const CSPing&);
  CSPing& operator=(const CSPing&);
  CSPing() {
  }

  virtual ~CSPing() throw();

  bool operator == (const CSPing & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CSPing &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSPing & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSPing &a, CSPing &b);

inline std::ostream& operator<<(std::ostream& out, const CSPing& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCPing__isset {
  _SCPing__isset() : result(false) {}
  bool result :1;
} _SCPing__isset;

class SCPing : public virtual ::apache::thrift::TBase {
 public:

  SCPing(const SCPing&);
  SCPing& operator=(const SCPing&);
  SCPing() : result(0) {
  }

  virtual ~SCPing() throw();
  int32_t result;

  _SCPing__isset __isset;

  void __set_result(const int32_t val);

  bool operator == (const SCPing & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const SCPing &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCPing & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCPing &a, SCPing &b);

inline std::ostream& operator<<(std::ostream& out, const SCPing& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
