/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef version_TYPES_H
#define version_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




struct DownloadAssetType {
  enum type {
    ConfigByte = 0,
    Image = 1,
    Audio = 2,
    AssetBundle = 3
  };
};

extern const std::map<int, const char*> _DownloadAssetType_VALUES_TO_NAMES;

class VersionConfigElement;

class VersionConfig;

typedef struct _VersionConfigElement__isset {
  _VersionConfigElement__isset() : name(false), sign(false), type(false) {}
  bool name :1;
  bool sign :1;
  bool type :1;
} _VersionConfigElement__isset;

class VersionConfigElement : public virtual ::apache::thrift::TBase {
 public:

  VersionConfigElement(const VersionConfigElement&);
  VersionConfigElement& operator=(const VersionConfigElement&);
  VersionConfigElement() : name(), sign(), type((DownloadAssetType::type)0) {
  }

  virtual ~VersionConfigElement() throw();
  std::string name;
  std::string sign;
  DownloadAssetType::type type;

  _VersionConfigElement__isset __isset;

  void __set_name(const std::string& val);

  void __set_sign(const std::string& val);

  void __set_type(const DownloadAssetType::type val);

  bool operator == (const VersionConfigElement & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(sign == rhs.sign))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const VersionConfigElement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VersionConfigElement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(VersionConfigElement &a, VersionConfigElement &b);

inline std::ostream& operator<<(std::ostream& out, const VersionConfigElement& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _VersionConfig__isset {
  _VersionConfig__isset() : versionList(false) {}
  bool versionList :1;
} _VersionConfig__isset;

class VersionConfig : public virtual ::apache::thrift::TBase {
 public:

  VersionConfig(const VersionConfig&);
  VersionConfig& operator=(const VersionConfig&);
  VersionConfig() {
  }

  virtual ~VersionConfig() throw();
  std::vector<VersionConfigElement>  versionList;

  _VersionConfig__isset __isset;

  void __set_versionList(const std::vector<VersionConfigElement> & val);

  bool operator == (const VersionConfig & rhs) const
  {
    if (!(versionList == rhs.versionList))
      return false;
    return true;
  }
  bool operator != (const VersionConfig &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VersionConfig & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(VersionConfig &a, VersionConfig &b);

inline std::ostream& operator<<(std::ostream& out, const VersionConfig& obj)
{
  obj.printTo(out);
  return out;
}



#endif
