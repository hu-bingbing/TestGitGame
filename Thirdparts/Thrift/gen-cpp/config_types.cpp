/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "config_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




PlayerAttrConfig::~PlayerAttrConfig() throw() {
}


void PlayerAttrConfig::__set_maxHp(const int32_t val) {
  this->maxHp = val;
}

void PlayerAttrConfig::__set_moveSpeed(const int32_t val) {
  this->moveSpeed = val;
}

void PlayerAttrConfig::__set_jumpSpeed(const int32_t val) {
  this->jumpSpeed = val;
}

uint32_t PlayerAttrConfig::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxHp);
          this->__isset.maxHp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->moveSpeed);
          this->__isset.moveSpeed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->jumpSpeed);
          this->__isset.jumpSpeed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PlayerAttrConfig::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PlayerAttrConfig");

  xfer += oprot->writeFieldBegin("maxHp", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->maxHp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("moveSpeed", ::apache::thrift::protocol::T_I32, 20);
  xfer += oprot->writeI32(this->moveSpeed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jumpSpeed", ::apache::thrift::protocol::T_I32, 30);
  xfer += oprot->writeI32(this->jumpSpeed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PlayerAttrConfig &a, PlayerAttrConfig &b) {
  using ::std::swap;
  swap(a.maxHp, b.maxHp);
  swap(a.moveSpeed, b.moveSpeed);
  swap(a.jumpSpeed, b.jumpSpeed);
  swap(a.__isset, b.__isset);
}

PlayerAttrConfig::PlayerAttrConfig(const PlayerAttrConfig& other0) {
  maxHp = other0.maxHp;
  moveSpeed = other0.moveSpeed;
  jumpSpeed = other0.jumpSpeed;
  __isset = other0.__isset;
}
PlayerAttrConfig& PlayerAttrConfig::operator=(const PlayerAttrConfig& other1) {
  maxHp = other1.maxHp;
  moveSpeed = other1.moveSpeed;
  jumpSpeed = other1.jumpSpeed;
  __isset = other1.__isset;
  return *this;
}
void PlayerAttrConfig::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PlayerAttrConfig(";
  out << "maxHp=" << to_string(maxHp);
  out << ", " << "moveSpeed=" << to_string(moveSpeed);
  out << ", " << "jumpSpeed=" << to_string(jumpSpeed);
  out << ")";
}


