/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef command_TYPES_H
#define command_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "profile_types.h"


namespace CytxGame {

class CmdInstantiate;

class CmdTakeDamage;

class CmdStruct;

typedef struct _CmdInstantiate__isset {
  _CmdInstantiate__isset() : uid(false), owner(false), resource(false), pos(false), rot(false) {}
  bool uid :1;
  bool owner :1;
  bool resource :1;
  bool pos :1;
  bool rot :1;
} _CmdInstantiate__isset;

class CmdInstantiate : public virtual ::apache::thrift::TBase {
 public:

  CmdInstantiate(const CmdInstantiate&);
  CmdInstantiate& operator=(const CmdInstantiate&);
  CmdInstantiate() : uid(0), owner(0), resource() {
  }

  virtual ~CmdInstantiate() throw();
  int32_t uid;
  int32_t owner;
  std::string resource;
   ::CytxGame::Position pos;
   ::CytxGame::Rotation rot;

  _CmdInstantiate__isset __isset;

  void __set_uid(const int32_t val);

  void __set_owner(const int32_t val);

  void __set_resource(const std::string& val);

  void __set_pos(const  ::CytxGame::Position& val);

  void __set_rot(const  ::CytxGame::Rotation& val);

  bool operator == (const CmdInstantiate & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(owner == rhs.owner))
      return false;
    if (!(resource == rhs.resource))
      return false;
    if (!(pos == rhs.pos))
      return false;
    if (!(rot == rhs.rot))
      return false;
    return true;
  }
  bool operator != (const CmdInstantiate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CmdInstantiate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CmdInstantiate &a, CmdInstantiate &b);

inline std::ostream& operator<<(std::ostream& out, const CmdInstantiate& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CmdTakeDamage__isset {
  _CmdTakeDamage__isset() : amount(false), causer(false) {}
  bool amount :1;
  bool causer :1;
} _CmdTakeDamage__isset;

class CmdTakeDamage : public virtual ::apache::thrift::TBase {
 public:

  CmdTakeDamage(const CmdTakeDamage&);
  CmdTakeDamage& operator=(const CmdTakeDamage&);
  CmdTakeDamage() : amount(0), causer(0) {
  }

  virtual ~CmdTakeDamage() throw();
  int32_t amount;
  int32_t causer;

  _CmdTakeDamage__isset __isset;

  void __set_amount(const int32_t val);

  void __set_causer(const int32_t val);

  bool operator == (const CmdTakeDamage & rhs) const
  {
    if (!(amount == rhs.amount))
      return false;
    if (!(causer == rhs.causer))
      return false;
    return true;
  }
  bool operator != (const CmdTakeDamage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CmdTakeDamage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CmdTakeDamage &a, CmdTakeDamage &b);

inline std::ostream& operator<<(std::ostream& out, const CmdTakeDamage& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CmdStruct__isset {
  _CmdStruct__isset() : type(false), argv1(false), argv2(false) {}
  bool type :1;
  bool argv1 :1;
  bool argv2 :1;
} _CmdStruct__isset;

class CmdStruct : public virtual ::apache::thrift::TBase {
 public:

  CmdStruct(const CmdStruct&);
  CmdStruct& operator=(const CmdStruct&);
  CmdStruct() : type(0), argv1(0), argv2(0) {
  }

  virtual ~CmdStruct() throw();
  int32_t type;
  int32_t argv1;
  int32_t argv2;

  _CmdStruct__isset __isset;

  void __set_type(const int32_t val);

  void __set_argv1(const int32_t val);

  void __set_argv2(const int32_t val);

  bool operator == (const CmdStruct & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(argv1 == rhs.argv1))
      return false;
    if (!(argv2 == rhs.argv2))
      return false;
    return true;
  }
  bool operator != (const CmdStruct &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CmdStruct & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CmdStruct &a, CmdStruct &b);

inline std::ostream& operator<<(std::ostream& out, const CmdStruct& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
