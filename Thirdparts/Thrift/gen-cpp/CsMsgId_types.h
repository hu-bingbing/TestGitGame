/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CsMsgId_TYPES_H
#define CsMsgId_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "cs_struct_types.h"




struct MessageId {
  enum type {
    SC_ClientClose = 7,
    CS_Login = 100010,
    SC_Login = 100011,
    CS_Register = 100020,
    SC_Register = 100021,
    CS_TouristLogin = 100030,
    SC_TouristLogin = 100031,
    CS_Logout = 100040,
    SC_Logout = 100041,
    CS_CreateRoom = 101010,
    SC_CreateRoom = 101011,
    CS_JoinRoom = 101030,
    SC_JoinRoom = 101031,
    CS_ExitRoom = 101040,
    SC_ExitRoom = 101041,
    CS_StartGame = 101050,
    SC_StartGame = 101051,
    SC_Frame = 101070,
    CS_Input = 101080,
    SC_Input = 101081,
    CS_ExitGame = 101090,
    SC_ExitGame = 101091,
    CS_StartGameConfirm = 101100,
    SC_StartGameConfirm = 101101,
    CS_AddFriend = 101110,
    SC_AddFriend = 101111,
    CS_DelFriend = 101120,
    SC_DelFriend = 101121,
    CS_FindByNickName = 101130,
    SC_FindByNickName = 101131,
    CS_GetFriendList = 101140,
    SC_GetFriendList = 101141,
    CS_GetFriendRoomList = 101150,
    SC_GetFriendRoomList = 101151,
    CS_GetRoomList = 101160,
    SC_GetRoomList = 101161,
    SC_RefreshReplayData = 101170,
    CS_UploadVoice = 101180,
    SC_UploadVoice = 101181,
    CS_GetVoice = 101190,
    SC_GetVoice = 101191,
    CS_RandomNickname = 101200,
    SC_RandomNickname = 101201,
    CS_SetNickname = 101210,
    SC_SetNickname = 101211,
    SC_UpdateFriendData = 101220,
    SC_FriendOnlineInfo = 101230,
    CS_StartRecord = 101240,
    SC_StartRecord = 101241,
    CS_EndRecord = 101250,
    SC_EndRecord = 101251,
    CS_EndPlayRecord = 101260,
    SC_EndPlayRecord = 101261,
    CS_GetReplay = 102010,
    SC_GetReplay = 102011,
    CS_GetReplayInfo = 102020,
    SC_GetReplayInfo = 102021
  };
};

extern const std::map<int, const char*> _MessageId_VALUES_TO_NAMES;

class CSLogin;

class SCLogin;

class CSRegister;

class SCRegister;

class CSTouristLogin;

class SCTouristLogin;

class CSLogout;

class SCLogout;

class CSDisconnect;

class SCDisconnect;

class SCRefreshReplayData;

class SCFrame;

class CSInput;

class SCInput;

class CSCreateRoom;

class SCCreateRoom;

class CSRoomList;

class SCRoomList;

class CSJoinRoom;

class CSExitRoom;

class SCJoinRoom;

class SCExitRoom;

class CSStartGame;

class SCStartGame;

class CSRandomNickname;

class SCRandomNickname;

class CSSetNickname;

class SCSetNickname;

class SCUpdateFriendData;

class CSReconnect;

class SCReconnect;

class CSAddFriend;

class SCAddFriend;

class CSDelFriend;

class SCDelFriend;

class CSFindByNickName;

class SCFindByNickName;

class CSGetFriendList;

class SCGetFriendList;

class CSStartGameConfirm;

class SCStartGameConfirm;

class CSGetReplayInfo;

class SCGetReplayInfo;

class CSGetReplay;

class SCGetReplay;

class CSGetFriendRoomList;

class SCGetFriendRoomList;

class CSGetRoomList;

class SCGetRoomList;

class CSExitGame;

class SCExitGame;

class CSUploadVoice;

class SCUploadVoice;

class CSGetVoice;

class SCGetVoice;

class SClientClose;

class SCFriendOnlineInfo;

class CSStartRecord;

class SCStartRecord;

class CSEndRecord;

class SCEndRecord;

class CSEndPlayRecord;

class SCEndPlayRecord;

typedef struct _CSLogin__isset {
  _CSLogin__isset() : userName(false), password(false) {}
  bool userName :1;
  bool password :1;
} _CSLogin__isset;

class CSLogin : public virtual ::apache::thrift::TBase {
 public:

  CSLogin(const CSLogin&);
  CSLogin& operator=(const CSLogin&);
  CSLogin() : userName(), password() {
  }

  virtual ~CSLogin() throw();
  std::string userName;
  std::string password;

  _CSLogin__isset __isset;

  void __set_userName(const std::string& val);

  void __set_password(const std::string& val);

  bool operator == (const CSLogin & rhs) const
  {
    if (!(userName == rhs.userName))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const CSLogin &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSLogin & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSLogin &a, CSLogin &b);

inline std::ostream& operator<<(std::ostream& out, const CSLogin& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCLogin__isset {
  _SCLogin__isset() : result(false), userData(false) {}
  bool result :1;
  bool userData :1;
} _SCLogin__isset;

class SCLogin : public virtual ::apache::thrift::TBase {
 public:

  SCLogin(const SCLogin&);
  SCLogin& operator=(const SCLogin&);
  SCLogin() : result(0) {
  }

  virtual ~SCLogin() throw();
  int32_t result;
   ::UserData userData;

  _SCLogin__isset __isset;

  void __set_result(const int32_t val);

  void __set_userData(const  ::UserData& val);

  bool operator == (const SCLogin & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(userData == rhs.userData))
      return false;
    return true;
  }
  bool operator != (const SCLogin &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCLogin & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCLogin &a, SCLogin &b);

inline std::ostream& operator<<(std::ostream& out, const SCLogin& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSRegister__isset {
  _CSRegister__isset() : userName(false), password(false), email(false) {}
  bool userName :1;
  bool password :1;
  bool email :1;
} _CSRegister__isset;

class CSRegister : public virtual ::apache::thrift::TBase {
 public:

  CSRegister(const CSRegister&);
  CSRegister& operator=(const CSRegister&);
  CSRegister() : userName(), password(), email() {
  }

  virtual ~CSRegister() throw();
  std::string userName;
  std::string password;
  std::string email;

  _CSRegister__isset __isset;

  void __set_userName(const std::string& val);

  void __set_password(const std::string& val);

  void __set_email(const std::string& val);

  bool operator == (const CSRegister & rhs) const
  {
    if (!(userName == rhs.userName))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(email == rhs.email))
      return false;
    return true;
  }
  bool operator != (const CSRegister &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSRegister & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSRegister &a, CSRegister &b);

inline std::ostream& operator<<(std::ostream& out, const CSRegister& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCRegister__isset {
  _SCRegister__isset() : result(false) {}
  bool result :1;
} _SCRegister__isset;

class SCRegister : public virtual ::apache::thrift::TBase {
 public:

  SCRegister(const SCRegister&);
  SCRegister& operator=(const SCRegister&);
  SCRegister() : result(0) {
  }

  virtual ~SCRegister() throw();
  int32_t result;

  _SCRegister__isset __isset;

  void __set_result(const int32_t val);

  bool operator == (const SCRegister & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const SCRegister &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCRegister & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCRegister &a, SCRegister &b);

inline std::ostream& operator<<(std::ostream& out, const SCRegister& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSTouristLogin__isset {
  _CSTouristLogin__isset() : deviceId(false) {}
  bool deviceId :1;
} _CSTouristLogin__isset;

class CSTouristLogin : public virtual ::apache::thrift::TBase {
 public:

  CSTouristLogin(const CSTouristLogin&);
  CSTouristLogin& operator=(const CSTouristLogin&);
  CSTouristLogin() : deviceId() {
  }

  virtual ~CSTouristLogin() throw();
  std::string deviceId;

  _CSTouristLogin__isset __isset;

  void __set_deviceId(const std::string& val);

  bool operator == (const CSTouristLogin & rhs) const
  {
    if (!(deviceId == rhs.deviceId))
      return false;
    return true;
  }
  bool operator != (const CSTouristLogin &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSTouristLogin & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSTouristLogin &a, CSTouristLogin &b);

inline std::ostream& operator<<(std::ostream& out, const CSTouristLogin& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCTouristLogin__isset {
  _SCTouristLogin__isset() : result(false), userData(false) {}
  bool result :1;
  bool userData :1;
} _SCTouristLogin__isset;

class SCTouristLogin : public virtual ::apache::thrift::TBase {
 public:

  SCTouristLogin(const SCTouristLogin&);
  SCTouristLogin& operator=(const SCTouristLogin&);
  SCTouristLogin() : result(0) {
  }

  virtual ~SCTouristLogin() throw();
  int32_t result;
   ::UserData userData;

  _SCTouristLogin__isset __isset;

  void __set_result(const int32_t val);

  void __set_userData(const  ::UserData& val);

  bool operator == (const SCTouristLogin & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(userData == rhs.userData))
      return false;
    return true;
  }
  bool operator != (const SCTouristLogin &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCTouristLogin & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCTouristLogin &a, SCTouristLogin &b);

inline std::ostream& operator<<(std::ostream& out, const SCTouristLogin& obj)
{
  obj.printTo(out);
  return out;
}


class CSLogout : public virtual ::apache::thrift::TBase {
 public:

  CSLogout(const CSLogout&);
  CSLogout& operator=(const CSLogout&);
  CSLogout() {
  }

  virtual ~CSLogout() throw();

  bool operator == (const CSLogout & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CSLogout &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSLogout & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSLogout &a, CSLogout &b);

inline std::ostream& operator<<(std::ostream& out, const CSLogout& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCLogout__isset {
  _SCLogout__isset() : result(false) {}
  bool result :1;
} _SCLogout__isset;

class SCLogout : public virtual ::apache::thrift::TBase {
 public:

  SCLogout(const SCLogout&);
  SCLogout& operator=(const SCLogout&);
  SCLogout() : result(0) {
  }

  virtual ~SCLogout() throw();
  int32_t result;

  _SCLogout__isset __isset;

  void __set_result(const int32_t val);

  bool operator == (const SCLogout & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const SCLogout &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCLogout & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCLogout &a, SCLogout &b);

inline std::ostream& operator<<(std::ostream& out, const SCLogout& obj)
{
  obj.printTo(out);
  return out;
}


class CSDisconnect : public virtual ::apache::thrift::TBase {
 public:

  CSDisconnect(const CSDisconnect&);
  CSDisconnect& operator=(const CSDisconnect&);
  CSDisconnect() {
  }

  virtual ~CSDisconnect() throw();

  bool operator == (const CSDisconnect & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CSDisconnect &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSDisconnect & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSDisconnect &a, CSDisconnect &b);

inline std::ostream& operator<<(std::ostream& out, const CSDisconnect& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCDisconnect__isset {
  _SCDisconnect__isset() : result(false) {}
  bool result :1;
} _SCDisconnect__isset;

class SCDisconnect : public virtual ::apache::thrift::TBase {
 public:

  SCDisconnect(const SCDisconnect&);
  SCDisconnect& operator=(const SCDisconnect&);
  SCDisconnect() : result(0) {
  }

  virtual ~SCDisconnect() throw();
  int32_t result;

  _SCDisconnect__isset __isset;

  void __set_result(const int32_t val);

  bool operator == (const SCDisconnect & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const SCDisconnect &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCDisconnect & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCDisconnect &a, SCDisconnect &b);

inline std::ostream& operator<<(std::ostream& out, const SCDisconnect& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCRefreshReplayData__isset {
  _SCRefreshReplayData__isset() : replayData(false) {}
  bool replayData :1;
} _SCRefreshReplayData__isset;

class SCRefreshReplayData : public virtual ::apache::thrift::TBase {
 public:

  SCRefreshReplayData(const SCRefreshReplayData&);
  SCRefreshReplayData& operator=(const SCRefreshReplayData&);
  SCRefreshReplayData() {
  }

  virtual ~SCRefreshReplayData() throw();
   ::ReplayData replayData;

  _SCRefreshReplayData__isset __isset;

  void __set_replayData(const  ::ReplayData& val);

  bool operator == (const SCRefreshReplayData & rhs) const
  {
    if (!(replayData == rhs.replayData))
      return false;
    return true;
  }
  bool operator != (const SCRefreshReplayData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCRefreshReplayData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCRefreshReplayData &a, SCRefreshReplayData &b);

inline std::ostream& operator<<(std::ostream& out, const SCRefreshReplayData& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCFrame__isset {
  _SCFrame__isset() : frameData(false) {}
  bool frameData :1;
} _SCFrame__isset;

class SCFrame : public virtual ::apache::thrift::TBase {
 public:

  SCFrame(const SCFrame&);
  SCFrame& operator=(const SCFrame&);
  SCFrame() {
  }

  virtual ~SCFrame() throw();
   ::FrameData frameData;

  _SCFrame__isset __isset;

  void __set_frameData(const  ::FrameData& val);

  bool operator == (const SCFrame & rhs) const
  {
    if (!(frameData == rhs.frameData))
      return false;
    return true;
  }
  bool operator != (const SCFrame &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCFrame & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCFrame &a, SCFrame &b);

inline std::ostream& operator<<(std::ostream& out, const SCFrame& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSInput__isset {
  _CSInput__isset() : commandData(false) {}
  bool commandData :1;
} _CSInput__isset;

class CSInput : public virtual ::apache::thrift::TBase {
 public:

  CSInput(const CSInput&);
  CSInput& operator=(const CSInput&);
  CSInput() {
  }

  virtual ~CSInput() throw();
   ::CommandData commandData;

  _CSInput__isset __isset;

  void __set_commandData(const  ::CommandData& val);

  bool operator == (const CSInput & rhs) const
  {
    if (!(commandData == rhs.commandData))
      return false;
    return true;
  }
  bool operator != (const CSInput &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSInput & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSInput &a, CSInput &b);

inline std::ostream& operator<<(std::ostream& out, const CSInput& obj)
{
  obj.printTo(out);
  return out;
}


class SCInput : public virtual ::apache::thrift::TBase {
 public:

  SCInput(const SCInput&);
  SCInput& operator=(const SCInput&);
  SCInput() {
  }

  virtual ~SCInput() throw();

  bool operator == (const SCInput & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SCInput &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCInput & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCInput &a, SCInput &b);

inline std::ostream& operator<<(std::ostream& out, const SCInput& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSCreateRoom__isset {
  _CSCreateRoom__isset() : roomName(false) {}
  bool roomName :1;
} _CSCreateRoom__isset;

class CSCreateRoom : public virtual ::apache::thrift::TBase {
 public:

  CSCreateRoom(const CSCreateRoom&);
  CSCreateRoom& operator=(const CSCreateRoom&);
  CSCreateRoom() : roomName() {
  }

  virtual ~CSCreateRoom() throw();
  std::string roomName;

  _CSCreateRoom__isset __isset;

  void __set_roomName(const std::string& val);

  bool operator == (const CSCreateRoom & rhs) const
  {
    if (!(roomName == rhs.roomName))
      return false;
    return true;
  }
  bool operator != (const CSCreateRoom &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSCreateRoom & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSCreateRoom &a, CSCreateRoom &b);

inline std::ostream& operator<<(std::ostream& out, const CSCreateRoom& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCCreateRoom__isset {
  _SCCreateRoom__isset() : result(false), roomId(false), roomName(false) {}
  bool result :1;
  bool roomId :1;
  bool roomName :1;
} _SCCreateRoom__isset;

class SCCreateRoom : public virtual ::apache::thrift::TBase {
 public:

  SCCreateRoom(const SCCreateRoom&);
  SCCreateRoom& operator=(const SCCreateRoom&);
  SCCreateRoom() : result(0), roomId(0), roomName() {
  }

  virtual ~SCCreateRoom() throw();
  int32_t result;
  int32_t roomId;
  std::string roomName;

  _SCCreateRoom__isset __isset;

  void __set_result(const int32_t val);

  void __set_roomId(const int32_t val);

  void __set_roomName(const std::string& val);

  bool operator == (const SCCreateRoom & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(roomId == rhs.roomId))
      return false;
    if (!(roomName == rhs.roomName))
      return false;
    return true;
  }
  bool operator != (const SCCreateRoom &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCCreateRoom & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCCreateRoom &a, SCCreateRoom &b);

inline std::ostream& operator<<(std::ostream& out, const SCCreateRoom& obj)
{
  obj.printTo(out);
  return out;
}


class CSRoomList : public virtual ::apache::thrift::TBase {
 public:

  CSRoomList(const CSRoomList&);
  CSRoomList& operator=(const CSRoomList&);
  CSRoomList() {
  }

  virtual ~CSRoomList() throw();

  bool operator == (const CSRoomList & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CSRoomList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSRoomList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSRoomList &a, CSRoomList &b);

inline std::ostream& operator<<(std::ostream& out, const CSRoomList& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCRoomList__isset {
  _SCRoomList__isset() : result(false), roomList(false) {}
  bool result :1;
  bool roomList :1;
} _SCRoomList__isset;

class SCRoomList : public virtual ::apache::thrift::TBase {
 public:

  SCRoomList(const SCRoomList&);
  SCRoomList& operator=(const SCRoomList&);
  SCRoomList() : result(0) {
  }

  virtual ~SCRoomList() throw();
  int32_t result;
  std::vector< ::RoomData>  roomList;

  _SCRoomList__isset __isset;

  void __set_result(const int32_t val);

  void __set_roomList(const std::vector< ::RoomData> & val);

  bool operator == (const SCRoomList & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(roomList == rhs.roomList))
      return false;
    return true;
  }
  bool operator != (const SCRoomList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCRoomList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCRoomList &a, SCRoomList &b);

inline std::ostream& operator<<(std::ostream& out, const SCRoomList& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSJoinRoom__isset {
  _CSJoinRoom__isset() : roomName(false), roomId(false) {}
  bool roomName :1;
  bool roomId :1;
} _CSJoinRoom__isset;

class CSJoinRoom : public virtual ::apache::thrift::TBase {
 public:

  CSJoinRoom(const CSJoinRoom&);
  CSJoinRoom& operator=(const CSJoinRoom&);
  CSJoinRoom() : roomName(), roomId(0) {
  }

  virtual ~CSJoinRoom() throw();
  std::string roomName;
  int32_t roomId;

  _CSJoinRoom__isset __isset;

  void __set_roomName(const std::string& val);

  void __set_roomId(const int32_t val);

  bool operator == (const CSJoinRoom & rhs) const
  {
    if (!(roomName == rhs.roomName))
      return false;
    if (!(roomId == rhs.roomId))
      return false;
    return true;
  }
  bool operator != (const CSJoinRoom &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSJoinRoom & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSJoinRoom &a, CSJoinRoom &b);

inline std::ostream& operator<<(std::ostream& out, const CSJoinRoom& obj)
{
  obj.printTo(out);
  return out;
}


class CSExitRoom : public virtual ::apache::thrift::TBase {
 public:

  CSExitRoom(const CSExitRoom&);
  CSExitRoom& operator=(const CSExitRoom&);
  CSExitRoom() {
  }

  virtual ~CSExitRoom() throw();

  bool operator == (const CSExitRoom & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CSExitRoom &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSExitRoom & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSExitRoom &a, CSExitRoom &b);

inline std::ostream& operator<<(std::ostream& out, const CSExitRoom& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCJoinRoom__isset {
  _SCJoinRoom__isset() : result(false), playerList(false), joinPlayer(false) {}
  bool result :1;
  bool playerList :1;
  bool joinPlayer :1;
} _SCJoinRoom__isset;

class SCJoinRoom : public virtual ::apache::thrift::TBase {
 public:

  SCJoinRoom(const SCJoinRoom&);
  SCJoinRoom& operator=(const SCJoinRoom&);
  SCJoinRoom() : result(0) {
  }

  virtual ~SCJoinRoom() throw();
  int32_t result;
  std::vector< ::PlayerData>  playerList;
   ::PlayerData joinPlayer;

  _SCJoinRoom__isset __isset;

  void __set_result(const int32_t val);

  void __set_playerList(const std::vector< ::PlayerData> & val);

  void __set_joinPlayer(const  ::PlayerData& val);

  bool operator == (const SCJoinRoom & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(playerList == rhs.playerList))
      return false;
    if (!(joinPlayer == rhs.joinPlayer))
      return false;
    return true;
  }
  bool operator != (const SCJoinRoom &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCJoinRoom & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCJoinRoom &a, SCJoinRoom &b);

inline std::ostream& operator<<(std::ostream& out, const SCJoinRoom& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCExitRoom__isset {
  _SCExitRoom__isset() : result(false), playerList(false), exitPlayer(false) {}
  bool result :1;
  bool playerList :1;
  bool exitPlayer :1;
} _SCExitRoom__isset;

class SCExitRoom : public virtual ::apache::thrift::TBase {
 public:

  SCExitRoom(const SCExitRoom&);
  SCExitRoom& operator=(const SCExitRoom&);
  SCExitRoom() : result(0) {
  }

  virtual ~SCExitRoom() throw();
  int32_t result;
  std::vector< ::PlayerData>  playerList;
   ::PlayerData exitPlayer;

  _SCExitRoom__isset __isset;

  void __set_result(const int32_t val);

  void __set_playerList(const std::vector< ::PlayerData> & val);

  void __set_exitPlayer(const  ::PlayerData& val);

  bool operator == (const SCExitRoom & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(playerList == rhs.playerList))
      return false;
    if (!(exitPlayer == rhs.exitPlayer))
      return false;
    return true;
  }
  bool operator != (const SCExitRoom &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCExitRoom & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCExitRoom &a, SCExitRoom &b);

inline std::ostream& operator<<(std::ostream& out, const SCExitRoom& obj)
{
  obj.printTo(out);
  return out;
}


class CSStartGame : public virtual ::apache::thrift::TBase {
 public:

  CSStartGame(const CSStartGame&);
  CSStartGame& operator=(const CSStartGame&);
  CSStartGame() {
  }

  virtual ~CSStartGame() throw();

  bool operator == (const CSStartGame & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CSStartGame &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSStartGame & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSStartGame &a, CSStartGame &b);

inline std::ostream& operator<<(std::ostream& out, const CSStartGame& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCStartGame__isset {
  _SCStartGame__isset() : result(false) {}
  bool result :1;
} _SCStartGame__isset;

class SCStartGame : public virtual ::apache::thrift::TBase {
 public:

  SCStartGame(const SCStartGame&);
  SCStartGame& operator=(const SCStartGame&);
  SCStartGame() : result(0) {
  }

  virtual ~SCStartGame() throw();
  int32_t result;

  _SCStartGame__isset __isset;

  void __set_result(const int32_t val);

  bool operator == (const SCStartGame & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const SCStartGame &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCStartGame & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCStartGame &a, SCStartGame &b);

inline std::ostream& operator<<(std::ostream& out, const SCStartGame& obj)
{
  obj.printTo(out);
  return out;
}


class CSRandomNickname : public virtual ::apache::thrift::TBase {
 public:

  CSRandomNickname(const CSRandomNickname&);
  CSRandomNickname& operator=(const CSRandomNickname&);
  CSRandomNickname() {
  }

  virtual ~CSRandomNickname() throw();

  bool operator == (const CSRandomNickname & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CSRandomNickname &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSRandomNickname & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSRandomNickname &a, CSRandomNickname &b);

inline std::ostream& operator<<(std::ostream& out, const CSRandomNickname& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCRandomNickname__isset {
  _SCRandomNickname__isset() : nickname(false) {}
  bool nickname :1;
} _SCRandomNickname__isset;

class SCRandomNickname : public virtual ::apache::thrift::TBase {
 public:

  SCRandomNickname(const SCRandomNickname&);
  SCRandomNickname& operator=(const SCRandomNickname&);
  SCRandomNickname() : nickname() {
  }

  virtual ~SCRandomNickname() throw();
  std::string nickname;

  _SCRandomNickname__isset __isset;

  void __set_nickname(const std::string& val);

  bool operator == (const SCRandomNickname & rhs) const
  {
    if (!(nickname == rhs.nickname))
      return false;
    return true;
  }
  bool operator != (const SCRandomNickname &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCRandomNickname & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCRandomNickname &a, SCRandomNickname &b);

inline std::ostream& operator<<(std::ostream& out, const SCRandomNickname& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSSetNickname__isset {
  _CSSetNickname__isset() : nickname(false), iconId(false) {}
  bool nickname :1;
  bool iconId :1;
} _CSSetNickname__isset;

class CSSetNickname : public virtual ::apache::thrift::TBase {
 public:

  CSSetNickname(const CSSetNickname&);
  CSSetNickname& operator=(const CSSetNickname&);
  CSSetNickname() : nickname(), iconId(0) {
  }

  virtual ~CSSetNickname() throw();
  std::string nickname;
  int32_t iconId;

  _CSSetNickname__isset __isset;

  void __set_nickname(const std::string& val);

  void __set_iconId(const int32_t val);

  bool operator == (const CSSetNickname & rhs) const
  {
    if (!(nickname == rhs.nickname))
      return false;
    if (!(iconId == rhs.iconId))
      return false;
    return true;
  }
  bool operator != (const CSSetNickname &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSSetNickname & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSSetNickname &a, CSSetNickname &b);

inline std::ostream& operator<<(std::ostream& out, const CSSetNickname& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCSetNickname__isset {
  _SCSetNickname__isset() : result(false), playerData(false) {}
  bool result :1;
  bool playerData :1;
} _SCSetNickname__isset;

class SCSetNickname : public virtual ::apache::thrift::TBase {
 public:

  SCSetNickname(const SCSetNickname&);
  SCSetNickname& operator=(const SCSetNickname&);
  SCSetNickname() : result(0) {
  }

  virtual ~SCSetNickname() throw();
  int32_t result;
   ::PlayerData playerData;

  _SCSetNickname__isset __isset;

  void __set_result(const int32_t val);

  void __set_playerData(const  ::PlayerData& val);

  bool operator == (const SCSetNickname & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(playerData == rhs.playerData))
      return false;
    return true;
  }
  bool operator != (const SCSetNickname &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCSetNickname & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCSetNickname &a, SCSetNickname &b);

inline std::ostream& operator<<(std::ostream& out, const SCSetNickname& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCUpdateFriendData__isset {
  _SCUpdateFriendData__isset() : friendData(false) {}
  bool friendData :1;
} _SCUpdateFriendData__isset;

class SCUpdateFriendData : public virtual ::apache::thrift::TBase {
 public:

  SCUpdateFriendData(const SCUpdateFriendData&);
  SCUpdateFriendData& operator=(const SCUpdateFriendData&);
  SCUpdateFriendData() {
  }

  virtual ~SCUpdateFriendData() throw();
   ::PlayerData friendData;

  _SCUpdateFriendData__isset __isset;

  void __set_friendData(const  ::PlayerData& val);

  bool operator == (const SCUpdateFriendData & rhs) const
  {
    if (!(friendData == rhs.friendData))
      return false;
    return true;
  }
  bool operator != (const SCUpdateFriendData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCUpdateFriendData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCUpdateFriendData &a, SCUpdateFriendData &b);

inline std::ostream& operator<<(std::ostream& out, const SCUpdateFriendData& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSReconnect__isset {
  _CSReconnect__isset() : keyReconnect(false) {}
  bool keyReconnect :1;
} _CSReconnect__isset;

class CSReconnect : public virtual ::apache::thrift::TBase {
 public:

  CSReconnect(const CSReconnect&);
  CSReconnect& operator=(const CSReconnect&);
  CSReconnect() : keyReconnect(0) {
  }

  virtual ~CSReconnect() throw();
  int32_t keyReconnect;

  _CSReconnect__isset __isset;

  void __set_keyReconnect(const int32_t val);

  bool operator == (const CSReconnect & rhs) const
  {
    if (!(keyReconnect == rhs.keyReconnect))
      return false;
    return true;
  }
  bool operator != (const CSReconnect &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSReconnect & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSReconnect &a, CSReconnect &b);

inline std::ostream& operator<<(std::ostream& out, const CSReconnect& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCReconnect__isset {
  _SCReconnect__isset() : keyReconnect(false) {}
  bool keyReconnect :1;
} _SCReconnect__isset;

class SCReconnect : public virtual ::apache::thrift::TBase {
 public:

  SCReconnect(const SCReconnect&);
  SCReconnect& operator=(const SCReconnect&);
  SCReconnect() : keyReconnect(0) {
  }

  virtual ~SCReconnect() throw();
  int32_t keyReconnect;

  _SCReconnect__isset __isset;

  void __set_keyReconnect(const int32_t val);

  bool operator == (const SCReconnect & rhs) const
  {
    if (!(keyReconnect == rhs.keyReconnect))
      return false;
    return true;
  }
  bool operator != (const SCReconnect &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCReconnect & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCReconnect &a, SCReconnect &b);

inline std::ostream& operator<<(std::ostream& out, const SCReconnect& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSAddFriend__isset {
  _CSAddFriend__isset() : nickname(false) {}
  bool nickname :1;
} _CSAddFriend__isset;

class CSAddFriend : public virtual ::apache::thrift::TBase {
 public:

  CSAddFriend(const CSAddFriend&);
  CSAddFriend& operator=(const CSAddFriend&);
  CSAddFriend() : nickname() {
  }

  virtual ~CSAddFriend() throw();
  std::string nickname;

  _CSAddFriend__isset __isset;

  void __set_nickname(const std::string& val);

  bool operator == (const CSAddFriend & rhs) const
  {
    if (!(nickname == rhs.nickname))
      return false;
    return true;
  }
  bool operator != (const CSAddFriend &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSAddFriend & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSAddFriend &a, CSAddFriend &b);

inline std::ostream& operator<<(std::ostream& out, const CSAddFriend& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCAddFriend__isset {
  _SCAddFriend__isset() : result(false), friendInfo(false) {}
  bool result :1;
  bool friendInfo :1;
} _SCAddFriend__isset;

class SCAddFriend : public virtual ::apache::thrift::TBase {
 public:

  SCAddFriend(const SCAddFriend&);
  SCAddFriend& operator=(const SCAddFriend&);
  SCAddFriend() : result(0) {
  }

  virtual ~SCAddFriend() throw();
  int32_t result;
   ::PlayerData friendInfo;

  _SCAddFriend__isset __isset;

  void __set_result(const int32_t val);

  void __set_friendInfo(const  ::PlayerData& val);

  bool operator == (const SCAddFriend & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(friendInfo == rhs.friendInfo))
      return false;
    return true;
  }
  bool operator != (const SCAddFriend &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCAddFriend & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCAddFriend &a, SCAddFriend &b);

inline std::ostream& operator<<(std::ostream& out, const SCAddFriend& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSDelFriend__isset {
  _CSDelFriend__isset() : nickname(false) {}
  bool nickname :1;
} _CSDelFriend__isset;

class CSDelFriend : public virtual ::apache::thrift::TBase {
 public:

  CSDelFriend(const CSDelFriend&);
  CSDelFriend& operator=(const CSDelFriend&);
  CSDelFriend() : nickname() {
  }

  virtual ~CSDelFriend() throw();
  std::string nickname;

  _CSDelFriend__isset __isset;

  void __set_nickname(const std::string& val);

  bool operator == (const CSDelFriend & rhs) const
  {
    if (!(nickname == rhs.nickname))
      return false;
    return true;
  }
  bool operator != (const CSDelFriend &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSDelFriend & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSDelFriend &a, CSDelFriend &b);

inline std::ostream& operator<<(std::ostream& out, const CSDelFriend& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCDelFriend__isset {
  _SCDelFriend__isset() : result(false), friendInfo(false) {}
  bool result :1;
  bool friendInfo :1;
} _SCDelFriend__isset;

class SCDelFriend : public virtual ::apache::thrift::TBase {
 public:

  SCDelFriend(const SCDelFriend&);
  SCDelFriend& operator=(const SCDelFriend&);
  SCDelFriend() : result(0) {
  }

  virtual ~SCDelFriend() throw();
  int32_t result;
   ::PlayerData friendInfo;

  _SCDelFriend__isset __isset;

  void __set_result(const int32_t val);

  void __set_friendInfo(const  ::PlayerData& val);

  bool operator == (const SCDelFriend & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(friendInfo == rhs.friendInfo))
      return false;
    return true;
  }
  bool operator != (const SCDelFriend &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCDelFriend & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCDelFriend &a, SCDelFriend &b);

inline std::ostream& operator<<(std::ostream& out, const SCDelFriend& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSFindByNickName__isset {
  _CSFindByNickName__isset() : nickname(false) {}
  bool nickname :1;
} _CSFindByNickName__isset;

class CSFindByNickName : public virtual ::apache::thrift::TBase {
 public:

  CSFindByNickName(const CSFindByNickName&);
  CSFindByNickName& operator=(const CSFindByNickName&);
  CSFindByNickName() : nickname() {
  }

  virtual ~CSFindByNickName() throw();
  std::string nickname;

  _CSFindByNickName__isset __isset;

  void __set_nickname(const std::string& val);

  bool operator == (const CSFindByNickName & rhs) const
  {
    if (!(nickname == rhs.nickname))
      return false;
    return true;
  }
  bool operator != (const CSFindByNickName &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSFindByNickName & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSFindByNickName &a, CSFindByNickName &b);

inline std::ostream& operator<<(std::ostream& out, const CSFindByNickName& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCFindByNickName__isset {
  _SCFindByNickName__isset() : friendList(false) {}
  bool friendList :1;
} _SCFindByNickName__isset;

class SCFindByNickName : public virtual ::apache::thrift::TBase {
 public:

  SCFindByNickName(const SCFindByNickName&);
  SCFindByNickName& operator=(const SCFindByNickName&);
  SCFindByNickName() {
  }

  virtual ~SCFindByNickName() throw();
  std::vector< ::PlayerData>  friendList;

  _SCFindByNickName__isset __isset;

  void __set_friendList(const std::vector< ::PlayerData> & val);

  bool operator == (const SCFindByNickName & rhs) const
  {
    if (!(friendList == rhs.friendList))
      return false;
    return true;
  }
  bool operator != (const SCFindByNickName &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCFindByNickName & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCFindByNickName &a, SCFindByNickName &b);

inline std::ostream& operator<<(std::ostream& out, const SCFindByNickName& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSGetFriendList__isset {
  _CSGetFriendList__isset() : userName(false) {}
  bool userName :1;
} _CSGetFriendList__isset;

class CSGetFriendList : public virtual ::apache::thrift::TBase {
 public:

  CSGetFriendList(const CSGetFriendList&);
  CSGetFriendList& operator=(const CSGetFriendList&);
  CSGetFriendList() : userName() {
  }

  virtual ~CSGetFriendList() throw();
  std::string userName;

  _CSGetFriendList__isset __isset;

  void __set_userName(const std::string& val);

  bool operator == (const CSGetFriendList & rhs) const
  {
    if (!(userName == rhs.userName))
      return false;
    return true;
  }
  bool operator != (const CSGetFriendList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSGetFriendList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSGetFriendList &a, CSGetFriendList &b);

inline std::ostream& operator<<(std::ostream& out, const CSGetFriendList& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCGetFriendList__isset {
  _SCGetFriendList__isset() : friendList(false) {}
  bool friendList :1;
} _SCGetFriendList__isset;

class SCGetFriendList : public virtual ::apache::thrift::TBase {
 public:

  SCGetFriendList(const SCGetFriendList&);
  SCGetFriendList& operator=(const SCGetFriendList&);
  SCGetFriendList() {
  }

  virtual ~SCGetFriendList() throw();
  std::vector< ::PlayerData>  friendList;

  _SCGetFriendList__isset __isset;

  void __set_friendList(const std::vector< ::PlayerData> & val);

  bool operator == (const SCGetFriendList & rhs) const
  {
    if (!(friendList == rhs.friendList))
      return false;
    return true;
  }
  bool operator != (const SCGetFriendList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCGetFriendList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCGetFriendList &a, SCGetFriendList &b);

inline std::ostream& operator<<(std::ostream& out, const SCGetFriendList& obj)
{
  obj.printTo(out);
  return out;
}


class CSStartGameConfirm : public virtual ::apache::thrift::TBase {
 public:

  CSStartGameConfirm(const CSStartGameConfirm&);
  CSStartGameConfirm& operator=(const CSStartGameConfirm&);
  CSStartGameConfirm() {
  }

  virtual ~CSStartGameConfirm() throw();

  bool operator == (const CSStartGameConfirm & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CSStartGameConfirm &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSStartGameConfirm & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSStartGameConfirm &a, CSStartGameConfirm &b);

inline std::ostream& operator<<(std::ostream& out, const CSStartGameConfirm& obj)
{
  obj.printTo(out);
  return out;
}


class SCStartGameConfirm : public virtual ::apache::thrift::TBase {
 public:

  SCStartGameConfirm(const SCStartGameConfirm&);
  SCStartGameConfirm& operator=(const SCStartGameConfirm&);
  SCStartGameConfirm() {
  }

  virtual ~SCStartGameConfirm() throw();

  bool operator == (const SCStartGameConfirm & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SCStartGameConfirm &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCStartGameConfirm & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCStartGameConfirm &a, SCStartGameConfirm &b);

inline std::ostream& operator<<(std::ostream& out, const SCStartGameConfirm& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSGetReplayInfo__isset {
  _CSGetReplayInfo__isset() : roomId(false) {}
  bool roomId :1;
} _CSGetReplayInfo__isset;

class CSGetReplayInfo : public virtual ::apache::thrift::TBase {
 public:

  CSGetReplayInfo(const CSGetReplayInfo&);
  CSGetReplayInfo& operator=(const CSGetReplayInfo&);
  CSGetReplayInfo() : roomId(0) {
  }

  virtual ~CSGetReplayInfo() throw();
  int32_t roomId;

  _CSGetReplayInfo__isset __isset;

  void __set_roomId(const int32_t val);

  bool operator == (const CSGetReplayInfo & rhs) const
  {
    if (!(roomId == rhs.roomId))
      return false;
    return true;
  }
  bool operator != (const CSGetReplayInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSGetReplayInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSGetReplayInfo &a, CSGetReplayInfo &b);

inline std::ostream& operator<<(std::ostream& out, const CSGetReplayInfo& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCGetReplayInfo__isset {
  _SCGetReplayInfo__isset() : lastFrameIndex(false), influenceFrameCount(false), playerList(false), playerExitFrameList(false) {}
  bool lastFrameIndex :1;
  bool influenceFrameCount :1;
  bool playerList :1;
  bool playerExitFrameList :1;
} _SCGetReplayInfo__isset;

class SCGetReplayInfo : public virtual ::apache::thrift::TBase {
 public:

  SCGetReplayInfo(const SCGetReplayInfo&);
  SCGetReplayInfo& operator=(const SCGetReplayInfo&);
  SCGetReplayInfo() : lastFrameIndex(0), influenceFrameCount(0) {
  }

  virtual ~SCGetReplayInfo() throw();
  int32_t lastFrameIndex;
  int32_t influenceFrameCount;
  std::vector< ::PlayerData>  playerList;
  std::vector<int32_t>  playerExitFrameList;

  _SCGetReplayInfo__isset __isset;

  void __set_lastFrameIndex(const int32_t val);

  void __set_influenceFrameCount(const int32_t val);

  void __set_playerList(const std::vector< ::PlayerData> & val);

  void __set_playerExitFrameList(const std::vector<int32_t> & val);

  bool operator == (const SCGetReplayInfo & rhs) const
  {
    if (!(lastFrameIndex == rhs.lastFrameIndex))
      return false;
    if (!(influenceFrameCount == rhs.influenceFrameCount))
      return false;
    if (!(playerList == rhs.playerList))
      return false;
    if (!(playerExitFrameList == rhs.playerExitFrameList))
      return false;
    return true;
  }
  bool operator != (const SCGetReplayInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCGetReplayInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCGetReplayInfo &a, SCGetReplayInfo &b);

inline std::ostream& operator<<(std::ostream& out, const SCGetReplayInfo& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSGetReplay__isset {
  _CSGetReplay__isset() : roomId(false), influenceStartIndex(false), influenceCount(false) {}
  bool roomId :1;
  bool influenceStartIndex :1;
  bool influenceCount :1;
} _CSGetReplay__isset;

class CSGetReplay : public virtual ::apache::thrift::TBase {
 public:

  CSGetReplay(const CSGetReplay&);
  CSGetReplay& operator=(const CSGetReplay&);
  CSGetReplay() : roomId(0), influenceStartIndex(0), influenceCount(0) {
  }

  virtual ~CSGetReplay() throw();
  int32_t roomId;
  int32_t influenceStartIndex;
  int32_t influenceCount;

  _CSGetReplay__isset __isset;

  void __set_roomId(const int32_t val);

  void __set_influenceStartIndex(const int32_t val);

  void __set_influenceCount(const int32_t val);

  bool operator == (const CSGetReplay & rhs) const
  {
    if (!(roomId == rhs.roomId))
      return false;
    if (!(influenceStartIndex == rhs.influenceStartIndex))
      return false;
    if (!(influenceCount == rhs.influenceCount))
      return false;
    return true;
  }
  bool operator != (const CSGetReplay &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSGetReplay & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSGetReplay &a, CSGetReplay &b);

inline std::ostream& operator<<(std::ostream& out, const CSGetReplay& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCGetReplay__isset {
  _SCGetReplay__isset() : frameList(false) {}
  bool frameList :1;
} _SCGetReplay__isset;

class SCGetReplay : public virtual ::apache::thrift::TBase {
 public:

  SCGetReplay(const SCGetReplay&);
  SCGetReplay& operator=(const SCGetReplay&);
  SCGetReplay() {
  }

  virtual ~SCGetReplay() throw();
  std::vector< ::FrameData>  frameList;

  _SCGetReplay__isset __isset;

  void __set_frameList(const std::vector< ::FrameData> & val);

  bool operator == (const SCGetReplay & rhs) const
  {
    if (!(frameList == rhs.frameList))
      return false;
    return true;
  }
  bool operator != (const SCGetReplay &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCGetReplay & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCGetReplay &a, SCGetReplay &b);

inline std::ostream& operator<<(std::ostream& out, const SCGetReplay& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSGetFriendRoomList__isset {
  _CSGetFriendRoomList__isset() : startIndex(false), count(false) {}
  bool startIndex :1;
  bool count :1;
} _CSGetFriendRoomList__isset;

class CSGetFriendRoomList : public virtual ::apache::thrift::TBase {
 public:

  CSGetFriendRoomList(const CSGetFriendRoomList&);
  CSGetFriendRoomList& operator=(const CSGetFriendRoomList&);
  CSGetFriendRoomList() : startIndex(0), count(0) {
  }

  virtual ~CSGetFriendRoomList() throw();
  int32_t startIndex;
  int32_t count;

  _CSGetFriendRoomList__isset __isset;

  void __set_startIndex(const int32_t val);

  void __set_count(const int32_t val);

  bool operator == (const CSGetFriendRoomList & rhs) const
  {
    if (!(startIndex == rhs.startIndex))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const CSGetFriendRoomList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSGetFriendRoomList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSGetFriendRoomList &a, CSGetFriendRoomList &b);

inline std::ostream& operator<<(std::ostream& out, const CSGetFriendRoomList& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCGetFriendRoomList__isset {
  _SCGetFriendRoomList__isset() : roomList(false), totalCount(false) {}
  bool roomList :1;
  bool totalCount :1;
} _SCGetFriendRoomList__isset;

class SCGetFriendRoomList : public virtual ::apache::thrift::TBase {
 public:

  SCGetFriendRoomList(const SCGetFriendRoomList&);
  SCGetFriendRoomList& operator=(const SCGetFriendRoomList&);
  SCGetFriendRoomList() : totalCount(0) {
  }

  virtual ~SCGetFriendRoomList() throw();
  std::vector< ::RoomInfo>  roomList;
  int32_t totalCount;

  _SCGetFriendRoomList__isset __isset;

  void __set_roomList(const std::vector< ::RoomInfo> & val);

  void __set_totalCount(const int32_t val);

  bool operator == (const SCGetFriendRoomList & rhs) const
  {
    if (!(roomList == rhs.roomList))
      return false;
    if (!(totalCount == rhs.totalCount))
      return false;
    return true;
  }
  bool operator != (const SCGetFriendRoomList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCGetFriendRoomList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCGetFriendRoomList &a, SCGetFriendRoomList &b);

inline std::ostream& operator<<(std::ostream& out, const SCGetFriendRoomList& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSGetRoomList__isset {
  _CSGetRoomList__isset() : startIndex(false), count(false) {}
  bool startIndex :1;
  bool count :1;
} _CSGetRoomList__isset;

class CSGetRoomList : public virtual ::apache::thrift::TBase {
 public:

  CSGetRoomList(const CSGetRoomList&);
  CSGetRoomList& operator=(const CSGetRoomList&);
  CSGetRoomList() : startIndex(0), count(0) {
  }

  virtual ~CSGetRoomList() throw();
  int32_t startIndex;
  int32_t count;

  _CSGetRoomList__isset __isset;

  void __set_startIndex(const int32_t val);

  void __set_count(const int32_t val);

  bool operator == (const CSGetRoomList & rhs) const
  {
    if (!(startIndex == rhs.startIndex))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const CSGetRoomList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSGetRoomList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSGetRoomList &a, CSGetRoomList &b);

inline std::ostream& operator<<(std::ostream& out, const CSGetRoomList& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCGetRoomList__isset {
  _SCGetRoomList__isset() : roomList(false), totalCount(false) {}
  bool roomList :1;
  bool totalCount :1;
} _SCGetRoomList__isset;

class SCGetRoomList : public virtual ::apache::thrift::TBase {
 public:

  SCGetRoomList(const SCGetRoomList&);
  SCGetRoomList& operator=(const SCGetRoomList&);
  SCGetRoomList() : totalCount(0) {
  }

  virtual ~SCGetRoomList() throw();
  std::vector< ::RoomInfo>  roomList;
  int32_t totalCount;

  _SCGetRoomList__isset __isset;

  void __set_roomList(const std::vector< ::RoomInfo> & val);

  void __set_totalCount(const int32_t val);

  bool operator == (const SCGetRoomList & rhs) const
  {
    if (!(roomList == rhs.roomList))
      return false;
    if (!(totalCount == rhs.totalCount))
      return false;
    return true;
  }
  bool operator != (const SCGetRoomList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCGetRoomList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCGetRoomList &a, SCGetRoomList &b);

inline std::ostream& operator<<(std::ostream& out, const SCGetRoomList& obj)
{
  obj.printTo(out);
  return out;
}


class CSExitGame : public virtual ::apache::thrift::TBase {
 public:

  CSExitGame(const CSExitGame&);
  CSExitGame& operator=(const CSExitGame&);
  CSExitGame() {
  }

  virtual ~CSExitGame() throw();

  bool operator == (const CSExitGame & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CSExitGame &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSExitGame & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSExitGame &a, CSExitGame &b);

inline std::ostream& operator<<(std::ostream& out, const CSExitGame& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCExitGame__isset {
  _SCExitGame__isset() : userId(false) {}
  bool userId :1;
} _SCExitGame__isset;

class SCExitGame : public virtual ::apache::thrift::TBase {
 public:

  SCExitGame(const SCExitGame&);
  SCExitGame& operator=(const SCExitGame&);
  SCExitGame() : userId(0) {
  }

  virtual ~SCExitGame() throw();
  int64_t userId;

  _SCExitGame__isset __isset;

  void __set_userId(const int64_t val);

  bool operator == (const SCExitGame & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    return true;
  }
  bool operator != (const SCExitGame &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCExitGame & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCExitGame &a, SCExitGame &b);

inline std::ostream& operator<<(std::ostream& out, const SCExitGame& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSUploadVoice__isset {
  _CSUploadVoice__isset() : index(false), url(false) {}
  bool index :1;
  bool url :1;
} _CSUploadVoice__isset;

class CSUploadVoice : public virtual ::apache::thrift::TBase {
 public:

  CSUploadVoice(const CSUploadVoice&);
  CSUploadVoice& operator=(const CSUploadVoice&);
  CSUploadVoice() : index(0), url() {
  }

  virtual ~CSUploadVoice() throw();
  int32_t index;
  std::string url;

  _CSUploadVoice__isset __isset;

  void __set_index(const int32_t val);

  void __set_url(const std::string& val);

  bool operator == (const CSUploadVoice & rhs) const
  {
    if (!(index == rhs.index))
      return false;
    if (!(url == rhs.url))
      return false;
    return true;
  }
  bool operator != (const CSUploadVoice &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSUploadVoice & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSUploadVoice &a, CSUploadVoice &b);

inline std::ostream& operator<<(std::ostream& out, const CSUploadVoice& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCUploadVoice__isset {
  _SCUploadVoice__isset() : result(false) {}
  bool result :1;
} _SCUploadVoice__isset;

class SCUploadVoice : public virtual ::apache::thrift::TBase {
 public:

  SCUploadVoice(const SCUploadVoice&);
  SCUploadVoice& operator=(const SCUploadVoice&);
  SCUploadVoice() : result(0) {
  }

  virtual ~SCUploadVoice() throw();
  int32_t result;

  _SCUploadVoice__isset __isset;

  void __set_result(const int32_t val);

  bool operator == (const SCUploadVoice & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const SCUploadVoice &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCUploadVoice & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCUploadVoice &a, SCUploadVoice &b);

inline std::ostream& operator<<(std::ostream& out, const SCUploadVoice& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSGetVoice__isset {
  _CSGetVoice__isset() : roomId(false), index(false) {}
  bool roomId :1;
  bool index :1;
} _CSGetVoice__isset;

class CSGetVoice : public virtual ::apache::thrift::TBase {
 public:

  CSGetVoice(const CSGetVoice&);
  CSGetVoice& operator=(const CSGetVoice&);
  CSGetVoice() : roomId(0), index(0) {
  }

  virtual ~CSGetVoice() throw();
  int32_t roomId;
  int32_t index;

  _CSGetVoice__isset __isset;

  void __set_roomId(const int32_t val);

  void __set_index(const int32_t val);

  bool operator == (const CSGetVoice & rhs) const
  {
    if (!(roomId == rhs.roomId))
      return false;
    if (!(index == rhs.index))
      return false;
    return true;
  }
  bool operator != (const CSGetVoice &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSGetVoice & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSGetVoice &a, CSGetVoice &b);

inline std::ostream& operator<<(std::ostream& out, const CSGetVoice& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCGetVoice__isset {
  _SCGetVoice__isset() : url(false) {}
  bool url :1;
} _SCGetVoice__isset;

class SCGetVoice : public virtual ::apache::thrift::TBase {
 public:

  SCGetVoice(const SCGetVoice&);
  SCGetVoice& operator=(const SCGetVoice&);
  SCGetVoice() : url() {
  }

  virtual ~SCGetVoice() throw();
  std::string url;

  _SCGetVoice__isset __isset;

  void __set_url(const std::string& val);

  bool operator == (const SCGetVoice & rhs) const
  {
    if (!(url == rhs.url))
      return false;
    return true;
  }
  bool operator != (const SCGetVoice &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCGetVoice & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCGetVoice &a, SCGetVoice &b);

inline std::ostream& operator<<(std::ostream& out, const SCGetVoice& obj)
{
  obj.printTo(out);
  return out;
}


class SClientClose : public virtual ::apache::thrift::TBase {
 public:

  SClientClose(const SClientClose&);
  SClientClose& operator=(const SClientClose&);
  SClientClose() {
  }

  virtual ~SClientClose() throw();

  bool operator == (const SClientClose & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SClientClose &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SClientClose & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SClientClose &a, SClientClose &b);

inline std::ostream& operator<<(std::ostream& out, const SClientClose& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCFriendOnlineInfo__isset {
  _SCFriendOnlineInfo__isset() : onlineStatus(false), playerData(false) {}
  bool onlineStatus :1;
  bool playerData :1;
} _SCFriendOnlineInfo__isset;

class SCFriendOnlineInfo : public virtual ::apache::thrift::TBase {
 public:

  SCFriendOnlineInfo(const SCFriendOnlineInfo&);
  SCFriendOnlineInfo& operator=(const SCFriendOnlineInfo&);
  SCFriendOnlineInfo() : onlineStatus(0) {
  }

  virtual ~SCFriendOnlineInfo() throw();
  bool onlineStatus;
   ::PlayerData playerData;

  _SCFriendOnlineInfo__isset __isset;

  void __set_onlineStatus(const bool val);

  void __set_playerData(const  ::PlayerData& val);

  bool operator == (const SCFriendOnlineInfo & rhs) const
  {
    if (!(onlineStatus == rhs.onlineStatus))
      return false;
    if (!(playerData == rhs.playerData))
      return false;
    return true;
  }
  bool operator != (const SCFriendOnlineInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCFriendOnlineInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCFriendOnlineInfo &a, SCFriendOnlineInfo &b);

inline std::ostream& operator<<(std::ostream& out, const SCFriendOnlineInfo& obj)
{
  obj.printTo(out);
  return out;
}


class CSStartRecord : public virtual ::apache::thrift::TBase {
 public:

  CSStartRecord(const CSStartRecord&);
  CSStartRecord& operator=(const CSStartRecord&);
  CSStartRecord() {
  }

  virtual ~CSStartRecord() throw();

  bool operator == (const CSStartRecord & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CSStartRecord &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSStartRecord & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSStartRecord &a, CSStartRecord &b);

inline std::ostream& operator<<(std::ostream& out, const CSStartRecord& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCStartRecord__isset {
  _SCStartRecord__isset() : result(false), userId(false) {}
  bool result :1;
  bool userId :1;
} _SCStartRecord__isset;

class SCStartRecord : public virtual ::apache::thrift::TBase {
 public:

  SCStartRecord(const SCStartRecord&);
  SCStartRecord& operator=(const SCStartRecord&);
  SCStartRecord() : result(0), userId(0) {
  }

  virtual ~SCStartRecord() throw();
  int32_t result;
  int64_t userId;

  _SCStartRecord__isset __isset;

  void __set_result(const int32_t val);

  void __set_userId(const int64_t val);

  bool operator == (const SCStartRecord & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(userId == rhs.userId))
      return false;
    return true;
  }
  bool operator != (const SCStartRecord &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCStartRecord & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCStartRecord &a, SCStartRecord &b);

inline std::ostream& operator<<(std::ostream& out, const SCStartRecord& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSEndRecord__isset {
  _CSEndRecord__isset() : url(false), timeLength(false) {}
  bool url :1;
  bool timeLength :1;
} _CSEndRecord__isset;

class CSEndRecord : public virtual ::apache::thrift::TBase {
 public:

  CSEndRecord(const CSEndRecord&);
  CSEndRecord& operator=(const CSEndRecord&);
  CSEndRecord() : url(), timeLength(0) {
  }

  virtual ~CSEndRecord() throw();
  std::string url;
  double timeLength;

  _CSEndRecord__isset __isset;

  void __set_url(const std::string& val);

  void __set_timeLength(const double val);

  bool operator == (const CSEndRecord & rhs) const
  {
    if (!(url == rhs.url))
      return false;
    if (!(timeLength == rhs.timeLength))
      return false;
    return true;
  }
  bool operator != (const CSEndRecord &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSEndRecord & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSEndRecord &a, CSEndRecord &b);

inline std::ostream& operator<<(std::ostream& out, const CSEndRecord& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCEndRecord__isset {
  _SCEndRecord__isset() : url(false), timeLength(false) {}
  bool url :1;
  bool timeLength :1;
} _SCEndRecord__isset;

class SCEndRecord : public virtual ::apache::thrift::TBase {
 public:

  SCEndRecord(const SCEndRecord&);
  SCEndRecord& operator=(const SCEndRecord&);
  SCEndRecord() : url(), timeLength(0) {
  }

  virtual ~SCEndRecord() throw();
  std::string url;
  double timeLength;

  _SCEndRecord__isset __isset;

  void __set_url(const std::string& val);

  void __set_timeLength(const double val);

  bool operator == (const SCEndRecord & rhs) const
  {
    if (!(url == rhs.url))
      return false;
    if (!(timeLength == rhs.timeLength))
      return false;
    return true;
  }
  bool operator != (const SCEndRecord &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCEndRecord & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCEndRecord &a, SCEndRecord &b);

inline std::ostream& operator<<(std::ostream& out, const SCEndRecord& obj)
{
  obj.printTo(out);
  return out;
}


class CSEndPlayRecord : public virtual ::apache::thrift::TBase {
 public:

  CSEndPlayRecord(const CSEndPlayRecord&);
  CSEndPlayRecord& operator=(const CSEndPlayRecord&);
  CSEndPlayRecord() {
  }

  virtual ~CSEndPlayRecord() throw();

  bool operator == (const CSEndPlayRecord & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CSEndPlayRecord &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSEndPlayRecord & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSEndPlayRecord &a, CSEndPlayRecord &b);

inline std::ostream& operator<<(std::ostream& out, const CSEndPlayRecord& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCEndPlayRecord__isset {
  _SCEndPlayRecord__isset() : result(false) {}
  bool result :1;
} _SCEndPlayRecord__isset;

class SCEndPlayRecord : public virtual ::apache::thrift::TBase {
 public:

  SCEndPlayRecord(const SCEndPlayRecord&);
  SCEndPlayRecord& operator=(const SCEndPlayRecord&);
  SCEndPlayRecord() : result(0) {
  }

  virtual ~SCEndPlayRecord() throw();
  int32_t result;

  _SCEndPlayRecord__isset __isset;

  void __set_result(const int32_t val);

  bool operator == (const SCEndPlayRecord & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const SCEndPlayRecord &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCEndPlayRecord & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCEndPlayRecord &a, SCEndPlayRecord &b);

inline std::ostream& operator<<(std::ostream& out, const SCEndPlayRecord& obj)
{
  obj.printTo(out);
  return out;
}



#endif
