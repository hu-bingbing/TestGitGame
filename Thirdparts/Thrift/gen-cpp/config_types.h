/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef config_TYPES_H
#define config_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class PlayerAttrConfig;

typedef struct _PlayerAttrConfig__isset {
  _PlayerAttrConfig__isset() : maxHp(false), moveSpeed(false), jumpSpeed(false) {}
  bool maxHp :1;
  bool moveSpeed :1;
  bool jumpSpeed :1;
} _PlayerAttrConfig__isset;

class PlayerAttrConfig : public virtual ::apache::thrift::TBase {
 public:

  PlayerAttrConfig(const PlayerAttrConfig&);
  PlayerAttrConfig& operator=(const PlayerAttrConfig&);
  PlayerAttrConfig() : maxHp(0), moveSpeed(0), jumpSpeed(0) {
  }

  virtual ~PlayerAttrConfig() throw();
  int32_t maxHp;
  int32_t moveSpeed;
  int32_t jumpSpeed;

  _PlayerAttrConfig__isset __isset;

  void __set_maxHp(const int32_t val);

  void __set_moveSpeed(const int32_t val);

  void __set_jumpSpeed(const int32_t val);

  bool operator == (const PlayerAttrConfig & rhs) const
  {
    if (!(maxHp == rhs.maxHp))
      return false;
    if (!(moveSpeed == rhs.moveSpeed))
      return false;
    if (!(jumpSpeed == rhs.jumpSpeed))
      return false;
    return true;
  }
  bool operator != (const PlayerAttrConfig &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlayerAttrConfig & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PlayerAttrConfig &a, PlayerAttrConfig &b);

inline std::ostream& operator<<(std::ostream& out, const PlayerAttrConfig& obj)
{
  obj.printTo(out);
  return out;
}



#endif
