/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "cs_struct_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>



int _kStartGameResultValues[] = {
  StartGameResult::ESuccess,
  StartGameResult::ERoomGameIsRunning
};
const char* _kStartGameResultNames[] = {
  "ESuccess",
  "ERoomGameIsRunning"
};
const std::map<int, const char*> _StartGameResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kStartGameResultValues, _kStartGameResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCreateRoomResultValues[] = {
  CreateRoomResult::ESuccess,
  CreateRoomResult::ECreateRoomFail,
  CreateRoomResult::ECreateRoomNotOkStatus
};
const char* _kCreateRoomResultNames[] = {
  "ESuccess",
  "ECreateRoomFail",
  "ECreateRoomNotOkStatus"
};
const std::map<int, const char*> _CreateRoomResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kCreateRoomResultValues, _kCreateRoomResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kJoinRoomResultValues[] = {
  JoinRoomResult::ESuccess,
  JoinRoomResult::EJoinRoomFail,
  JoinRoomResult::EAlreadyInRoom,
  JoinRoomResult::ENotInRoom
};
const char* _kJoinRoomResultNames[] = {
  "ESuccess",
  "EJoinRoomFail",
  "EAlreadyInRoom",
  "ENotInRoom"
};
const std::map<int, const char*> _JoinRoomResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kJoinRoomResultValues, _kJoinRoomResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kExitRoomResultValues[] = {
  ExitRoomResult::ESuccess,
  ExitRoomResult::EExitRoomFail
};
const char* _kExitRoomResultNames[] = {
  "ESuccess",
  "EExitRoomFail"
};
const std::map<int, const char*> _ExitRoomResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kExitRoomResultValues, _kExitRoomResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kAddFriendResultValues[] = {
  AddFriendResult::ESuccess,
  AddFriendResult::EAddFriendFail,
  AddFriendResult::EDoNotAddSelf,
  AddFriendResult::EAddFriendRepeat
};
const char* _kAddFriendResultNames[] = {
  "ESuccess",
  "EAddFriendFail",
  "EDoNotAddSelf",
  "EAddFriendRepeat"
};
const std::map<int, const char*> _AddFriendResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kAddFriendResultValues, _kAddFriendResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kDelFriendResultValues[] = {
  DelFriendResult::ESuccess,
  DelFriendResult::EDelFriendFail,
  DelFriendResult::EDoNotDelSelf,
  DelFriendResult::EDelFriendNotExist
};
const char* _kDelFriendResultNames[] = {
  "ESuccess",
  "EDelFriendFail",
  "EDoNotDelSelf",
  "EDelFriendNotExist"
};
const std::map<int, const char*> _DelFriendResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kDelFriendResultValues, _kDelFriendResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kReqDlVoiceResResultValues[] = {
  ReqDlVoiceResResult::ESuccess,
  ReqDlVoiceResResult::EReqDlVoiceResFail,
  ReqDlVoiceResResult::EUpdateVoiceResFail
};
const char* _kReqDlVoiceResResultNames[] = {
  "ESuccess",
  "EReqDlVoiceResFail",
  "EUpdateVoiceResFail"
};
const std::map<int, const char*> _ReqDlVoiceResResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kReqDlVoiceResResultValues, _kReqDlVoiceResResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSetNicknameResultValues[] = {
  SetNicknameResult::ESuccess,
  SetNicknameResult::ESetNicknameFail,
  SetNicknameResult::ENicknameIsEmpty,
  SetNicknameResult::EIconIdUndefined,
  SetNicknameResult::ENicknameOverLength
};
const char* _kSetNicknameResultNames[] = {
  "ESuccess",
  "ESetNicknameFail",
  "ENicknameIsEmpty",
  "EIconIdUndefined",
  "ENicknameOverLength"
};
const std::map<int, const char*> _SetNicknameResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kSetNicknameResultValues, _kSetNicknameResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCSLoginResultValues[] = {
  CSLoginResult::ESuccess,
  CSLoginResult::EAccountNotExist,
  CSLoginResult::EAccountError,
  CSLoginResult::EPasswordError,
  CSLoginResult::EAccountAlreadyLogged
};
const char* _kCSLoginResultNames[] = {
  "ESuccess",
  "EAccountNotExist",
  "EAccountError",
  "EPasswordError",
  "EAccountAlreadyLogged"
};
const std::map<int, const char*> _CSLoginResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kCSLoginResultValues, _kCSLoginResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCSRegisterResultValues[] = {
  CSRegisterResult::ESuccess,
  CSRegisterResult::EAccountError,
  CSRegisterResult::EPasswordError,
  CSRegisterResult::EAccountAlreadyExist
};
const char* _kCSRegisterResultNames[] = {
  "ESuccess",
  "EAccountError",
  "EPasswordError",
  "EAccountAlreadyExist"
};
const std::map<int, const char*> _CSRegisterResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kCSRegisterResultValues, _kCSRegisterResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCSTouristResultValues[] = {
  CSTouristResult::ESuccess,
  CSTouristResult::EAccountAlreadyLogged
};
const char* _kCSTouristResultNames[] = {
  "ESuccess",
  "EAccountAlreadyLogged"
};
const std::map<int, const char*> _CSTouristResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kCSTouristResultValues, _kCSTouristResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCSDisconnectResultValues[] = {
  CSDisconnectResult::ESuccess
};
const char* _kCSDisconnectResultNames[] = {
  "ESuccess"
};
const std::map<int, const char*> _CSDisconnectResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kCSDisconnectResultValues, _kCSDisconnectResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kLDLoginResultValues[] = {
  LDLoginResult::ESuccess,
  LDLoginResult::EAccountNotExist,
  LDLoginResult::EPasswordError
};
const char* _kLDLoginResultNames[] = {
  "ESuccess",
  "EAccountNotExist",
  "EPasswordError"
};
const std::map<int, const char*> _LDLoginResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kLDLoginResultValues, _kLDLoginResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kLDRegisterResultValues[] = {
  LDRegisterResult::ESuccess,
  LDRegisterResult::EAccountAlreadyExist
};
const char* _kLDRegisterResultNames[] = {
  "ESuccess",
  "EAccountAlreadyExist"
};
const std::map<int, const char*> _LDRegisterResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kLDRegisterResultValues, _kLDRegisterResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kLDTouristResultValues[] = {
  LDTouristResult::ESuccess
};
const char* _kLDTouristResultNames[] = {
  "ESuccess"
};
const std::map<int, const char*> _LDTouristResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kLDTouristResultValues, _kLDTouristResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kLDDisconnectResultValues[] = {
  LDDisconnectResult::ESuccess
};
const char* _kLDDisconnectResultNames[] = {
  "ESuccess"
};
const std::map<int, const char*> _LDDisconnectResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kLDDisconnectResultValues, _kLDDisconnectResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRDAddFriendResultValues[] = {
  RDAddFriendResult::ESuccess,
  RDAddFriendResult::EUserNotExist,
  RDAddFriendResult::ERoleNotExist,
  RDAddFriendResult::EUserError
};
const char* _kRDAddFriendResultNames[] = {
  "ESuccess",
  "EUserNotExist",
  "ERoleNotExist",
  "EUserError"
};
const std::map<int, const char*> _RDAddFriendResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kRDAddFriendResultValues, _kRDAddFriendResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRDDelFriendResultValues[] = {
  RDDelFriendResult::ESuccess,
  RDDelFriendResult::EUserError
};
const char* _kRDDelFriendResultNames[] = {
  "ESuccess",
  "EUserError"
};
const std::map<int, const char*> _RDDelFriendResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kRDDelFriendResultValues, _kRDDelFriendResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRDFindByNickNameResultValues[] = {
  RDFindByNickNameResult::ESuccess,
  RDFindByNickNameResult::EUserError
};
const char* _kRDFindByNickNameResultNames[] = {
  "ESuccess",
  "EUserError"
};
const std::map<int, const char*> _RDFindByNickNameResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kRDFindByNickNameResultValues, _kRDFindByNickNameResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRDGetFriendListResultValues[] = {
  RDGetFriendListResult::ESuccess,
  RDGetFriendListResult::EUserError,
  RDGetFriendListResult::ERoleError
};
const char* _kRDGetFriendListResultNames[] = {
  "ESuccess",
  "EUserError",
  "ERoleError"
};
const std::map<int, const char*> _RDGetFriendListResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kRDGetFriendListResultValues, _kRDGetFriendListResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRDCreateRoomResultValues[] = {
  RDCreateRoomResult::ESuccess,
  RDCreateRoomResult::EUserError
};
const char* _kRDCreateRoomResultNames[] = {
  "ESuccess",
  "EUserError"
};
const std::map<int, const char*> _RDCreateRoomResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kRDCreateRoomResultValues, _kRDCreateRoomResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRDGetReplayResultValues[] = {
  RDGetReplayResult::ESuccess,
  RDGetReplayResult::ERoomError
};
const char* _kRDGetReplayResultNames[] = {
  "ESuccess",
  "ERoomError"
};
const std::map<int, const char*> _RDGetReplayResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kRDGetReplayResultValues, _kRDGetReplayResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRDGetReplayInfoResultValues[] = {
  RDGetReplayInfoResult::ESuccess,
  RDGetReplayInfoResult::ERoomError
};
const char* _kRDGetReplayInfoResultNames[] = {
  "ESuccess",
  "ERoomError"
};
const std::map<int, const char*> _RDGetReplayInfoResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kRDGetReplayInfoResultValues, _kRDGetReplayInfoResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRDGetVoiceResultValues[] = {
  RDGetVoiceResult::ESuccess,
  RDGetVoiceResult::ERoomError
};
const char* _kRDGetVoiceResultNames[] = {
  "ESuccess",
  "ERoomError"
};
const std::map<int, const char*> _RDGetVoiceResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kRDGetVoiceResultValues, _kRDGetVoiceResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRDRandomNicknameResultValues[] = {
  RDRandomNicknameResult::ESuccess
};
const char* _kRDRandomNicknameResultNames[] = {
  "ESuccess"
};
const std::map<int, const char*> _RDRandomNicknameResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kRDRandomNicknameResultValues, _kRDRandomNicknameResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRDSaveFrameResultValues[] = {
  RDSaveFrameResult::ESuccess,
  RDSaveFrameResult::ERoomError
};
const char* _kRDSaveFrameResultNames[] = {
  "ESuccess",
  "ERoomError"
};
const std::map<int, const char*> _RDSaveFrameResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kRDSaveFrameResultValues, _kRDSaveFrameResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRDSaveRoomDataResultValues[] = {
  RDSaveRoomDataResult::ESuccess,
  RDSaveRoomDataResult::ERoomError
};
const char* _kRDSaveRoomDataResultNames[] = {
  "ESuccess",
  "ERoomError"
};
const std::map<int, const char*> _RDSaveRoomDataResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kRDSaveRoomDataResultValues, _kRDSaveRoomDataResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRDSetNicknameResultValues[] = {
  RDSetNicknameResult::ESuccess,
  RDSetNicknameResult::EUserError,
  RDSetNicknameResult::ENicknameAlreadyExist
};
const char* _kRDSetNicknameResultNames[] = {
  "ESuccess",
  "EUserError",
  "ENicknameAlreadyExist"
};
const std::map<int, const char*> _RDSetNicknameResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kRDSetNicknameResultValues, _kRDSetNicknameResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kStartRecordResultValues[] = {
  StartRecordResult::ESuccess,
  StartRecordResult::ERecorderFail,
  StartRecordResult::ERecorderBusy
};
const char* _kStartRecordResultNames[] = {
  "ESuccess",
  "ERecorderFail",
  "ERecorderBusy"
};
const std::map<int, const char*> _StartRecordResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kStartRecordResultValues, _kStartRecordResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kEndPlayRecordResultValues[] = {
  EndPlayRecordResult::ESuccess,
  EndPlayRecordResult::EPlayRecordFail
};
const char* _kEndPlayRecordResultNames[] = {
  "ESuccess",
  "EPlayRecordFail"
};
const std::map<int, const char*> _EndPlayRecordResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kEndPlayRecordResultValues, _kEndPlayRecordResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kUserLoginModeValues[] = {
  UserLoginMode::EUnLogin,
  UserLoginMode::EAccount,
  UserLoginMode::ETourist
};
const char* _kUserLoginModeNames[] = {
  "EUnLogin",
  "EAccount",
  "ETourist"
};
const std::map<int, const char*> _UserLoginMode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kUserLoginModeValues, _kUserLoginModeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRoomStatusValues[] = {
  RoomStatus::STATUS_CLOSE,
  RoomStatus::STATUS_FULL,
  RoomStatus::STATUS_OK,
  RoomStatus::STATUS_START,
  RoomStatus::STATUS_READY,
  RoomStatus::STATUS_RUNNING,
  RoomStatus::STATUS_NONE
};
const char* _kRoomStatusNames[] = {
  "STATUS_CLOSE",
  "STATUS_FULL",
  "STATUS_OK",
  "STATUS_START",
  "STATUS_READY",
  "STATUS_RUNNING",
  "STATUS_NONE"
};
const std::map<int, const char*> _RoomStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kRoomStatusValues, _kRoomStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


Position::~Position() throw() {
}


void Position::__set_x(const double val) {
  this->x = val;
}

void Position::__set_y(const double val) {
  this->y = val;
}

void Position::__set_z(const double val) {
  this->z = val;
}

uint32_t Position::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->z);
          this->__isset.z = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Position::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Position");

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_DOUBLE, 20);
  xfer += oprot->writeDouble(this->y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("z", ::apache::thrift::protocol::T_DOUBLE, 30);
  xfer += oprot->writeDouble(this->z);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Position &a, Position &b) {
  using ::std::swap;
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.z, b.z);
  swap(a.__isset, b.__isset);
}

Position::Position(const Position& other0) {
  x = other0.x;
  y = other0.y;
  z = other0.z;
  __isset = other0.__isset;
}
Position& Position::operator=(const Position& other1) {
  x = other1.x;
  y = other1.y;
  z = other1.z;
  __isset = other1.__isset;
  return *this;
}
void Position::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Position(";
  out << "x=" << to_string(x);
  out << ", " << "y=" << to_string(y);
  out << ", " << "z=" << to_string(z);
  out << ")";
}


Rotation::~Rotation() throw() {
}


void Rotation::__set_x(const double val) {
  this->x = val;
}

void Rotation::__set_y(const double val) {
  this->y = val;
}

void Rotation::__set_z(const double val) {
  this->z = val;
}

void Rotation::__set_w(const double val) {
  this->w = val;
}

uint32_t Rotation::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->z);
          this->__isset.z = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->w);
          this->__isset.w = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Rotation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Rotation");

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_DOUBLE, 20);
  xfer += oprot->writeDouble(this->y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("z", ::apache::thrift::protocol::T_DOUBLE, 30);
  xfer += oprot->writeDouble(this->z);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("w", ::apache::thrift::protocol::T_DOUBLE, 40);
  xfer += oprot->writeDouble(this->w);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Rotation &a, Rotation &b) {
  using ::std::swap;
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.z, b.z);
  swap(a.w, b.w);
  swap(a.__isset, b.__isset);
}

Rotation::Rotation(const Rotation& other2) {
  x = other2.x;
  y = other2.y;
  z = other2.z;
  w = other2.w;
  __isset = other2.__isset;
}
Rotation& Rotation::operator=(const Rotation& other3) {
  x = other3.x;
  y = other3.y;
  z = other3.z;
  w = other3.w;
  __isset = other3.__isset;
  return *this;
}
void Rotation::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Rotation(";
  out << "x=" << to_string(x);
  out << ", " << "y=" << to_string(y);
  out << ", " << "z=" << to_string(z);
  out << ", " << "w=" << to_string(w);
  out << ")";
}


PlayerData::~PlayerData() throw() {
}


void PlayerData::__set_userId(const int64_t val) {
  this->userId = val;
}

void PlayerData::__set_userName(const std::string& val) {
  this->userName = val;
}

void PlayerData::__set_roleId(const int32_t val) {
  this->roleId = val;
}

void PlayerData::__set_nickname(const std::string& val) {
  this->nickname = val;
}

void PlayerData::__set_iconId(const int32_t val) {
  this->iconId = val;
}

uint32_t PlayerData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->userId);
          this->__isset.userId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userName);
          this->__isset.userName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->roleId);
          this->__isset.roleId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nickname);
          this->__isset.nickname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->iconId);
          this->__isset.iconId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PlayerData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PlayerData");

  xfer += oprot->writeFieldBegin("userId", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->userId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userName", ::apache::thrift::protocol::T_STRING, 20);
  xfer += oprot->writeString(this->userName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roleId", ::apache::thrift::protocol::T_I32, 25);
  xfer += oprot->writeI32(this->roleId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nickname", ::apache::thrift::protocol::T_STRING, 30);
  xfer += oprot->writeString(this->nickname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("iconId", ::apache::thrift::protocol::T_I32, 40);
  xfer += oprot->writeI32(this->iconId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PlayerData &a, PlayerData &b) {
  using ::std::swap;
  swap(a.userId, b.userId);
  swap(a.userName, b.userName);
  swap(a.roleId, b.roleId);
  swap(a.nickname, b.nickname);
  swap(a.iconId, b.iconId);
  swap(a.__isset, b.__isset);
}

PlayerData::PlayerData(const PlayerData& other4) {
  userId = other4.userId;
  userName = other4.userName;
  roleId = other4.roleId;
  nickname = other4.nickname;
  iconId = other4.iconId;
  __isset = other4.__isset;
}
PlayerData& PlayerData::operator=(const PlayerData& other5) {
  userId = other5.userId;
  userName = other5.userName;
  roleId = other5.roleId;
  nickname = other5.nickname;
  iconId = other5.iconId;
  __isset = other5.__isset;
  return *this;
}
void PlayerData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PlayerData(";
  out << "userId=" << to_string(userId);
  out << ", " << "userName=" << to_string(userName);
  out << ", " << "roleId=" << to_string(roleId);
  out << ", " << "nickname=" << to_string(nickname);
  out << ", " << "iconId=" << to_string(iconId);
  out << ")";
}


RoleData::~RoleData() throw() {
}


void RoleData::__set_roleId(const int32_t val) {
  this->roleId = val;
}

void RoleData::__set_nickname(const std::string& val) {
  this->nickname = val;
}

void RoleData::__set_isSetNickname(const bool val) {
  this->isSetNickname = val;
}

void RoleData::__set_iconId(const int32_t val) {
  this->iconId = val;
}

void RoleData::__set_friendList(const std::vector<PlayerData> & val) {
  this->friendList = val;
}

void RoleData::__set_friendOnlineStatusList(const std::vector<bool> & val) {
  this->friendOnlineStatusList = val;
}

uint32_t RoleData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->roleId);
          this->__isset.roleId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nickname);
          this->__isset.nickname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isSetNickname);
          this->__isset.isSetNickname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->iconId);
          this->__isset.iconId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 100:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->friendList.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readListBegin(_etype9, _size6);
            this->friendList.resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              xfer += this->friendList[_i10].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.friendList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 110:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->friendOnlineStatusList.clear();
            uint32_t _size11;
            ::apache::thrift::protocol::TType _etype14;
            xfer += iprot->readListBegin(_etype14, _size11);
            this->friendOnlineStatusList.resize(_size11);
            uint32_t _i15;
            for (_i15 = 0; _i15 < _size11; ++_i15)
            {
              xfer += iprot->readBool(this->friendOnlineStatusList[_i15]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.friendOnlineStatusList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RoleData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RoleData");

  xfer += oprot->writeFieldBegin("roleId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->roleId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nickname", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->nickname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isSetNickname", ::apache::thrift::protocol::T_BOOL, 20);
  xfer += oprot->writeBool(this->isSetNickname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("iconId", ::apache::thrift::protocol::T_I32, 30);
  xfer += oprot->writeI32(this->iconId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("friendList", ::apache::thrift::protocol::T_LIST, 100);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->friendList.size()));
    std::vector<PlayerData> ::const_iterator _iter16;
    for (_iter16 = this->friendList.begin(); _iter16 != this->friendList.end(); ++_iter16)
    {
      xfer += (*_iter16).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("friendOnlineStatusList", ::apache::thrift::protocol::T_LIST, 110);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BOOL, static_cast<uint32_t>(this->friendOnlineStatusList.size()));
    std::vector<bool> ::const_iterator _iter17;
    for (_iter17 = this->friendOnlineStatusList.begin(); _iter17 != this->friendOnlineStatusList.end(); ++_iter17)
    {
      xfer += oprot->writeBool((*_iter17));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RoleData &a, RoleData &b) {
  using ::std::swap;
  swap(a.roleId, b.roleId);
  swap(a.nickname, b.nickname);
  swap(a.isSetNickname, b.isSetNickname);
  swap(a.iconId, b.iconId);
  swap(a.friendList, b.friendList);
  swap(a.friendOnlineStatusList, b.friendOnlineStatusList);
  swap(a.__isset, b.__isset);
}

RoleData::RoleData(const RoleData& other18) {
  roleId = other18.roleId;
  nickname = other18.nickname;
  isSetNickname = other18.isSetNickname;
  iconId = other18.iconId;
  friendList = other18.friendList;
  friendOnlineStatusList = other18.friendOnlineStatusList;
  __isset = other18.__isset;
}
RoleData& RoleData::operator=(const RoleData& other19) {
  roleId = other19.roleId;
  nickname = other19.nickname;
  isSetNickname = other19.isSetNickname;
  iconId = other19.iconId;
  friendList = other19.friendList;
  friendOnlineStatusList = other19.friendOnlineStatusList;
  __isset = other19.__isset;
  return *this;
}
void RoleData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RoleData(";
  out << "roleId=" << to_string(roleId);
  out << ", " << "nickname=" << to_string(nickname);
  out << ", " << "isSetNickname=" << to_string(isSetNickname);
  out << ", " << "iconId=" << to_string(iconId);
  out << ", " << "friendList=" << to_string(friendList);
  out << ", " << "friendOnlineStatusList=" << to_string(friendOnlineStatusList);
  out << ")";
}


ReplayData::~ReplayData() throw() {
}


void ReplayData::__set_roomId(const int32_t val) {
  this->roomId = val;
}

void ReplayData::__set_createTime(const int64_t val) {
  this->createTime = val;
}

uint32_t ReplayData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->roomId);
          this->__isset.roomId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createTime);
          this->__isset.createTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReplayData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ReplayData");

  xfer += oprot->writeFieldBegin("roomId", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->roomId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createTime", ::apache::thrift::protocol::T_I64, 20);
  xfer += oprot->writeI64(this->createTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ReplayData &a, ReplayData &b) {
  using ::std::swap;
  swap(a.roomId, b.roomId);
  swap(a.createTime, b.createTime);
  swap(a.__isset, b.__isset);
}

ReplayData::ReplayData(const ReplayData& other20) {
  roomId = other20.roomId;
  createTime = other20.createTime;
  __isset = other20.__isset;
}
ReplayData& ReplayData::operator=(const ReplayData& other21) {
  roomId = other21.roomId;
  createTime = other21.createTime;
  __isset = other21.__isset;
  return *this;
}
void ReplayData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ReplayData(";
  out << "roomId=" << to_string(roomId);
  out << ", " << "createTime=" << to_string(createTime);
  out << ")";
}


UserData::~UserData() throw() {
}


void UserData::__set_createTimeSec(const int32_t val) {
  this->createTimeSec = val;
}

void UserData::__set_createTimeMsec(const int32_t val) {
  this->createTimeMsec = val;
}

void UserData::__set_lastLoginSec(const int32_t val) {
  this->lastLoginSec = val;
}

void UserData::__set_lastLoginMsec(const int32_t val) {
  this->lastLoginMsec = val;
}

void UserData::__set_totalOnlineTime(const int32_t val) {
  this->totalOnlineTime = val;
}

void UserData::__set_userId(const int64_t val) {
  this->userId = val;
}

void UserData::__set_userAccount(const std::string& val) {
  this->userAccount = val;
}

void UserData::__set_userPassword(const std::string& val) {
  this->userPassword = val;
}

void UserData::__set_userEmail(const std::string& val) {
  this->userEmail = val;
}

void UserData::__set_userLoginMode(const int32_t val) {
  this->userLoginMode = val;
}

void UserData::__set_roleId(const int32_t val) {
  this->roleId = val;
}

void UserData::__set_roleData(const std::vector<RoleData> & val) {
  this->roleData = val;
}

void UserData::__set_replayList(const std::vector<ReplayData> & val) {
  this->replayList = val;
}

uint32_t UserData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->createTimeSec);
          this->__isset.createTimeSec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->createTimeMsec);
          this->__isset.createTimeMsec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lastLoginSec);
          this->__isset.lastLoginSec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lastLoginMsec);
          this->__isset.lastLoginMsec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalOnlineTime);
          this->__isset.totalOnlineTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 60:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->userId);
          this->__isset.userId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 70:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userAccount);
          this->__isset.userAccount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 71:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userPassword);
          this->__isset.userPassword = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 80:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userEmail);
          this->__isset.userEmail = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 90:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->userLoginMode);
          this->__isset.userLoginMode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 95:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->roleId);
          this->__isset.roleId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10000:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->roleData.clear();
            uint32_t _size22;
            ::apache::thrift::protocol::TType _etype25;
            xfer += iprot->readListBegin(_etype25, _size22);
            this->roleData.resize(_size22);
            uint32_t _i26;
            for (_i26 = 0; _i26 < _size22; ++_i26)
            {
              xfer += this->roleData[_i26].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.roleData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20000:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->replayList.clear();
            uint32_t _size27;
            ::apache::thrift::protocol::TType _etype30;
            xfer += iprot->readListBegin(_etype30, _size27);
            this->replayList.resize(_size27);
            uint32_t _i31;
            for (_i31 = 0; _i31 < _size27; ++_i31)
            {
              xfer += this->replayList[_i31].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.replayList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UserData");

  xfer += oprot->writeFieldBegin("createTimeSec", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->createTimeSec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createTimeMsec", ::apache::thrift::protocol::T_I32, 20);
  xfer += oprot->writeI32(this->createTimeMsec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastLoginSec", ::apache::thrift::protocol::T_I32, 30);
  xfer += oprot->writeI32(this->lastLoginSec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastLoginMsec", ::apache::thrift::protocol::T_I32, 40);
  xfer += oprot->writeI32(this->lastLoginMsec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalOnlineTime", ::apache::thrift::protocol::T_I32, 50);
  xfer += oprot->writeI32(this->totalOnlineTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userId", ::apache::thrift::protocol::T_I64, 60);
  xfer += oprot->writeI64(this->userId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userAccount", ::apache::thrift::protocol::T_STRING, 70);
  xfer += oprot->writeString(this->userAccount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userPassword", ::apache::thrift::protocol::T_STRING, 71);
  xfer += oprot->writeString(this->userPassword);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userEmail", ::apache::thrift::protocol::T_STRING, 80);
  xfer += oprot->writeString(this->userEmail);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userLoginMode", ::apache::thrift::protocol::T_I32, 90);
  xfer += oprot->writeI32(this->userLoginMode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roleId", ::apache::thrift::protocol::T_I32, 95);
  xfer += oprot->writeI32(this->roleId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roleData", ::apache::thrift::protocol::T_LIST, 10000);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->roleData.size()));
    std::vector<RoleData> ::const_iterator _iter32;
    for (_iter32 = this->roleData.begin(); _iter32 != this->roleData.end(); ++_iter32)
    {
      xfer += (*_iter32).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("replayList", ::apache::thrift::protocol::T_LIST, 20000);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->replayList.size()));
    std::vector<ReplayData> ::const_iterator _iter33;
    for (_iter33 = this->replayList.begin(); _iter33 != this->replayList.end(); ++_iter33)
    {
      xfer += (*_iter33).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UserData &a, UserData &b) {
  using ::std::swap;
  swap(a.createTimeSec, b.createTimeSec);
  swap(a.createTimeMsec, b.createTimeMsec);
  swap(a.lastLoginSec, b.lastLoginSec);
  swap(a.lastLoginMsec, b.lastLoginMsec);
  swap(a.totalOnlineTime, b.totalOnlineTime);
  swap(a.userId, b.userId);
  swap(a.userAccount, b.userAccount);
  swap(a.userPassword, b.userPassword);
  swap(a.userEmail, b.userEmail);
  swap(a.userLoginMode, b.userLoginMode);
  swap(a.roleId, b.roleId);
  swap(a.roleData, b.roleData);
  swap(a.replayList, b.replayList);
  swap(a.__isset, b.__isset);
}

UserData::UserData(const UserData& other34) {
  createTimeSec = other34.createTimeSec;
  createTimeMsec = other34.createTimeMsec;
  lastLoginSec = other34.lastLoginSec;
  lastLoginMsec = other34.lastLoginMsec;
  totalOnlineTime = other34.totalOnlineTime;
  userId = other34.userId;
  userAccount = other34.userAccount;
  userPassword = other34.userPassword;
  userEmail = other34.userEmail;
  userLoginMode = other34.userLoginMode;
  roleId = other34.roleId;
  roleData = other34.roleData;
  replayList = other34.replayList;
  __isset = other34.__isset;
}
UserData& UserData::operator=(const UserData& other35) {
  createTimeSec = other35.createTimeSec;
  createTimeMsec = other35.createTimeMsec;
  lastLoginSec = other35.lastLoginSec;
  lastLoginMsec = other35.lastLoginMsec;
  totalOnlineTime = other35.totalOnlineTime;
  userId = other35.userId;
  userAccount = other35.userAccount;
  userPassword = other35.userPassword;
  userEmail = other35.userEmail;
  userLoginMode = other35.userLoginMode;
  roleId = other35.roleId;
  roleData = other35.roleData;
  replayList = other35.replayList;
  __isset = other35.__isset;
  return *this;
}
void UserData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UserData(";
  out << "createTimeSec=" << to_string(createTimeSec);
  out << ", " << "createTimeMsec=" << to_string(createTimeMsec);
  out << ", " << "lastLoginSec=" << to_string(lastLoginSec);
  out << ", " << "lastLoginMsec=" << to_string(lastLoginMsec);
  out << ", " << "totalOnlineTime=" << to_string(totalOnlineTime);
  out << ", " << "userId=" << to_string(userId);
  out << ", " << "userAccount=" << to_string(userAccount);
  out << ", " << "userPassword=" << to_string(userPassword);
  out << ", " << "userEmail=" << to_string(userEmail);
  out << ", " << "userLoginMode=" << to_string(userLoginMode);
  out << ", " << "roleId=" << to_string(roleId);
  out << ", " << "roleData=" << to_string(roleData);
  out << ", " << "replayList=" << to_string(replayList);
  out << ")";
}


CommandData::~CommandData() throw() {
}


void CommandData::__set_type(const int32_t val) {
  this->type = val;
}

void CommandData::__set_localPlayerId(const int32_t val) {
  this->localPlayerId = val;
}

void CommandData::__set_dataLength(const int16_t val) {
  this->dataLength = val;
}

void CommandData::__set_data(const std::string& val) {
  this->data = val;
}

uint32_t CommandData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->localPlayerId);
          this->__isset.localPlayerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->dataLength);
          this->__isset.dataLength = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->data);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CommandData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CommandData");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("localPlayerId", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->localPlayerId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dataLength", ::apache::thrift::protocol::T_I16, 12);
  xfer += oprot->writeI16(this->dataLength);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRING, 20);
  xfer += oprot->writeBinary(this->data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CommandData &a, CommandData &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.localPlayerId, b.localPlayerId);
  swap(a.dataLength, b.dataLength);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

CommandData::CommandData(const CommandData& other36) {
  type = other36.type;
  localPlayerId = other36.localPlayerId;
  dataLength = other36.dataLength;
  data = other36.data;
  __isset = other36.__isset;
}
CommandData& CommandData::operator=(const CommandData& other37) {
  type = other37.type;
  localPlayerId = other37.localPlayerId;
  dataLength = other37.dataLength;
  data = other37.data;
  __isset = other37.__isset;
  return *this;
}
void CommandData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CommandData(";
  out << "type=" << to_string(type);
  out << ", " << "localPlayerId=" << to_string(localPlayerId);
  out << ", " << "dataLength=" << to_string(dataLength);
  out << ", " << "data=" << to_string(data);
  out << ")";
}


FrameData::~FrameData() throw() {
}


void FrameData::__set_frameIndex(const int32_t val) {
  this->frameIndex = val;
}

void FrameData::__set_commandList(const std::vector<CommandData> & val) {
  this->commandList = val;
}

uint32_t FrameData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->frameIndex);
          this->__isset.frameIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->commandList.clear();
            uint32_t _size38;
            ::apache::thrift::protocol::TType _etype41;
            xfer += iprot->readListBegin(_etype41, _size38);
            this->commandList.resize(_size38);
            uint32_t _i42;
            for (_i42 = 0; _i42 < _size38; ++_i42)
            {
              xfer += this->commandList[_i42].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.commandList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FrameData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FrameData");

  xfer += oprot->writeFieldBegin("frameIndex", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->frameIndex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("commandList", ::apache::thrift::protocol::T_LIST, 20);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->commandList.size()));
    std::vector<CommandData> ::const_iterator _iter43;
    for (_iter43 = this->commandList.begin(); _iter43 != this->commandList.end(); ++_iter43)
    {
      xfer += (*_iter43).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FrameData &a, FrameData &b) {
  using ::std::swap;
  swap(a.frameIndex, b.frameIndex);
  swap(a.commandList, b.commandList);
  swap(a.__isset, b.__isset);
}

FrameData::FrameData(const FrameData& other44) {
  frameIndex = other44.frameIndex;
  commandList = other44.commandList;
  __isset = other44.__isset;
}
FrameData& FrameData::operator=(const FrameData& other45) {
  frameIndex = other45.frameIndex;
  commandList = other45.commandList;
  __isset = other45.__isset;
  return *this;
}
void FrameData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FrameData(";
  out << "frameIndex=" << to_string(frameIndex);
  out << ", " << "commandList=" << to_string(commandList);
  out << ")";
}


VoiceData::~VoiceData() throw() {
}


void VoiceData::__set_index(const int32_t val) {
  this->index = val;
}

void VoiceData::__set_url(const std::string& val) {
  this->url = val;
}

uint32_t VoiceData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          this->__isset.url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VoiceData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("VoiceData");

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("url", ::apache::thrift::protocol::T_STRING, 20);
  xfer += oprot->writeString(this->url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(VoiceData &a, VoiceData &b) {
  using ::std::swap;
  swap(a.index, b.index);
  swap(a.url, b.url);
  swap(a.__isset, b.__isset);
}

VoiceData::VoiceData(const VoiceData& other46) {
  index = other46.index;
  url = other46.url;
  __isset = other46.__isset;
}
VoiceData& VoiceData::operator=(const VoiceData& other47) {
  index = other47.index;
  url = other47.url;
  __isset = other47.__isset;
  return *this;
}
void VoiceData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "VoiceData(";
  out << "index=" << to_string(index);
  out << ", " << "url=" << to_string(url);
  out << ")";
}


RoomData::~RoomData() throw() {
}


void RoomData::__set_createTimeSec(const int64_t val) {
  this->createTimeSec = val;
}

void RoomData::__set_destoryTimesec(const int64_t val) {
  this->destoryTimesec = val;
}

void RoomData::__set_id(const int32_t val) {
  this->id = val;
}

void RoomData::__set_identity(const std::string& val) {
  this->identity = val;
}

void RoomData::__set_playerMap(const std::map<int64_t, PlayerData> & val) {
  this->playerMap = val;
}

void RoomData::__set_playerExitTimeMap(const std::map<int64_t, int32_t> & val) {
  this->playerExitTimeMap = val;
}

void RoomData::__set_lastFrameIndex(const int32_t val) {
  this->lastFrameIndex = val;
}

void RoomData::__set_masterUserId(const int64_t val) {
  this->masterUserId = val;
}

void RoomData::__set_voiceMap(const std::map<int32_t, VoiceData> & val) {
  this->voiceMap = val;
}

uint32_t RoomData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createTimeSec);
          this->__isset.createTimeSec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->destoryTimesec);
          this->__isset.destoryTimesec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 60:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->identity);
          this->__isset.identity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 70:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->playerMap.clear();
            uint32_t _size48;
            ::apache::thrift::protocol::TType _ktype49;
            ::apache::thrift::protocol::TType _vtype50;
            xfer += iprot->readMapBegin(_ktype49, _vtype50, _size48);
            uint32_t _i52;
            for (_i52 = 0; _i52 < _size48; ++_i52)
            {
              int64_t _key53;
              xfer += iprot->readI64(_key53);
              PlayerData& _val54 = this->playerMap[_key53];
              xfer += _val54.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.playerMap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 71:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->playerExitTimeMap.clear();
            uint32_t _size55;
            ::apache::thrift::protocol::TType _ktype56;
            ::apache::thrift::protocol::TType _vtype57;
            xfer += iprot->readMapBegin(_ktype56, _vtype57, _size55);
            uint32_t _i59;
            for (_i59 = 0; _i59 < _size55; ++_i59)
            {
              int64_t _key60;
              xfer += iprot->readI64(_key60);
              int32_t& _val61 = this->playerExitTimeMap[_key60];
              xfer += iprot->readI32(_val61);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.playerExitTimeMap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 81:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lastFrameIndex);
          this->__isset.lastFrameIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 90:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->masterUserId);
          this->__isset.masterUserId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 100:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->voiceMap.clear();
            uint32_t _size62;
            ::apache::thrift::protocol::TType _ktype63;
            ::apache::thrift::protocol::TType _vtype64;
            xfer += iprot->readMapBegin(_ktype63, _vtype64, _size62);
            uint32_t _i66;
            for (_i66 = 0; _i66 < _size62; ++_i66)
            {
              int32_t _key67;
              xfer += iprot->readI32(_key67);
              VoiceData& _val68 = this->voiceMap[_key67];
              xfer += _val68.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.voiceMap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RoomData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RoomData");

  xfer += oprot->writeFieldBegin("createTimeSec", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->createTimeSec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("destoryTimesec", ::apache::thrift::protocol::T_I64, 30);
  xfer += oprot->writeI64(this->destoryTimesec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 50);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("identity", ::apache::thrift::protocol::T_STRING, 60);
  xfer += oprot->writeString(this->identity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("playerMap", ::apache::thrift::protocol::T_MAP, 70);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->playerMap.size()));
    std::map<int64_t, PlayerData> ::const_iterator _iter69;
    for (_iter69 = this->playerMap.begin(); _iter69 != this->playerMap.end(); ++_iter69)
    {
      xfer += oprot->writeI64(_iter69->first);
      xfer += _iter69->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("playerExitTimeMap", ::apache::thrift::protocol::T_MAP, 71);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->playerExitTimeMap.size()));
    std::map<int64_t, int32_t> ::const_iterator _iter70;
    for (_iter70 = this->playerExitTimeMap.begin(); _iter70 != this->playerExitTimeMap.end(); ++_iter70)
    {
      xfer += oprot->writeI64(_iter70->first);
      xfer += oprot->writeI32(_iter70->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastFrameIndex", ::apache::thrift::protocol::T_I32, 81);
  xfer += oprot->writeI32(this->lastFrameIndex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("masterUserId", ::apache::thrift::protocol::T_I64, 90);
  xfer += oprot->writeI64(this->masterUserId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("voiceMap", ::apache::thrift::protocol::T_MAP, 100);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->voiceMap.size()));
    std::map<int32_t, VoiceData> ::const_iterator _iter71;
    for (_iter71 = this->voiceMap.begin(); _iter71 != this->voiceMap.end(); ++_iter71)
    {
      xfer += oprot->writeI32(_iter71->first);
      xfer += _iter71->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RoomData &a, RoomData &b) {
  using ::std::swap;
  swap(a.createTimeSec, b.createTimeSec);
  swap(a.destoryTimesec, b.destoryTimesec);
  swap(a.id, b.id);
  swap(a.identity, b.identity);
  swap(a.playerMap, b.playerMap);
  swap(a.playerExitTimeMap, b.playerExitTimeMap);
  swap(a.lastFrameIndex, b.lastFrameIndex);
  swap(a.masterUserId, b.masterUserId);
  swap(a.voiceMap, b.voiceMap);
  swap(a.__isset, b.__isset);
}

RoomData::RoomData(const RoomData& other72) {
  createTimeSec = other72.createTimeSec;
  destoryTimesec = other72.destoryTimesec;
  id = other72.id;
  identity = other72.identity;
  playerMap = other72.playerMap;
  playerExitTimeMap = other72.playerExitTimeMap;
  lastFrameIndex = other72.lastFrameIndex;
  masterUserId = other72.masterUserId;
  voiceMap = other72.voiceMap;
  __isset = other72.__isset;
}
RoomData& RoomData::operator=(const RoomData& other73) {
  createTimeSec = other73.createTimeSec;
  destoryTimesec = other73.destoryTimesec;
  id = other73.id;
  identity = other73.identity;
  playerMap = other73.playerMap;
  playerExitTimeMap = other73.playerExitTimeMap;
  lastFrameIndex = other73.lastFrameIndex;
  masterUserId = other73.masterUserId;
  voiceMap = other73.voiceMap;
  __isset = other73.__isset;
  return *this;
}
void RoomData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RoomData(";
  out << "createTimeSec=" << to_string(createTimeSec);
  out << ", " << "destoryTimesec=" << to_string(destoryTimesec);
  out << ", " << "id=" << to_string(id);
  out << ", " << "identity=" << to_string(identity);
  out << ", " << "playerMap=" << to_string(playerMap);
  out << ", " << "playerExitTimeMap=" << to_string(playerExitTimeMap);
  out << ", " << "lastFrameIndex=" << to_string(lastFrameIndex);
  out << ", " << "masterUserId=" << to_string(masterUserId);
  out << ", " << "voiceMap=" << to_string(voiceMap);
  out << ")";
}


RoomInfo::~RoomInfo() throw() {
}


void RoomInfo::__set_roomId(const int32_t val) {
  this->roomId = val;
}

void RoomInfo::__set_roomName(const std::string& val) {
  this->roomName = val;
}

void RoomInfo::__set_playerCount(const int32_t val) {
  this->playerCount = val;
}

uint32_t RoomInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->roomId);
          this->__isset.roomId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->roomName);
          this->__isset.roomName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playerCount);
          this->__isset.playerCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RoomInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RoomInfo");

  xfer += oprot->writeFieldBegin("roomId", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->roomId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roomName", ::apache::thrift::protocol::T_STRING, 20);
  xfer += oprot->writeString(this->roomName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("playerCount", ::apache::thrift::protocol::T_I32, 30);
  xfer += oprot->writeI32(this->playerCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RoomInfo &a, RoomInfo &b) {
  using ::std::swap;
  swap(a.roomId, b.roomId);
  swap(a.roomName, b.roomName);
  swap(a.playerCount, b.playerCount);
  swap(a.__isset, b.__isset);
}

RoomInfo::RoomInfo(const RoomInfo& other74) {
  roomId = other74.roomId;
  roomName = other74.roomName;
  playerCount = other74.playerCount;
  __isset = other74.__isset;
}
RoomInfo& RoomInfo::operator=(const RoomInfo& other75) {
  roomId = other75.roomId;
  roomName = other75.roomName;
  playerCount = other75.playerCount;
  __isset = other75.__isset;
  return *this;
}
void RoomInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RoomInfo(";
  out << "roomId=" << to_string(roomId);
  out << ", " << "roomName=" << to_string(roomName);
  out << ", " << "playerCount=" << to_string(playerCount);
  out << ")";
}


